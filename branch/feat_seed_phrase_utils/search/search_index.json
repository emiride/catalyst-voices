{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Catalyst - Catalyst Voices \u00b6 How the docs are built \u00b6 MkDocs Material for MkDocs","title":"Home"},{"location":"#project-catalyst-catalyst-voices","text":"","title":"Project Catalyst - Catalyst Voices"},{"location":"#how-the-docs-are-built","text":"MkDocs Material for MkDocs","title":"How the docs are built"},{"location":"api/","text":"Catalyst Voices API docs \u00b6","title":"Catalyst Voices API docs"},{"location":"api/#catalyst-voices-api-docs","text":"","title":"Catalyst Voices API docs"},{"location":"api/cat-gateway/","text":"Catalyst Gateway API \u00b6","title":"Catalyst Gateway API"},{"location":"api/cat-gateway/#catalyst-gateway-api","text":"","title":"Catalyst Gateway API"},{"location":"api/cat-gateway/openapi/","text":"OpenAPI docs \u00b6","title":"OpenAPI docs"},{"location":"api/cat-gateway/openapi/#openapi-docs","text":"","title":"OpenAPI docs"},{"location":"api/cat-gateway/rust/","text":"Rust docs \u00b6 OPEN FULL PAGE Workspace Dependency Graph \u00b6 0 cat-gateway External Dependencies Graph \u00b6 Build and Development Dependencies Graph \u00b6 Module trees \u00b6 cat-gateway crate \u00b6 crate cat_gateway \u251c\u2500\u2500 mod build_info : pub ( crate ) \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u251c\u2500\u2500 struct SyncParams : pub ( self ) \u2502 \u2514\u2500\u2500 mod util : pub ( crate ) \u2502 \u251c\u2500\u2500 struct Asset : pub \u2502 \u251c\u2500\u2500 struct PolicyAsset : pub \u2502 \u251c\u2500\u2500 type StakeCredentialHash : pub \u2502 \u251c\u2500\u2500 type StakeCredentialKey : pub \u2502 \u251c\u2500\u2500 type WitnessHash : pub \u2502 \u2514\u2500\u2500 type WitnessPubKey : pub \u251c\u2500\u2500 mod cli : pub ( crate ) \u2502 \u2514\u2500\u2500 enum Cli : pub ( crate ) \u251c\u2500\u2500 mod db : pub ( crate ) \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum Error : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct EventDB : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type SqlDbPool : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct NotFoundError : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod legacy : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod queries : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod review : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod search : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod vit_ss : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod fund : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod types : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct BallotType : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GroupVotePlans : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveBallots : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveChoices : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalBallot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlan : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventGoal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventRegistration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventSchedule : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum VotingPowerAlgorithm : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotingPowerSettings : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveType : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RewardDefinition : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterGroup : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ProposerDetails : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegation : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegator : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RewardAddress : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Voter : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct VoterGroupId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterInfo : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod review : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AdvisorReview : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Rating : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ReviewType : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod search : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum SearchColumn : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchConstraint : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchOrderBy : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchQuery : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchResult : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum SearchTable : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum ValueResults : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod vit_ss : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod challenge : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Challenge : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ChallengeHighlights : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fund : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Fund : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FundNextInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FundStageDates : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct FundWithNext : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod goal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Goal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod group : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Group : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod vote_plan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Voteplan : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod voting_status : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod schema_check : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct MismatchedSchemaError : pub ( crate ) \u2502 \u2514\u2500\u2500 mod index : pub ( crate ) \u2502 \u251c\u2500\u2500 mod block : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod certs : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CertInsertQuery : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeRegistrationInsertQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cip36 : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Cip36InsertQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod insert_cip36 : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod insert_cip36_for_vote_key : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod insert_cip36_invalid : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod txi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct TxiInsertParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct TxiInsertQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod txo : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct TxoInsertQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_txo : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_txo_asset : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_unstaked_txo : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2514\u2500\u2500 mod insert_unstaked_txo_asset : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u251c\u2500\u2500 mod queries : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryResult : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryResults : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryTasks : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct PreparedQueries : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum PreparedQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum PreparedSelectQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type SizedBatch : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod staked_ada : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod get_txi_by_txn_hash : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxiByTxnHashesQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxiByTxnHashesQueryParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod result : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct GetTxiByTxnHashesQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod get_txo_by_stake_address : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxoByStakeAddressQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxoByStakeAddressQueryParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod result : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct GetTxoByStakeAddressQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod update_txo_spent : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct UpdateTxoSpentQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct UpdateTxoSpentQueryParams : pub ( crate ) \u2502 \u251c\u2500\u2500 mod schema : pub ( crate ) \u2502 \u2514\u2500\u2500 mod session : pub ( crate ) \u2502 \u251c\u2500\u2500 struct CassandraSession : pub ( crate ) \u2502 \u251c\u2500\u2500 enum CompressionChoice : pub ( crate ) \u2502 \u2514\u2500\u2500 enum TlsChoice : pub ( crate ) \u251c\u2500\u2500 mod logger : pub ( crate ) \u2502 \u251c\u2500\u2500 enum LogLevel : pub ( crate ) \u2502 \u2514\u2500\u2500 type LoggerHandle : pub ( crate ) \u251c\u2500\u2500 mod service : pub ( crate ) \u2502 \u251c\u2500\u2500 mod api : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod auth : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod endpoint : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AuthTokenError : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CatalystSecurityScheme : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type DecodedAuthToken : pub \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type EncodedAuthToken : pub \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod token : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Kid : pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SignatureEd25519 : pub \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct UlidBytes : pub \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CardanoApi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod date_time_to_slot_number_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod staked_ada_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct TxoInfo : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod sync_state_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod types : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type DateTime : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type MetadataCip36 : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type Nonce : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type PaymentAddress : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct PubKey : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type PublicVotingInfo : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type SlotNumber : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type StakeAmount : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type StakeCredential : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type TxId : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VotingInfo : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod health : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct HealthApi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod inspection_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum DeepQueryInspectionFlag : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum LogLevel : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod live_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ready_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod started_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod legacy : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 type LegacyApi : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RegistrationApi : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod v0 : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct V0Api : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod message_post : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod plans_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod v1 : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct V1Api : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod account_votes_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod fragments_post : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod fragments_statuses : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u251c\u2500\u2500 mod common : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod objects : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type RawElementValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type RawValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod network : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Network : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegation : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegations : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct DirectVoter : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RegistrationInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VotingInfo : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod slot_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Slot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SlotInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_address : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeAddress : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type RawElementValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type RawValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FullStakeInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod sync_state : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SyncState : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod legacy : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod account_votes : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AccountId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AccountVote : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlanId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod block : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct BlockDate : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Epoch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Slot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod delegate_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct DelegatePublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event_id : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct EventId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragment_status : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum FragmentStatus : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct StatusInABlock : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct StatusPending : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StatusRejected : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragments_batch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentDef : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct FragmentsBatch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragments_processing_summary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentsProcessingSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum ReasonRejected : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct RejectedFragment : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakePublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod vote_plan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_group_id : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VoterGroupId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterRegistration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod voting_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotingPublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod server_error : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ServerError : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod validation_error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ValidationError : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum ErrorResponses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FilteredByStatusCodeResponse : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum WithErrorResponses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod tags : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 enum ApiTags : pub ( crate ) \u2502 \u251c\u2500\u2500 mod docs : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct Files : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod stoplight_elements : pub ( self ) \u2502 \u251c\u2500\u2500 mod poem_service : pub ( self ) \u2502 \u2514\u2500\u2500 mod utilities : pub ( crate ) \u2502 \u251c\u2500\u2500 enum NetworkValidationError : pub ( crate ) \u2502 \u251c\u2500\u2500 mod catch_panic : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct ServicePanicHandler : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 type Response : pub ( self ) \u2502 \u251c\u2500\u2500 mod convert : pub ( crate ) \u2502 \u251c\u2500\u2500 mod middleware : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod schema_validation : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SchemaVersionValidation : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SchemaVersionValidationImpl : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 mod tracing_mw : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct ResponseData : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct Tracing : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct TracingEndpoint : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2514\u2500\u2500 mod net : pub ( crate ) \u2514\u2500\u2500 mod settings : pub ( crate ) \u251c\u2500\u2500 struct CassandraEnvVars : pub ( crate ) \u251c\u2500\u2500 struct ChainFollowerEnvVars : pub ( crate ) \u251c\u2500\u2500 struct DocsSettings : pub ( crate ) \u251c\u2500\u2500 struct EnvVars : pub ( self ) \u251c\u2500\u2500 struct ServiceSettings : pub ( crate ) \u251c\u2500\u2500 struct Settings : pub ( crate ) \u251c\u2500\u2500 struct StringEnvVar : pub ( crate ) \u2514\u2500\u2500 enum StringEnvVarParams : pub ( self ) Module graphs \u00b6 cat-gateway crate \u00b6","title":"Rust docs"},{"location":"api/cat-gateway/rust/#rust-docs","text":"OPEN FULL PAGE","title":"Rust docs"},{"location":"api/cat-gateway/rust/#workspace-dependency-graph","text":"0 cat-gateway","title":"Workspace Dependency Graph"},{"location":"api/cat-gateway/rust/#external-dependencies-graph","text":"","title":"External Dependencies Graph"},{"location":"api/cat-gateway/rust/#build-and-development-dependencies-graph","text":"","title":"Build and Development Dependencies Graph"},{"location":"api/cat-gateway/rust/#module-trees","text":"","title":"Module trees"},{"location":"api/cat-gateway/rust/#cat-gateway-crate","text":"crate cat_gateway \u251c\u2500\u2500 mod build_info : pub ( crate ) \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u251c\u2500\u2500 struct SyncParams : pub ( self ) \u2502 \u2514\u2500\u2500 mod util : pub ( crate ) \u2502 \u251c\u2500\u2500 struct Asset : pub \u2502 \u251c\u2500\u2500 struct PolicyAsset : pub \u2502 \u251c\u2500\u2500 type StakeCredentialHash : pub \u2502 \u251c\u2500\u2500 type StakeCredentialKey : pub \u2502 \u251c\u2500\u2500 type WitnessHash : pub \u2502 \u2514\u2500\u2500 type WitnessPubKey : pub \u251c\u2500\u2500 mod cli : pub ( crate ) \u2502 \u2514\u2500\u2500 enum Cli : pub ( crate ) \u251c\u2500\u2500 mod db : pub ( crate ) \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum Error : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct EventDB : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type SqlDbPool : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct NotFoundError : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod legacy : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod queries : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod review : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod search : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod vit_ss : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod fund : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod types : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Ballot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct BallotType : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GroupVotePlans : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveBallots : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveChoices : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalBallot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlan : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Event : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventGoal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventRegistration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventSchedule : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct EventSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum VotingPowerAlgorithm : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotingPowerSettings : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Objective : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ObjectiveType : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RewardDefinition : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterGroup : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Proposal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalDetails : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct ProposalSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ProposerDetails : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegation : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegator : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RewardAddress : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Voter : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct VoterGroupId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterInfo : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod review : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AdvisorReview : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Rating : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ReviewType : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod search : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum SearchColumn : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchConstraint : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchOrderBy : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchQuery : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SearchResult : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum SearchTable : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum ValueResults : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod vit_ss : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod challenge : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Challenge : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ChallengeHighlights : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fund : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Fund : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FundNextInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FundStageDates : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct FundWithNext : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod goal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Goal : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod group : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Group : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod vote_plan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Voteplan : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod voting_status : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod schema_check : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct MismatchedSchemaError : pub ( crate ) \u2502 \u2514\u2500\u2500 mod index : pub ( crate ) \u2502 \u251c\u2500\u2500 mod block : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod certs : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CertInsertQuery : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeRegistrationInsertQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cip36 : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Cip36InsertQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod insert_cip36 : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod insert_cip36_for_vote_key : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod insert_cip36_invalid : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod txi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct TxiInsertParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct TxiInsertQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod txo : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct TxoInsertQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_txo : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_txo_asset : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u251c\u2500\u2500 mod insert_unstaked_txo : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u2502 \u2514\u2500\u2500 mod insert_unstaked_txo_asset : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct Params : pub ( super ) \u2502 \u251c\u2500\u2500 mod queries : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryResult : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryResults : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type FallibleQueryTasks : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct PreparedQueries : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum PreparedQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 enum PreparedSelectQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 type SizedBatch : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod staked_ada : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod get_txi_by_txn_hash : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxiByTxnHashesQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxiByTxnHashesQueryParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod result : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct GetTxiByTxnHashesQuery : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod get_txo_by_stake_address : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxoByStakeAddressQuery : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct GetTxoByStakeAddressQueryParams : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod result : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct GetTxoByStakeAddressQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod update_txo_spent : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct UpdateTxoSpentQuery : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct UpdateTxoSpentQueryParams : pub ( crate ) \u2502 \u251c\u2500\u2500 mod schema : pub ( crate ) \u2502 \u2514\u2500\u2500 mod session : pub ( crate ) \u2502 \u251c\u2500\u2500 struct CassandraSession : pub ( crate ) \u2502 \u251c\u2500\u2500 enum CompressionChoice : pub ( crate ) \u2502 \u2514\u2500\u2500 enum TlsChoice : pub ( crate ) \u251c\u2500\u2500 mod logger : pub ( crate ) \u2502 \u251c\u2500\u2500 enum LogLevel : pub ( crate ) \u2502 \u2514\u2500\u2500 type LoggerHandle : pub ( crate ) \u251c\u2500\u2500 mod service : pub ( crate ) \u2502 \u251c\u2500\u2500 mod api : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod auth : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod endpoint : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AuthTokenError : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CatalystSecurityScheme : pub \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type DecodedAuthToken : pub \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type EncodedAuthToken : pub \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod token : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Kid : pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SignatureEd25519 : pub \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct UlidBytes : pub \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct CardanoApi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod date_time_to_slot_number_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod staked_ada_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct TxoInfo : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod sync_state_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod types : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type DateTime : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type MetadataCip36 : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type Nonce : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type PaymentAddress : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct PubKey : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type PublicVotingInfo : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type SlotNumber : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type StakeAmount : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type StakeCredential : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type TxId : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VotingInfo : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod health : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct HealthApi : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod inspection_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum DeepQueryInspectionFlag : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum LogLevel : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod live_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod ready_get : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod started_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod legacy : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 type LegacyApi : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod registration : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RegistrationApi : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod v0 : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct V0Api : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod message_post : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod plans_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod v1 : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct V1Api : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod account_votes_get : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod fragments_post : pub ( self ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod fragments_statuses : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 type AllResponses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 enum Responses : pub ( crate ) \u2502 \u251c\u2500\u2500 mod common : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 mod objects : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type RawElementValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type RawValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod network : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum Network : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod registration_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegation : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Delegations : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct DirectVoter : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct RegistrationInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VotingInfo : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod slot_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Slot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SlotInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_address : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeAddress : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 type RawElementValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type RawValueType : pub ( self ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FullStakeInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakeInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod sync_state : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SyncState : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod legacy : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod account_votes : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AccountId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct AccountVote : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlanId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod block : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct BlockDate : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct Epoch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Slot : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod delegate_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct DelegatePublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod event_id : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct EventId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragment_status : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum FragmentStatus : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct StatusInABlock : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct StatusPending : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StatusRejected : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragments_batch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentDef : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct FragmentsBatch : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod fragments_processing_summary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FragmentsProcessingSummary : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum ReasonRejected : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct RejectedFragment : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct Hash : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod stake_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct StakePublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod vote_plan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotePlan : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_group_id : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum VoterGroupId : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_info : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterInfo : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod voter_registration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VoterRegistration : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod voting_public_key : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct VotingPublicKey : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 mod server_error : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ServerError : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 mod validation_error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct ValidationError : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod responses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 enum ErrorResponses : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct FilteredByStatusCodeResponse : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 enum WithErrorResponses : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod tags : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 enum ApiTags : pub ( crate ) \u2502 \u251c\u2500\u2500 mod docs : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct Files : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod stoplight_elements : pub ( self ) \u2502 \u251c\u2500\u2500 mod poem_service : pub ( self ) \u2502 \u2514\u2500\u2500 mod utilities : pub ( crate ) \u2502 \u251c\u2500\u2500 enum NetworkValidationError : pub ( crate ) \u2502 \u251c\u2500\u2500 mod catch_panic : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct ServicePanicHandler : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 type Response : pub ( self ) \u2502 \u251c\u2500\u2500 mod convert : pub ( crate ) \u2502 \u251c\u2500\u2500 mod middleware : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod schema_validation : pub ( crate ) \u2502 \u2502 \u2502 \u251c\u2500\u2500 struct SchemaVersionValidation : pub ( crate ) \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct SchemaVersionValidationImpl : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 mod tracing_mw : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct ResponseData : pub ( self ) \u2502 \u2502 \u251c\u2500\u2500 struct Tracing : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct TracingEndpoint : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 type Output : pub ( self ) \u2502 \u2514\u2500\u2500 mod net : pub ( crate ) \u2514\u2500\u2500 mod settings : pub ( crate ) \u251c\u2500\u2500 struct CassandraEnvVars : pub ( crate ) \u251c\u2500\u2500 struct ChainFollowerEnvVars : pub ( crate ) \u251c\u2500\u2500 struct DocsSettings : pub ( crate ) \u251c\u2500\u2500 struct EnvVars : pub ( self ) \u251c\u2500\u2500 struct ServiceSettings : pub ( crate ) \u251c\u2500\u2500 struct Settings : pub ( crate ) \u251c\u2500\u2500 struct StringEnvVar : pub ( crate ) \u2514\u2500\u2500 enum StringEnvVarParams : pub ( self )","title":"cat-gateway crate"},{"location":"api/cat-gateway/rust/#module-graphs","text":"","title":"Module graphs"},{"location":"api/cat-gateway/rust/#cat-gateway-crate_1","text":"","title":"cat-gateway crate"},{"location":"api/cat-gateway/rust-docs/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/","text":"Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries. Copyright 2014 - 2023 Adobe (http://www.adobe.com/), with Reserved Font Name \u2018Source\u2019. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries. This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007 \u00b6 PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \"Reserved Font Name\" refers to any names specified as such after the copyright statement(s). \"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s). \"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION & CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: 1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. 2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. 3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. 4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. 5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","title":"SourceSerif4 LICENSE 3bb119e13b1258b7"},{"location":"api/cat-gateway/rust-docs/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/#sil-open-font-license-version-11-26-february-2007","text":"PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \"Reserved Font Name\" refers to any names specified as such after the copyright statement(s). \"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s). \"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION & CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: 1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. 2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. 3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. 4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. 5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","title":"SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007"},{"location":"appendix/","text":"Appendix \u00b6 The appendix contains collections of extra information and examples relevant to Catalyst Voices.","title":"Appendix"},{"location":"appendix/#appendix","text":"The appendix contains collections of extra information and examples relevant to Catalyst Voices.","title":"Appendix"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records api \u00b6 0006 Cursor-based pagination for Catalyst Data Service arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records dart \u00b6 0003 Flutter for Catalyst Voting Frontend flutter \u00b6 0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture images \u00b6 0004 Store/Display images in WebP format.","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#api","text":"0006 Cursor-based pagination for Catalyst Data Service","title":"api"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"},{"location":"appendix/tags/#dart","text":"0003 Flutter for Catalyst Voting Frontend","title":"dart"},{"location":"appendix/tags/#flutter","text":"0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture","title":"flutter"},{"location":"appendix/tags/#images","text":"0004 Store/Display images in WebP format.","title":"images"},{"location":"appendix/important/","text":"Important \u00b6","title":"Important"},{"location":"appendix/important/#important","text":"","title":"Important"},{"location":"appendix/important/coc/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"appendix/important/coc/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"appendix/important/coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"appendix/important/coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"appendix/important/coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"appendix/important/coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"appendix/important/coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"appendix/important/coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"appendix/important/coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"appendix/important/coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"appendix/important/coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"appendix/important/coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"appendix/important/coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"appendix/important/contributing/","text":"Contributing to Catalyst Voices \u00b6 First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Catalyst Voices Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89 Code of Conduct \u00b6 This project and everyone participating in it is governed by the Catalyst voices Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io . I Have a Question \u00b6 If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible. I Want To Contribute \u00b6 Reporting Bugs \u00b6 Before Submitting a Bug Report \u00b6 A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions? How Do I Submit a Good Bug Report? \u00b6 You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone . Suggesting Enhancements \u00b6 This section guides you through submitting an enhancement suggestion for Catalyst voices, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions. Before Submitting an Enhancement \u00b6 Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library. How Do I Submit a Good Enhancement Suggestion? \u00b6 Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most Catalyst voices users. You may also want to point out the other projects that solved it better and which could serve as inspiration. Your First Code Contribution \u00b6 Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at Catalyst Voices, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding! Improving The Documentation \u00b6 Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers. Style guides \u00b6 Rust \u00b6 For Rust, we follow the Rust Style Guide . Dart \u00b6 For Dart, we follow the Effective Dart style guide. Flutter \u00b6 For Flutter, we follow the Flutter Style Guide . Commit Messages \u00b6 Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Contributing"},{"location":"appendix/important/contributing/#contributing-to-catalyst-voices","text":"First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Catalyst Voices Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89","title":"Contributing to Catalyst Voices"},{"location":"appendix/important/contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the Catalyst voices Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io .","title":"Code of Conduct"},{"location":"appendix/important/contributing/#i-have-a-question","text":"If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible.","title":"I Have a Question"},{"location":"appendix/important/contributing/#i-want-to-contribute","text":"","title":"I Want To Contribute"},{"location":"appendix/important/contributing/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"appendix/important/contributing/#before-submitting-a-bug-report","text":"A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions?","title":"Before Submitting a Bug Report"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-bug-report","text":"You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone .","title":"How Do I Submit a Good Bug Report?"},{"location":"appendix/important/contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for Catalyst voices, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.","title":"Suggesting Enhancements"},{"location":"appendix/important/contributing/#before-submitting-an-enhancement","text":"Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.","title":"Before Submitting an Enhancement"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most Catalyst voices users. You may also want to point out the other projects that solved it better and which could serve as inspiration.","title":"How Do I Submit a Good Enhancement Suggestion?"},{"location":"appendix/important/contributing/#your-first-code-contribution","text":"Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at Catalyst Voices, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding!","title":"Your First Code Contribution"},{"location":"appendix/important/contributing/#improving-the-documentation","text":"Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers.","title":"Improving The Documentation"},{"location":"appendix/important/contributing/#style-guides","text":"","title":"Style guides"},{"location":"appendix/important/contributing/#rust","text":"For Rust, we follow the Rust Style Guide .","title":"Rust"},{"location":"appendix/important/contributing/#dart","text":"For Dart, we follow the Effective Dart style guide.","title":"Dart"},{"location":"appendix/important/contributing/#flutter","text":"For Flutter, we follow the Flutter Style Guide .","title":"Flutter"},{"location":"appendix/important/contributing/#commit-messages","text":"Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Commit Messages"},{"location":"appendix/important/license/","text":"License \u00b6 Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/license/#license","text":"Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/security/","text":"Security \u00b6 Reporting a Vulnerability \u00b6 Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Security"},{"location":"appendix/important/security/#security","text":"","title":"Security"},{"location":"appendix/important/security/#reporting-a-vulnerability","text":"Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Reporting a Vulnerability"},{"location":"architecture/","text":"Architecture \u00b6 About arc42 \u00b6 The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"Index"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#about-arc42","text":"The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"About arc42"},{"location":"architecture/01_introduction_and_goals/","text":"Introduction and Goals \u00b6 Requirements Overview \u00b6 Quality Goals \u00b6 Main quality goals: Quality Category Quality Description Usable User experience Voting and browsing proposals should be easy and intuitive to do Usable Correctness System functions should provide accurate results Secure Access control Role-Based Access Control Secure Privacy User information are kept private Secure Accountability Voting results can be audited by external parties Reliable Fail-safe In case of failures the system does not loose data Stakeholders \u00b6 Role/Name Contact Product-Owner Mike Developers Catalyst-Team Users Catalyst-Community Admin Danny SRE Josh Testers Catalyst-QA-Team","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#introduction-and-goals","text":"","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#requirements-overview","text":"","title":"Requirements Overview"},{"location":"architecture/01_introduction_and_goals/#quality-goals","text":"Main quality goals: Quality Category Quality Description Usable User experience Voting and browsing proposals should be easy and intuitive to do Usable Correctness System functions should provide accurate results Secure Access control Role-Based Access Control Secure Privacy User information are kept private Secure Accountability Voting results can be audited by external parties Reliable Fail-safe In case of failures the system does not loose data","title":"Quality Goals"},{"location":"architecture/01_introduction_and_goals/#stakeholders","text":"Role/Name Contact Product-Owner Mike Developers Catalyst-Team Users Catalyst-Community Admin Danny SRE Josh Testers Catalyst-QA-Team","title":"Stakeholders"},{"location":"architecture/02_architecture_constraints/","text":"Architecture Constraints \u00b6","title":"Architecture Constraints"},{"location":"architecture/02_architecture_constraints/#architecture-constraints","text":"","title":"Architecture Constraints"},{"location":"architecture/03_system_scope_and_context/","text":"System Scope and Context \u00b6 Business Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~ Technical Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#system-scope-and-context","text":"","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#business-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~","title":"Business Context"},{"location":"architecture/03_system_scope_and_context/#technical-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"Technical Context"},{"location":"architecture/04_solution_strategy/","text":"Solution Strategy \u00b6","title":"Solution Strategy"},{"location":"architecture/04_solution_strategy/#solution-strategy","text":"","title":"Solution Strategy"},{"location":"architecture/05_building_block_view/","text":"Building Block View \u00b6 White box Overall System \u00b6 ... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~ ~Name black box 1~ \u00b6 ... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~ ~Name black box 2~ \u00b6 ... ~black box template~ ~Name black box n~ \u00b6 ... ~black box template~ ~Name interface 1~ \u00b6 \u2026 ~Name interface m~ \u00b6 Level 2 \u00b6 White Box ~building block 1~ \u00b6 ... ~white box template~ White Box ~building block 2~ \u00b6 ... ~white box template~ \u2026 White Box ~building block m~ \u00b6 ... ~white box template~ Level 3 \u00b6 White Box ~_building block x.1_~ \u00b6 ... ~white box template~ White Box ~_building block x.2_~ \u00b6 ... ~white box template~ White Box ~_building block y.1_~ \u00b6 ... ~white box template~","title":"Building Block View"},{"location":"architecture/05_building_block_view/#building-block-view","text":"","title":"Building Block View"},{"location":"architecture/05_building_block_view/#white-box-overall-system","text":"... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~","title":"White box Overall System"},{"location":"architecture/05_building_block_view/#name-black-box-1","text":"... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~","title":"~Name black box 1~"},{"location":"architecture/05_building_block_view/#name-black-box-2","text":"... ~black box template~","title":"~Name black box 2~"},{"location":"architecture/05_building_block_view/#name-black-box-n","text":"... ~black box template~","title":"~Name black box n~"},{"location":"architecture/05_building_block_view/#name-interface-1","text":"\u2026","title":"~Name interface 1~"},{"location":"architecture/05_building_block_view/#name-interface-m","text":"","title":"~Name interface m~"},{"location":"architecture/05_building_block_view/#level-2","text":"","title":"Level 2"},{"location":"architecture/05_building_block_view/#white-box-building-block-1","text":"... ~white box template~","title":"White Box ~building block 1~"},{"location":"architecture/05_building_block_view/#white-box-building-block-2","text":"... ~white box template~ \u2026","title":"White Box ~building block 2~"},{"location":"architecture/05_building_block_view/#white-box-building-block-m","text":"... ~white box template~","title":"White Box ~building block m~"},{"location":"architecture/05_building_block_view/#level-3","text":"","title":"Level 3"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x1_","text":"... ~white box template~","title":"White Box ~_building block x.1_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x2_","text":"... ~white box template~","title":"White Box ~_building block x.2_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-y1_","text":"... ~white box template~","title":"White Box ~_building block y.1_~"},{"location":"architecture/06_runtime_view/","text":"Runtime View \u00b6 ~Runtime Scenario 1~ \u00b6 ~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~ ~Runtime Scenario 2~ \u00b6 \u2026 \u00b6 ~Runtime Scenario n~ \u00b6","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-view","text":"","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-scenario-1","text":"~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~","title":"~Runtime Scenario 1~"},{"location":"architecture/06_runtime_view/#runtime-scenario-2","text":"","title":"~Runtime Scenario 2~"},{"location":"architecture/06_runtime_view/#_1","text":"","title":"\u2026"},{"location":"architecture/06_runtime_view/#runtime-scenario-n","text":"","title":"~Runtime Scenario n~"},{"location":"architecture/07_deployment_view/","text":"Deployment View \u00b6 Infrastructure Level 1 \u00b6 ... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~ Infrastructure Level 2 \u00b6 ~Infrastructure Element 1~ \u00b6 ... ~diagram + explanation~ ~Infrastructure Element 2~ \u00b6 ... ~diagram + explanation~ \u2026 ~Infrastructure Element n~ \u00b6 ... ~diagram + explanation~","title":"Deployment View"},{"location":"architecture/07_deployment_view/#deployment-view","text":"","title":"Deployment View"},{"location":"architecture/07_deployment_view/#infrastructure-level-1","text":"... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~","title":"Infrastructure Level 1"},{"location":"architecture/07_deployment_view/#infrastructure-level-2","text":"","title":"Infrastructure Level 2"},{"location":"architecture/07_deployment_view/#infrastructure-element-1","text":"... ~diagram + explanation~","title":"~Infrastructure Element 1~"},{"location":"architecture/07_deployment_view/#infrastructure-element-2","text":"... ~diagram + explanation~ \u2026","title":"~Infrastructure Element 2~"},{"location":"architecture/07_deployment_view/#infrastructure-element-n","text":"... ~diagram + explanation~","title":"~Infrastructure Element n~"},{"location":"architecture/11_technical_risks/","text":"Risks and Technical Debts \u00b6","title":"Risks and Technical Debts"},{"location":"architecture/11_technical_risks/#risks-and-technical-debts","text":"","title":"Risks and Technical Debts"},{"location":"architecture/12_glossary/","text":"Glossary \u00b6 Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/12_glossary/#glossary","text":"Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/08_concepts/","text":"Cross-cutting Concepts \u00b6 Each Concept will be documented in its own set of markdown files/images under this folder.","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/#cross-cutting-concepts","text":"Each Concept will be documented in its own set of markdown files/images under this folder.","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/event_db/migrations/","text":"Migrations (Version 9) \u00b6 Full Schema Diagram config_tables \u00b6 Schema Diagram Schema Definition -- Catalyst Voices Database - Configuration Data -- sqlfluff:dialect:postgres -- Configuration Tables -- ------------------------------------------------------------------------------------------------- -- Version of the schema (Used by Refinery to manage migrations.). CREATE TABLE IF NOT EXISTS refinery_schema_history ( version INTEGER NOT NULL PRIMARY KEY , name VARCHAR ( 255 ), applied_on VARCHAR ( 255 ), checksum VARCHAR ( 255 ) ); COMMENT ON TABLE refinery_schema_history IS 'History of Schema Updates to the Database. Managed by the `refinery` cli tool.' ; -- ------------------------------------------------------------------------------------------------- -- Json Schema Library -- Json Schemas used to validate the contents of JSONB fields in this database. -- * `id,type,name` matches the $id URI in the schema itself. -- * The URI format is customized and is of the form `catalyst_schema://<id>/<type>/<name>` -- * Schemas will be added here automatically during migration of the database, or interactively -- * during operation of the system. -- * They should match the schema they hold, and on read they should be validated. -- * The code should refuse to serve or use any schema that does not match. -- * -- * id - This is unique and can uniquely identify any schema. -- * type - This allows us to find all schemas of a known type. -- * name - This is the unique name of the schema. `id` always equals the same `type/name`. -- * for convention `type` and `name` string should only used a-z,0-9 and underscore. -- * Dashes, symbols or upper case should not be used. -- Catalyst Event Database CREATE TABLE json_schema_type ( id UUID PRIMARY KEY , type TEXT NOT NULL , name TEXT NOT NULL , schema JSONB NOT NULL ); CREATE INDEX json_schema_type_idx ON json_schema_type ( \"type\" ); CREATE UNIQUE INDEX json_schema_type_name_idx ON json_schema_type ( \"type\" , \"name\" ); COMMENT ON TABLE json_schema_type IS 'Library of defined json schemas used to validate JSONB field contents.' ; COMMENT ON COLUMN json_schema_type . id IS 'Synthetic Unique ID for each json_schema_type (UUIDv4). Must match the `UUID` component of the $id URI inside the schema.' ; COMMENT ON COLUMN json_schema_type . type IS 'The type of the json schema type. eg. \"event\" Must match the `type` component of the $id URI inside the schema.' ; COMMENT ON COLUMN json_schema_type . name IS 'The name of the json schema type. eg. \"catalyst_v1\" Must match the `name` component of the $id URI inside the schema.' ; -- Known Schema Types are inserted when the Table which uses that type is created. -- Or can be added by migrations as the database evolves. -- They could also be added outside of the schema setup by inserting directly into the database. -- ------------------------------------------------------------------------------------------------- -- Config Table -- This table is looked up with three keys, `id`, `id2` and `id3` CREATE TABLE config ( row_id SERIAL PRIMARY KEY , id VARCHAR NOT NULL , id2 VARCHAR NOT NULL , id3 VARCHAR NOT NULL , value JSONB NULL , value_schema UUID , FOREIGN KEY ( value_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE ); -- cardano+follower+preview must be unique, they are a combined key. CREATE UNIQUE INDEX config_idx ON config ( id , id2 , id3 ); COMMENT ON TABLE config IS 'General JSON Configuration and Data Values. Defined Data Formats: Currently None ' ; COMMENT ON COLUMN config . row_id IS 'Synthetic unique key. Always lookup using `cardano.follower.preview`' ; COMMENT ON COLUMN config . id IS 'The name/id of the general config value/variable' ; COMMENT ON COLUMN config . id2 IS '2nd ID of the general config value. Must be defined, use \"\" if not required.' ; COMMENT ON COLUMN config . id3 IS '3rd ID of the general config value. Must be defined, use \"\" if not required.' ; COMMENT ON COLUMN config . value IS 'The JSON value of the system variable `cardano.follower.preview`' ; COMMENT ON COLUMN config . value_schema IS 'The Schema the Config Value conforms to. The `value` field must conform to this schema.' ; COMMENT ON INDEX config_idx IS 'We use three keys combined uniquely rather than forcing string concatenation at the app level to allow for querying groups of data.' ; INSERT INTO config ( id , id2 , id3 , value ) VALUES -- ( -- 'cardano', -- 'follower', -- 'mainnet', -- '{ -- \"relay\": \"relays-new.cardano-mainnet.iohk.io:3001\", -- \"mithril_snapshot\": { -- \"path\": \"/tmp/mainnet/immutable\", -- \"timing_pattern\": 25 -- } -- }' -- ), -- ( -- 'cardano', -- 'follower', -- 'preview', -- '{ -- \"relay\": \"preview-node.play.dev.cardano.org:3001\", -- \"mithril_snapshot\": { -- \"path\": \"/tmp/preview/immutable\", -- \"timing_pattern\": 25 -- } -- }' -- ), ( 'cardano' , 'follower' , 'preprod' , '{ \"relay\": \"preprod-node.play.dev.cardano.org:3001\", \"mithril_snapshot\": { \"path\": \"/tmp/preprod/immutable\", \"timing_pattern\": 25 } }' ); -- ------------------------------------------------------------------------------------------------- -- * Temporary. -- * Insert known json schema manually until automated json schema migration scripting is added. -- * This will be removed in the future. -- Add the Initial Schemas for configuration. --INSERT INTO json_schema_type (id, type, name, schema) --VALUES --( -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- Fix the Schema ID so that it is consistent. -- 'config', -- 'dbsync', -- (SELECT PG_READ_FILE('../json_schemas/config/dbsync.json'))::JSONB), ( -- '62d614c0-97a7-41ec-a976-91294b8f4384', -- Fix the Schema ID so that it is consistent. -- 'config', -- 'registration', -- (SELECT PG_READ_FILE('../json_schemas/config/registration.json'))::JSONB --); event_tables \u00b6 Schema Diagram Schema Definition -- Catalyst Voices Database - Event Data -- sqlfluff:dialect:postgres -- `id` mapping. -- * `id` is a UUID, in the past it was an auto incrementing value. -- * it is changed to a UUID so that the data can be generated independently and it is more friendly -- * and simpler for a decentralized or distributed system to safely create UUID than incremental number. -- * However we need compatibility with the rpe-existing incremental numbers. -- * Accordingly we will abuse the UUID format. -- * A V8 UUID will be defined where the low 32 bits are 0s. -- * If the ID is an incremental ID it will be mapped to this special uuid, by or-ing the incremental ID -- * with the mapping UUID, creating a compatible UUID. -- * As ALL autogenerated UUID's will be type 4, there is no possibility of collision. -- -- The Mapping UUID is defined as: `164fba58-31ff-8084-96cb-eb9d00000000` -- Event Tables -- ------------------------------------------------------------------------------------------------- CREATE TABLE event_type ( id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID (), name TEXT NOT NULL , description_schema UUID NOT NULL , data_schema UUID NOT NULL , FOREIGN KEY ( description_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE , FOREIGN KEY ( data_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX event_type_name_idx ON event_type ( name ); COMMENT ON TABLE event_type IS 'The types of event which have been defined.' ; COMMENT ON COLUMN event_type . id IS 'Synthetic Unique ID for each event_type (UUIDv4).' ; COMMENT ON COLUMN event_type . name IS 'The name of the event type. eg. \"Catalyst V1\"' ; COMMENT ON COLUMN event_type . description_schema IS 'The JSON Schema which defines the structure of the data in the `description` field in the event record.' ; COMMENT ON COLUMN event_type . data_schema IS 'The JSON Schema which defines the structure of the data in the `extra_data` field in the event record.' ; -- TODO: Would be better to read the schemas, extract the ID, and add or update new schemas. -- Run as required after migrations. -- Add Event Schemas to the known schema types. -- INSERT INTO json_schema_type_names (id) -- VALUES -- ('event_description'), -- Event Description schemas -- ('event_data'); -- Event Data Schemas -- Add the Initial Schemas for events. -- INSERT INTO json_schema_type (id, type, name, schema) -- VALUES --( -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- From the schema file. -- 'event_description', -- 'multiline_text', -- ( -- SELECT jsonb -- FROM PG_READ_FILE('../json_schemas/event/description/multiline_text.json') -- ) --), --( -- '9c5df318-fa9a-4310-80fa-490f46d1cc43', -- From the schema file. -- 'event_data', -- 'catalyst_v1', -- ( -- SELECT jsonb -- FROM PG_READ_FILE('../json_schemas/event/description/catalyst_v1.json') -- ) --); -- Define a Catalyst V1 Event. --INSERT INTO event_type (name, description_schema, data_schema) --VALUES --( -- 'Catalyst V1', -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- '9c5df318-fa9a-4310-80fa-490f46d1cc43' --); -- ------------------------------------------------------------------------------------------------- -- Event Table - Defines each voting or decision event CREATE TABLE event ( id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID (), -- The Organizer/Administrator of this event. -- Update once RBAC is defined, as Organizer is an RBAC Role. organizer TEXT NOT NULL , type UUID REFERENCES event_type ( id ), name TEXT NOT NULL , description JSONB NOT NULL , start_time TIMESTAMP , backing_start TIMESTAMP , backing_end TIMESTAMP , end_time TIMESTAMP , data JSONB NOT NULL ); CREATE UNIQUE INDEX event_name_idx ON event ( name ); COMMENT ON TABLE event IS 'The basic parameters of a related set of funding campaigns.' ; COMMENT ON COLUMN event . id IS 'Synthetic Unique ID for each event (UUIDv4).' ; COMMENT ON COLUMN event . organizer IS 'Name of the Event Organizer. Placeholder, this will need to be replaced with a reference to an authorized organization.' ; COMMENT ON COLUMN event . name IS 'The name of the event. eg. \"Fund9\" or \"SVE1\"' ; COMMENT ON COLUMN event . type IS 'The type of the event.' ; COMMENT ON COLUMN event . description IS 'A detailed description of the purpose of the event. Must conform to the JSON Schema defined by `event_type.description_schema.`' ; COMMENT ON COLUMN event . start_time IS 'The time (UTC) the event starts. NULL = Not yet defined.' ; COMMENT ON COLUMN event . backing_start IS 'The time (UTC) when backers may start backing the events campaign/s. This must >= event.start_time. NULL = Not yet defined.' ; COMMENT ON COLUMN event . backing_end IS 'The time (UTC) when backers may no longer back the events campaign/s. This must > event.backing_start and <= event.end_time. NULL = Not yet defined.' ; COMMENT ON COLUMN event . end_time IS 'The time (UTC) the event ends. Must be >= event.backing_end. NULL = Not yet defined.' ; COMMENT ON COLUMN event . data IS 'Event Type specific data defined about the event. Must conform to the JSON Schema defined by `event_type.extra_data_schema.`' ; objective_tables \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database -- Title: Objective Tables -- objective types table - Defines all currently known objectives types. CREATE TABLE objective_category ( name TEXT PRIMARY KEY , description TEXT ); COMMENT ON TABLE objective_category IS 'Defines all known and valid objective categories.' ; COMMENT ON COLUMN objective_category . name IS 'The name of this objective category.' ; COMMENT ON COLUMN objective_category . description IS 'A Description of this kind of objective category.' ; -- Define known objective categories INSERT INTO objective_category ( name , description ) VALUES ( 'catalyst-simple' , 'A Simple choice' ), ( 'catalyst-native' , '??' ), ( 'catalyst-community-choice' , 'Community collective decision' ), ( 'sve-decision' , 'Special voting event decision' ); -- known currencies - Defines all currently known currencies. CREATE TABLE currency ( name TEXT PRIMARY KEY , description TEXT ); COMMENT ON TABLE currency IS 'Defines all known and valid currencies.' ; COMMENT ON COLUMN currency . name IS 'The name of this currency type.' ; COMMENT ON COLUMN currency . description IS 'A Description of this kind of currency type.' ; -- Define known currencies INSERT INTO currency ( name , description ) VALUES ( 'USD_ADA' , 'US Dollars, converted to Cardano ADA at time of reward calculation.' ), ( 'ADA' , 'Cardano ADA.' ), ( 'CLAP' , 'CLAP tokens.' ), ( 'COTI' , 'COTI tokens.' ); -- known vote options - Defines all currently known vote options. CREATE TABLE vote_options ( id SERIAL PRIMARY KEY , idea_scale TEXT ARRAY UNIQUE , objective TEXT ARRAY UNIQUE ); COMMENT ON TABLE vote_options IS 'Defines all known vote plan option types.' ; COMMENT ON COLUMN vote_options . id IS 'Unique ID for each possible option set.' ; COMMENT ON COLUMN vote_options . idea_scale IS 'How this vote option is represented in idea scale.' ; COMMENT ON COLUMN vote_options . objective IS 'How the vote options is represented in the objective.' ; -- Define known vote_options INSERT INTO vote_options ( idea_scale , objective ) VALUES ( '{\"blank\", \"yes\", \"no\"}' , '{\"yes\", \"no\"}' ); -- goals CREATE TABLE goal ( id SERIAL PRIMARY KEY , event_id UUID NOT NULL , idx INTEGER NOT NULL , name VARCHAR NOT NULL , FOREIGN KEY ( event_id ) REFERENCES event ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX goal_index ON goal ( event_id , idx ); COMMENT ON TABLE goal IS 'The list of campaign goals for this event.' ; COMMENT ON COLUMN goal . id IS 'Synthetic Unique Key.' ; COMMENT ON COLUMN goal . idx IS 'The index specifying the order/priority of the goals.' ; COMMENT ON COLUMN goal . name IS 'The description of this event goal.' ; COMMENT ON COLUMN goal . event_id IS 'The ID of the event this goal belongs to.' ; COMMENT ON INDEX goal_index IS 'An index to enforce uniqueness of the relative `idx` field per event.' ; -- objective table - Defines all objectives for all known funds. CREATE TABLE objective ( row_id SERIAL PRIMARY KEY , id INTEGER NOT NULL , event UUID NOT NULL , category TEXT NOT NULL , title TEXT NOT NULL , description TEXT NOT NULL , rewards_currency TEXT , rewards_total BIGINT , rewards_total_lovelace BIGINT , proposers_rewards BIGINT , vote_options INTEGER , extra JSONB , FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE , FOREIGN KEY ( category ) REFERENCES objective_category ( name ) ON DELETE CASCADE , FOREIGN KEY ( rewards_currency ) REFERENCES currency ( name ) ON DELETE CASCADE , FOREIGN KEY ( vote_options ) REFERENCES vote_options ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX objective_idx ON objective ( id , event ); COMMENT ON TABLE objective IS 'All objectives for all events. A objective is a group category for selection in an event.' ; COMMENT ON COLUMN objective . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN objective . id IS 'Event specific objective ID. Can be non-unique between events (Eg, Ideascale ID for objective).' ; COMMENT ON COLUMN objective . event IS 'The specific Event ID this objective is part of.' ; COMMENT ON COLUMN objective . category IS 'What category of objective is this. See the objective_category table for allowed values.' ; COMMENT ON COLUMN objective . title IS 'The title of the objective.' ; COMMENT ON COLUMN objective . description IS 'Long form description of the objective.' ; COMMENT ON COLUMN objective . rewards_currency IS 'The currency rewards values are represented as.' ; COMMENT ON COLUMN objective . rewards_total IS 'The total reward pool to pay on this objective to winning proposals. In the Objective Currency.' ; COMMENT ON COLUMN objective . rewards_total_lovelace IS 'The total reward pool to pay on this objective to winning proposals. In Lovelace.' ; COMMENT ON COLUMN objective . proposers_rewards IS 'Not sure how this is different from rewards_total???' ; COMMENT ON COLUMN objective . vote_options IS 'The Vote Options applicable to all proposals in this objective.' ; COMMENT ON COLUMN objective . extra IS 'Extra Data for this objective represented as JSON. \"url\".\"objective\" is a URL for more info about the objective. \"highlights\" is ??? ' ; proposal_tables \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database -- Proposals Table CREATE TABLE proposal ( row_id SERIAL PRIMARY KEY , id INTEGER NOT NULL , objective INTEGER NOT NULL , title TEXT NOT NULL , summary TEXT NOT NULL , public_key TEXT NOT NULL , funds BIGINT NOT NULL , url TEXT NOT NULL , files_url TEXT NOT NULL , impact_score BIGINT NOT NULL , extra JSONB , proposer_name TEXT NOT NULL , proposer_contact TEXT NOT NULL , proposer_url TEXT NOT NULL , proposer_relevant_experience TEXT NOT NULL , bb_proposal_id BYTEA , FOREIGN KEY ( objective ) REFERENCES objective ( row_id ) ON DELETE CASCADE --FOREIGN KEY (bb_vote_options) REFERENCES vote_options ( -- objective --) ON DELETE CASCADE ); CREATE UNIQUE INDEX proposal_index ON proposal ( id , objective ); COMMENT ON TABLE proposal IS 'All Proposals for the current fund.' ; COMMENT ON COLUMN proposal . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN proposal . id IS 'Actual Proposal Unique ID' ; COMMENT ON COLUMN proposal . objective IS 'The Objective this proposal falls under.' ; COMMENT ON COLUMN proposal . title IS 'Brief title of the proposal.' ; COMMENT ON COLUMN proposal . summary IS 'A Summary of the proposal to be implemented.' ; COMMENT ON COLUMN proposal . public_key IS 'Proposals Reward Address (CIP-19 Payment Key)' ; COMMENT ON COLUMN proposal . funds IS 'How much funds (in the currency of the fund)' ; COMMENT ON COLUMN proposal . url IS 'A URL with supporting information for the proposal.' ; COMMENT ON COLUMN proposal . files_url IS 'A URL link to relevant files supporting the proposal.' ; COMMENT ON COLUMN proposal . impact_score IS 'The Impact score assigned to this proposal by the Assessors.' ; COMMENT ON COLUMN proposal . proposer_name IS 'The proposers name.' ; COMMENT ON COLUMN proposal . proposer_contact IS 'Contact details for the proposer.' ; COMMENT ON COLUMN proposal . proposer_url IS 'A URL with details of the proposer.' ; COMMENT ON COLUMN proposal . proposer_relevant_experience IS 'A freeform string describing the proposers experience relating to their capability to implement the proposal.' ; COMMENT ON COLUMN proposal . bb_proposal_id IS 'The ID used by the voting ledger (bulletin board) to refer to this proposal.' ; COMMENT ON COLUMN proposal . extra IS 'Extra data about the proposal. The types of extra data are defined by the proposal type and are not enforced. Extra Fields for `native` challenges: NONE. Extra Fields for `simple` challenges: \"problem\" : <text> - Statement of the problem the proposal tries to address. \"solution\" : <text> - The Solution to the challenge. Extra Fields for `community choice` challenge: \"brief\" : <text> - Brief explanation of a proposal. \"importance\" : <text> - The importance of the proposal. \"goal\" : <text> - The goal of the proposal is addressed to meet. \"metrics\" : <text> - The metrics of the proposal or how success will be determined.' ; -- Reviewer's levels table CREATE TABLE reviewer_level ( row_id SERIAL PRIMARY KEY , name TEXT NOT NULL , total_reward_pct NUMERIC ( 6 , 3 ) CONSTRAINT percentage CHECK ( total_reward_pct <= 100 AND total_reward_pct >= 0 ), event_id UUID NOT NULL , FOREIGN KEY ( event_id ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE reviewer_level IS 'All levels of reviewers. This table represents all different types of reviewer`s levels, which is taken into account during rewarding process.' ; COMMENT ON COLUMN reviewer_level . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN reviewer_level . name IS 'Name of the reviewer level' ; COMMENT ON COLUMN reviewer_level . total_reward_pct IS 'Total reviewer`s reward assigned to the specific level, which is defined as a percentage from the total pot of Community Review rewards (See `event.review_rewards` column).' ; COMMENT ON COLUMN reviewer_level . event_id IS 'The specific Event ID this review level is part of.' ; -- community advisor reviews -- I feel like these ratings and notes should be in a general json field to -- suit adaptability without needing schema changes. CREATE TABLE proposal_review ( row_id SERIAL PRIMARY KEY , proposal_id INTEGER NOT NULL , assessor VARCHAR NOT NULL , assessor_level INTEGER , reward_address TEXT , flags JSONB NULL , FOREIGN KEY ( proposal_id ) REFERENCES proposal ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( assessor_level ) REFERENCES reviewer_level ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE proposal_review IS 'All Reviews.' ; COMMENT ON COLUMN proposal_review . row_id IS 'Synthetic Unique Key.' ; COMMENT ON COLUMN proposal_review . proposal_id IS 'The Proposal this review is for.' ; COMMENT ON COLUMN proposal_review . assessor IS 'Assessors Anonymized ID' ; COMMENT ON COLUMN proposal_review . assessor_level IS 'Assessors level ID' ; COMMENT ON COLUMN proposal_review . reward_address IS 'Assessors reward address' ; COMMENT ON COLUMN proposal_review . flags IS 'OPTIONAL: JSON Array which defines the flags raised for this review. Flags can be raised for different reasons and have different metadata. Each entry = ```jsonc { \"flag_type\": \"<flag_type>\", // Enum of the flag type (0: Profanity, 1: Similarity 2: AI generated). \"score\": <score>, // Profanity score, similarity score, or AI generated score. 0-1. \"related_reviews\": [<review_id>] // Array of review IDs that this flag is related to (valid for similarity). } '; CREATE TABLE review_metric ( row_id SERIAL PRIMARY KEY, name VARCHAR NOT NULL, description VARCHAR NULL, min INTEGER NOT NULL, max INTEGER NOT NULL, map JSONB ARRAY NULL ); COMMENT ON TABLE review_metric IS 'Definition of all possible review metrics.'; COMMENT ON COLUMN review_metric.row_id IS 'The synthetic ID of this metric.'; COMMENT ON COLUMN review_metric.name IS 'The short name for this review metric.'; COMMENT ON COLUMN review_metric.description IS 'Long form description of what the review metric means.'; COMMENT ON COLUMN review_metric.min IS 'The minimum value of the metric (inclusive).'; COMMENT ON COLUMN review_metric.max IS 'The maximum value of the metric (inclusive).'; COMMENT ON COLUMN review_metric.map IS 'OPTIONAL: JSON Array which defines extra details for each metric score. There MUST be one entry per possible score in the range. Entries are IN ORDER, from the lowest numeric score to the highest. Each entry = { \"name\" : \"<name>\", // Symbolic Name for the metric score. \"description\" : \"<desc>\", // Description of what the named metric score means. } '; -- Define known review metrics INSERT INTO review_metric (name, description, min, max, map) VALUES ('impact', 'Impact Rating', 0, 5, null), ('feasibility', 'Feasibility Rating', 0, 5, null), ('auditability', 'Auditability Rating', 0, 5, null), ('value', 'Value Proposition Rating', 0, 5, null), ('vpa_ranking', 'VPA Ranking of the review', 0, 3, ARRAY[ '{\"name\":\"Excellent\",\"desc\":\"Excellent Review\"}', '{\"name\":\"Good\",\"desc\":\"Could be improved.\"}', '{\"name\":\"FilteredOut\",\"desc\":\"Exclude this review\"}', '{\"name\":\"NA\", \"desc\":\"Not Applicable\"}' ]::JSON []); CREATE TABLE objective_review_metric ( row_id SERIAL PRIMARY KEY, objective INTEGER NOT NULL, metric INTEGER NOT NULL, note BOOLEAN, review_group VARCHAR, UNIQUE (objective, metric, review_group), FOREIGN KEY (objective) REFERENCES objective (row_id) ON DELETE CASCADE, FOREIGN KEY (metric) REFERENCES review_metric (row_id) ON DELETE CASCADE ); COMMENT ON TABLE objective_review_metric IS 'All valid metrics for reviews on an objective.'; COMMENT ON COLUMN objective_review_metric.objective IS 'The objective that can use this review metric.'; COMMENT ON COLUMN objective_review_metric.metric IS 'The review metric that the objective can use.'; COMMENT ON COLUMN objective_review_metric.note IS 'Does the metric require a Note? NULL = Optional. True = MUST include Note. False = MUST NOT include Note.'; COMMENT ON COLUMN objective_review_metric.review_group IS 'The review group that can give this metric. Details TBD.'; CREATE TABLE review_rating ( row_id SERIAL PRIMARY KEY, review_id INTEGER NOT NULL, metric INTEGER NOT NULL, rating INTEGER NOT NULL, note VARCHAR, UNIQUE (review_id, metric), FOREIGN KEY (review_id) REFERENCES proposal_review (row_id) ON DELETE CASCADE, FOREIGN KEY (metric) REFERENCES review_metric (row_id) ON DELETE CASCADE ); COMMENT ON TABLE review_rating IS 'An Individual rating for a metric given on a review.'; COMMENT ON COLUMN review_rating.row_id IS 'Synthetic ID of this individual rating.'; COMMENT ON COLUMN review_rating.review_id IS 'The review the metric is being given for.'; COMMENT ON COLUMN review_rating.metric IS 'Metric the rating is being given for.'; COMMENT ON COLUMN review_rating.rating IS 'The rating being given to the metric.'; COMMENT ON COLUMN review_rating.note IS 'OPTIONAL: Note about the rating given.'; ``` vote_plan \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database -- Vote Plan Categories CREATE TABLE voteplan_category ( name TEXT PRIMARY KEY , public_key BOOL ); INSERT INTO voteplan_category ( name , public_key ) VALUES ( 'public' , false ), -- Fully public votes only ( 'private' , true ), -- Fully private votes only. ( 'cast-private' , true ); -- Private until tally, then decrypted. COMMENT ON TABLE voteplan_category IS 'The category of vote plan currently supported.' ; COMMENT ON COLUMN voteplan_category . name IS 'The UNIQUE name of this voteplan category.' ; COMMENT ON COLUMN voteplan_category . public_key IS 'Does this vote plan category require a public key.' ; -- groups CREATE TABLE voting_group ( name TEXT PRIMARY KEY ); INSERT INTO voting_group ( name ) VALUES ( 'direct' ), -- Direct Voters ( 'rep' ); -- Delegated Voter (Check what is the real name for this group we already use in snapshot) COMMENT ON TABLE voting_group IS 'All Groups.' ; COMMENT ON COLUMN voting_group . name IS 'The ID of this voting group.' ; -- Vote Plans CREATE TABLE voteplan ( row_id SERIAL PRIMARY KEY , objective_id INTEGER NOT NULL , id VARCHAR NOT NULL , category TEXT NOT NULL , encryption_key VARCHAR , group_id TEXT , token_id TEXT , FOREIGN KEY ( objective_id ) REFERENCES objective ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( category ) REFERENCES voteplan_category ( name ) ON DELETE CASCADE , FOREIGN KEY ( group_id ) REFERENCES voting_group ( name ) ON DELETE CASCADE ); COMMENT ON TABLE voteplan IS 'All Vote plans.' ; COMMENT ON COLUMN voteplan . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN voteplan . id IS 'The ID of the Vote plan in the voting ledger/bulletin board. A Binary value encoded as hex.' ; COMMENT ON COLUMN voteplan . category IS 'The kind of vote which can be cast on this vote plan.' ; COMMENT ON COLUMN voteplan . encryption_key IS 'The public encryption key used. ONLY if required by the voteplan category.' ; COMMENT ON COLUMN voteplan . group_id IS 'The identifier of voting power token used withing this plan.' ; -- Table to link Proposals to Vote plans in a many-many relationship. -- This Many-Many relationship arises because: -- in the vote ledger/bulletin board, -- one proposal may be within multiple different vote plans, -- and each voteplan can contain multiple proposals. CREATE TABLE proposal_voteplan ( row_id SERIAL PRIMARY KEY , proposal_id INTEGER , voteplan_id INTEGER , bb_proposal_index BIGINT , FOREIGN KEY ( proposal_id ) REFERENCES proposal ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( voteplan_id ) REFERENCES voteplan ( row_id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX proposal_voteplan_idx ON proposal_voteplan ( proposal_id , voteplan_id , bb_proposal_index ); COMMENT ON TABLE proposal_voteplan IS 'Table to link Proposals to Vote plans in a Many to Many relationship.' ; COMMENT ON COLUMN proposal_voteplan . row_id IS 'Synthetic ID of this Voteplan/Proposal M-M relationship.' ; COMMENT ON COLUMN proposal_voteplan . proposal_id IS 'The link to the Proposal primary key that links to this voteplan.' ; COMMENT ON COLUMN proposal_voteplan . voteplan_id IS 'The link to the Voteplan primary key that links to this proposal.' ; COMMENT ON COLUMN proposal_voteplan . bb_proposal_index IS 'The Index with the voteplan used by the voting ledger/bulletin board that references this proposal.' ; registration \u00b6 Schema Diagram Schema Definition -- Catalyst Voices Database - Role Registration Data -- sqlfluff:dialect:postgres -- Configuration Tables -- ------------------------------------------------------------------------------------------------- -- Slot Index Table CREATE TABLE cardano_slot_index ( slot_no BIGINT NOT NULL , network TEXT NOT NULL , epoch_no BIGINT NOT NULL , block_time TIMESTAMP WITH TIME ZONE NOT NULL , block_hash BYTEA NOT NULL CHECK ( LENGTH ( block_hash ) = 32 ), PRIMARY KEY ( slot_no , network ) ); CREATE INDEX cardano_slot_index_time_idx ON cardano_slot_index ( block_time , network ); COMMENT ON INDEX cardano_slot_index_time_idx IS 'Index to allow us to efficiently lookup a slot by time for a particular network.' ; CREATE INDEX cardano_slot_index_epoch_idx ON cardano_slot_index ( epoch_no , network ); COMMENT ON INDEX cardano_slot_index_epoch_idx IS 'Index to allow us to efficiently lookup a slot by epoch for a particular network.' ; COMMENT ON TABLE cardano_slot_index IS 'This is an index of cardano blockchain slots. It allows us to quickly find data about every block in the cardano network. This data is created when each block is first seen.' ; COMMENT ON COLUMN cardano_slot_index . slot_no IS 'The slot number of the block. This is the first half of the Primary key.' ; COMMENT ON COLUMN cardano_slot_index . network IS 'The Cardano network for this slot. This is the second half of the primary key, as each network could use th same slot numbers.' ; COMMENT ON COLUMN cardano_slot_index . epoch_no IS 'The epoch number the slot appeared in.' ; COMMENT ON COLUMN cardano_slot_index . block_time IS 'The time of the slot/block.' ; COMMENT ON COLUMN cardano_slot_index . block_hash IS 'The hash of the block.' ; -- ------------------------------------------------------------------------------------------------- -- Transaction Index Table CREATE TABLE cardano_txn_index ( id BYTEA NOT NULL PRIMARY KEY CHECK ( LENGTH ( id ) = 32 ), slot_no BIGINT NULL , network TEXT NOT NULL , FOREIGN KEY ( slot_no , network ) REFERENCES cardano_slot_index ( slot_no , network ) ); CREATE INDEX cardano_txn_index_idx ON cardano_txn_index ( id , network ); COMMENT ON INDEX cardano_txn_index_idx IS 'Index to allow us to efficiently get the slot a particular transaction is in.' ; COMMENT ON TABLE cardano_txn_index IS 'This is an index of all transactions in the cardano network. It allows us to quickly find a transaction by its id, and its slot number.' ; COMMENT ON COLUMN cardano_txn_index . id IS 'The ID of the transaction. This is a 32 Byte Hash.' ; COMMENT ON COLUMN cardano_txn_index . network IS 'The Cardano network for this transaction. This is the second half of the primary key, as each network could use the same transactions.' ; COMMENT ON COLUMN cardano_txn_index . slot_no IS 'The slot number the transaction appeared in. If this is NULL, then the Transaction is no longer in a known slot, due to a rollback. Such transactions should be considered invalid until the appear in a new slot. We only need to index transactions we care about and not every single transaction in the cardano network.' ; -- ------------------------------------------------------------------------------------------------- -- cardano update state table. -- Keeps a record of each update to the Role Registration state data. -- Used internally to track the updates to the database. CREATE TABLE cardano_update_state ( id BIGSERIAL PRIMARY KEY , started TIMESTAMP WITH TIME ZONE NOT NULL , ended TIMESTAMP WITH TIME ZONE NOT NULL , updater_id TEXT NOT NULL , slot_no BIGINT NOT NULL , network TEXT NOT NULL , block_hash BYTEA NOT NULL CHECK ( LENGTH ( block_hash ) = 32 ), update BOOLEAN , rollback BOOLEAN , stats JSONB , FOREIGN KEY ( slot_no , network ) REFERENCES cardano_slot_index ( slot_no , network ) ); CREATE INDEX cardano_update_state_idx ON cardano_update_state ( id , network ); COMMENT ON INDEX cardano_update_state_idx IS 'Index to allow us to efficiently get find an update state record by its id. This index can be used to find the latest state record for a particular network.' ; CREATE INDEX cardano_update_state_time_idx ON cardano_update_state ( started , network ); COMMENT ON INDEX cardano_update_state_time_idx IS 'Index to allow us to efficiently get find an update state record by time for a particular network.' ; COMMENT ON TABLE cardano_update_state IS 'A record of the updates to the Cardano Registration data state. Every time the state is updated, a new record is created. On update, an updating node, must check if the slot it is updating already exists. If it does, it checks if the indexed block is the same (same hash). If it is, it sets `update` to false, and just saves its update state with no further action. This allows us to run multiple followers and update the database simultaneously. IF the hash is different, then we need to handle that, logic not yet defined... This table also serves as a central lock source for updates to the registration state which must be atomic. Should be accessed with a pattern like: ```sql BEGIN; LOCK TABLE cardano_update_state IN ACCESS EXCLUSIVE MODE; -- Read state, update any other tables as needed INSERT INTO cardano_update_state SET ...; -- Set latest state COMMIT; '; COMMENT ON COLUMN cardano_update_state.id IS 'Sequential ID of successive updates to the registration state data.'; COMMENT ON COLUMN cardano_update_state.started IS 'The time the update started for this network.'; COMMENT ON COLUMN cardano_update_state.ended IS 'The time the update was complete for this network.'; COMMENT ON COLUMN cardano_update_state.updater_id IS 'The ID of the node which performed the update. This helps us track which instance of the backend did which updates.'; COMMENT ON COLUMN cardano_update_state.slot_no IS 'The slot_no this update was run for.'; COMMENT ON COLUMN cardano_update_state.network IS 'The Cardano network that was updated. As networks are independent and updates are event driven, only one network will be updated at a time.'; COMMENT ON COLUMN cardano_update_state.update IS 'True when this update updated any other tables. False when a duplicate update was detected.'; COMMENT ON COLUMN cardano_update_state.rollback IS 'True when this update is as a result of a rollback on-chain. False when its a normal consecutive update.'; COMMENT ON COLUMN cardano_update_state.stats IS 'A JSON stats record containing extra data about this update. Must conform to Schema: catalyst_schema://0f917b13-afac-40d2-8263-b17ca8219914/registration/update_stats .'; -- UTXO Table -- Unspent + Staked TX Outputs -- Populated from the transactions in each block CREATE TABLE cardano_utxo ( tx_id BYTEA NOT NULL REFERENCES cardano_txn_index (id), index INTEGER NOT NULL CHECK (index >= 0), value BIGINT NOT NULL, asset JSONB NULL, stake_credential BYTEA NULL, spent_tx_id BYTEA NULL REFERENCES cardano_txn_index (id), PRIMARY KEY (tx_id, index) ); COMMENT ON TABLE cardano_utxo IS 'This table holds all UTXOs for any transaction which is tied to a stake address. This data allows us to calculate staked ADA at any particular instant in time.'; COMMENT ON COLUMN cardano_utxo.tx_id IS 'The ID of the transaction containing the UTXO. 32 Byte Hash.'; COMMENT ON COLUMN cardano_utxo.index IS 'The index of the UTXO within the transaction.'; COMMENT ON COLUMN cardano_utxo.value IS 'The value of the UTXO, in Lovelace if the asset is not defined.'; COMMENT ON COLUMN cardano_utxo.asset IS 'The asset of the UTXO, if any. NULL = Ada/Lovelace.'; COMMENT ON COLUMN cardano_utxo.stake_credential IS 'The stake credential of the address which owns the UTXO.'; COMMENT ON COLUMN cardano_utxo.spent_tx_id IS 'The ID of the transaction which Spent the TX Output. If we consider this UTXO Spent will depend on when it was spent.'; -- Rewards Table -- Earned Rewards CREATE TABLE cardano_reward ( slot_no BIGINT NOT NULL, -- First slot of the epoch following the epoch the rewards were earned for. network TEXT NOT NULL, stake_credential BYTEA NOT NULL, earned_epoch_no BIGINT NOT NULL, value BIGINT NOT NULL, PRIMARY KEY (slot_no, network, stake_credential), FOREIGN KEY (slot_no, network) REFERENCES cardano_slot_index (slot_no, network) ); CREATE INDEX cardano_rewards_stake_credential_idx ON cardano_reward ( stake_credential, slot_no ); COMMENT ON INDEX cardano_rewards_stake_credential_idx IS 'Index to allow us to efficiently lookup a set of Rewards by stake credential relative to a slot_no.'; COMMENT ON TABLE cardano_reward IS 'This table holds all earned rewards per stake address. It is possible for a Stake Address to earn multiple rewards in the same epoch. This record contains the Total of all rewards earned in the relevant epoch. This data structure is preliminary pending the exact method of determining the rewards earned by any particular stake address.'; COMMENT ON COLUMN cardano_reward.slot_no IS 'The slot number the rewards were earned for. This is the first slot of the epoch following the epoch the rewards were earned for.'; COMMENT ON COLUMN cardano_reward.network IS 'The Cardano network for this rewards.'; COMMENT ON COLUMN cardano_reward.stake_credential IS 'The stake credential of the address who earned the rewards.'; COMMENT ON COLUMN cardano_reward.earned_epoch_no IS 'The epoch number the rewards were earned for.'; COMMENT ON COLUMN cardano_reward.value IS 'The value of the reward earned, in Lovelace'; -- Withdrawn Rewards Table -- Withdrawn Rewards CREATE TABLE cardano_withdrawn_reward ( slot_no BIGINT NOT NULL, network TEXT NOT NULL, stake_credential BYTEA NOT NULL, value BIGINT NOT NULL, PRIMARY KEY (slot_no, network), FOREIGN KEY (slot_no, network) REFERENCES cardano_slot_index (slot_no, network) ); COMMENT ON TABLE cardano_withdrawn_reward IS 'This table holds all withdrawn rewards data. This makes it possible to accurately calculate the rewards which are still available for a specific Stake Address .'; COMMENT ON COLUMN cardano_withdrawn_reward.slot_no IS 'The slot number the rewards were withdrawn for.'; COMMENT ON COLUMN cardano_withdrawn_reward.network IS 'The Cardano network this withdrawal occurred on.'; COMMENT ON COLUMN cardano_withdrawn_reward.stake_credential IS 'The stake credential of the address who earned the rewards.'; COMMENT ON COLUMN cardano_withdrawn_reward.value IS 'The value of the reward withdrawn, in Lovelace'; -- Cardano Voter Registrations Table -- Voter Registrations CREATE TABLE cardano_voter_registration ( tx_id BYTEA PRIMARY KEY NOT NULL REFERENCES cardano_txn_index (id), stake_credential BYTEA NULL, public_voting_key BYTEA NULL, payment_address BYTEA NULL, nonce BIGINT NULL, metadata_cip36 BYTEA NULL, -- We can purge metadata for valid registrations that are old to save storage space. valid BOOLEAN NOT NULL DEFAULT false, stats JSONB -- record rolled back in stats if the registration was lost during a rollback, its also invalid at this point. -- Other stats we can record are is it a CIP-36 or CIP-15 registration format. -- does it have a valid reward address but not a payment address, so we can't pay to it. -- other flags about why the registration was invalid. -- other flags about statistical data (if any). ); CREATE INDEX cardano_voter_registration_stake_credential_idx ON cardano_voter_registration ( stake_credential, nonce, valid ); COMMENT ON INDEX cardano_voter_registration_stake_credential_idx IS 'Optimize lookups for \"stake_credential\" or \"stake_credential\"+\"nonce\" or \"stake_credential\"+\"nonce\"+\"valid\".'; CREATE INDEX cardano_voter_registration_voting_key_idx ON cardano_voter_registration ( public_voting_key, nonce, valid ); COMMENT ON INDEX cardano_voter_registration_voting_key_idx IS 'Optimize lookups for \"public_voting_key\" or \"public_voting_key\"+\"nonce\" or \"public_voting_key\"+\"nonce\"+\"valid\".'; COMMENT ON TABLE cardano_voter_registration IS 'All CIP15/36 Voter Registrations that are on-chain. This tables stores all found registrations, even if they are invalid, or have been rolled back.'; COMMENT ON COLUMN cardano_voter_registration.tx_id IS 'The Transaction hash of the Transaction holding the registration metadata. This is used as the Primary Key because it is immutable in the face of potential rollbacks.'; COMMENT ON COLUMN cardano_voter_registration.stake_credential IS 'The stake credential of the address who registered.'; COMMENT ON COLUMN cardano_voter_registration.public_voting_key IS 'The public voting key of the address who registered.'; COMMENT ON COLUMN cardano_voter_registration.payment_address IS 'The payment address where any voter rewards associated with this registration will be sent.'; COMMENT ON COLUMN cardano_voter_registration.nonce IS 'The nonce of the registration. Registrations for the same stake address with higher nonces have priority.'; COMMENT ON COLUMN cardano_voter_registration.metadata_cip36 IS 'The raw metadata for the CIP-15/36 registration. This data is optional, a parameter in config specifies how long raw registration metadata should be kept. Outside this time, the Registration record will be kept, but the raw metadata will be purged.'; COMMENT ON COLUMN cardano_voter_registration.valid IS 'True if the registration is valid, false if the registration is invalid. stats can be checked to determine WHY the registration is considered invalid.'; COMMENT ON COLUMN cardano_voter_registration.stats IS 'Statistical information about the registration. Must conform to Schema: catalyst_schema://fd5a2f8f-afb4-4cf7-ae6b-b7a370c85c82/registration/cip36_stats .'; ``` vote_tables \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database - Vote Storage -- vote storage (replicates on-chain data for easy querying) CREATE TABLE ballot ( row_id SERIAL8 PRIMARY KEY , objective INTEGER NOT NULL , proposal INTEGER NULL , voter BYTEA NOT NULL , fragment_id TEXT NOT NULL , cast_at TIMESTAMP NOT NULL , choice SMALLINT NULL , raw_fragment BYTEA NOT NULL , FOREIGN KEY ( objective ) REFERENCES objective ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( proposal ) REFERENCES proposal ( row_id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX ballot_proposal_idx ON ballot ( proposal , fragment_id ); CREATE UNIQUE INDEX ballot_objective_idx ON ballot ( objective , fragment_id ); COMMENT ON TABLE ballot IS 'All Ballots cast on an event.' ; COMMENT ON COLUMN ballot . fragment_id IS 'Unique ID of this Ballot' ; COMMENT ON COLUMN ballot . voter IS 'Voters Voting Key who cast the ballot' ; COMMENT ON COLUMN ballot . objective IS 'Reference to the Objective the ballot was for.' ; COMMENT ON COLUMN ballot . proposal IS 'Reference to the Proposal the ballot was for. May be NULL if this ballot covers ALL proposals in the challenge.' ; COMMENT ON COLUMN ballot . cast_at IS 'When this ballot was recorded as properly cast' ; COMMENT ON COLUMN ballot . choice IS 'If a public vote, the choice on the ballot, otherwise NULL.' ; COMMENT ON COLUMN ballot . raw_fragment IS 'The raw ballot record.' ; catalyst_automation \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database -- Voting Nodes Table - Defines nodes in the network -- This table is looked up by hostname and event CREATE TABLE voting_node ( hostname TEXT NOT NULL , event UUID NOT NULL , pubkey TEXT NOT NULL , seckey TEXT NOT NULL , netkey TEXT NOT NULL , PRIMARY KEY ( hostname , event ), FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE voting_node IS 'This table holds information for all nodes in the event. It is used by nodes to self-bootstrap the blockchain.' ; COMMENT ON COLUMN voting_node . hostname IS 'Unique hostname for the voting node.' ; COMMENT ON COLUMN voting_node . event IS 'Unique event this node was configured for.' ; COMMENT ON COLUMN voting_node . seckey IS 'Encrypted secret key from Ed25519 pair for the node. Used as the node secret.' ; COMMENT ON COLUMN voting_node . pubkey IS 'Public key from Ed25519 pair for the node. Used as consensus_leader_id when the node is a leader.' ; COMMENT ON COLUMN voting_node . netkey IS 'Encrypted Ed25519 secret key for the node. Used as the node p2p topology key.' ; -- Tally Committee Table - Stores data about the tally committee per voting event -- This table is looked up by event CREATE TABLE tally_committee ( row_id SERIAL PRIMARY KEY , event UUID NOT NULL UNIQUE , committee_pk TEXT NOT NULL , committee_id TEXT NOT NULL , member_crs TEXT , election_key TEXT , FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE tally_committee IS 'Table for storing data about the tally committee per voting event.' ; COMMENT ON COLUMN tally_committee . row_id IS 'Unique ID for this committee member for this event.' ; COMMENT ON COLUMN tally_committee . event IS 'The event this committee member is for.' ; COMMENT ON COLUMN tally_committee . committee_pk IS 'Encrypted private key for the committee wallet. This key can be used to get the committee public address.' ; COMMENT ON COLUMN tally_committee . committee_id IS 'The hex-encoded public key for the committee wallet.' ; COMMENT ON COLUMN tally_committee . member_crs IS 'Encrypted Common Reference String shared in the creation of every set of committee member keys.' ; COMMENT ON COLUMN tally_committee . election_key IS 'Public key generated with all committee member public keys, and is used to encrypt votes. NULL if the event.committee_size is 0.' ; -- Committee Member Table - Stores data about the tally committee members -- This table is looked up by committee CREATE TABLE committee_member ( row_id SERIAL PRIMARY KEY , committee INTEGER NOT NULL , member_index INTEGER NOT NULL , threshold INTEGER NOT NULL , comm_pk TEXT NOT NULL , comm_sk TEXT NOT NULL , member_pk TEXT NOT NULL , member_sk TEXT NOT NULL , FOREIGN KEY ( committee ) REFERENCES tally_committee ( row_id ) ); COMMENT ON TABLE committee_member IS 'Table for storing data about the tally committee members.' ; COMMENT ON COLUMN committee_member . row_id IS 'Unique ID for this committee member for this event.' ; COMMENT ON COLUMN committee_member . member_index IS 'the zero-based index of the member, ranging from 0 <= index < committee_size.' ; COMMENT ON COLUMN committee_member . committee IS 'The committee this member belongs to.' ; COMMENT ON COLUMN committee_member . comm_pk IS 'Committee member communication public key.' ; COMMENT ON COLUMN committee_member . comm_sk IS 'Encrypted committee member communication secret key.' ; COMMENT ON COLUMN committee_member . member_pk IS 'Committee member public key' ; COMMENT ON COLUMN committee_member . member_sk IS 'Encrypted committee member secret key' ; moderation_stage \u00b6 Schema Diagram Schema Definition -- Catalyst Event Database -- ModerationAllocation - Defines the relationship between users and proposals_reviews -- to describe the allocation of moderations that needs to be done. CREATE TABLE moderation_allocation ( row_id SERIAL PRIMARY KEY , review_id INTEGER NOT NULL , user_id INTEGER NOT NULL , FOREIGN KEY ( review_id ) REFERENCES proposal_review ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( user_id ) REFERENCES config ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE moderation_allocation IS 'The relationship between users and proposals_reviews.' ; COMMENT ON COLUMN moderation_allocation . row_id IS 'Synthetic ID of this relationship.' ; COMMENT ON COLUMN moderation_allocation . review_id IS 'The review the relationship is related to.' ; COMMENT ON COLUMN moderation_allocation . user_id IS 'The user the relationship is related to.' ; -- Moderation - Defines the moderation submitted by users for each proposal_review. CREATE TABLE moderation ( row_id SERIAL PRIMARY KEY , review_id INTEGER NOT NULL , user_id INTEGER NOT NULL , classification INTEGER NOT NULL , rationale VARCHAR , UNIQUE ( review_id , user_id ), FOREIGN KEY ( review_id ) REFERENCES proposal_review ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( user_id ) REFERENCES config ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE moderation IS 'An individual moderation for a proposal review.' ; COMMENT ON COLUMN moderation . row_id IS 'Synthetic ID of this moderation.' ; COMMENT ON COLUMN moderation . review_id IS 'The review the moderation is related to.' ; COMMENT ON COLUMN moderation . user_id IS 'The user the moderation is submitted from.' ; COMMENT ON COLUMN moderation . classification IS 'The value used to describe the moderation (e.g. 0: excluded, 1: included).' ; COMMENT ON COLUMN moderation . rationale IS 'The rationale for the given classification.' ;","title":"Migrations (Version 9)"},{"location":"architecture/08_concepts/event_db/migrations/#migrations-version-9","text":"Full Schema Diagram","title":"Migrations (Version 9)"},{"location":"architecture/08_concepts/event_db/migrations/#config_tables","text":"Schema Diagram Schema Definition -- Catalyst Voices Database - Configuration Data -- sqlfluff:dialect:postgres -- Configuration Tables -- ------------------------------------------------------------------------------------------------- -- Version of the schema (Used by Refinery to manage migrations.). CREATE TABLE IF NOT EXISTS refinery_schema_history ( version INTEGER NOT NULL PRIMARY KEY , name VARCHAR ( 255 ), applied_on VARCHAR ( 255 ), checksum VARCHAR ( 255 ) ); COMMENT ON TABLE refinery_schema_history IS 'History of Schema Updates to the Database. Managed by the `refinery` cli tool.' ; -- ------------------------------------------------------------------------------------------------- -- Json Schema Library -- Json Schemas used to validate the contents of JSONB fields in this database. -- * `id,type,name` matches the $id URI in the schema itself. -- * The URI format is customized and is of the form `catalyst_schema://<id>/<type>/<name>` -- * Schemas will be added here automatically during migration of the database, or interactively -- * during operation of the system. -- * They should match the schema they hold, and on read they should be validated. -- * The code should refuse to serve or use any schema that does not match. -- * -- * id - This is unique and can uniquely identify any schema. -- * type - This allows us to find all schemas of a known type. -- * name - This is the unique name of the schema. `id` always equals the same `type/name`. -- * for convention `type` and `name` string should only used a-z,0-9 and underscore. -- * Dashes, symbols or upper case should not be used. -- Catalyst Event Database CREATE TABLE json_schema_type ( id UUID PRIMARY KEY , type TEXT NOT NULL , name TEXT NOT NULL , schema JSONB NOT NULL ); CREATE INDEX json_schema_type_idx ON json_schema_type ( \"type\" ); CREATE UNIQUE INDEX json_schema_type_name_idx ON json_schema_type ( \"type\" , \"name\" ); COMMENT ON TABLE json_schema_type IS 'Library of defined json schemas used to validate JSONB field contents.' ; COMMENT ON COLUMN json_schema_type . id IS 'Synthetic Unique ID for each json_schema_type (UUIDv4). Must match the `UUID` component of the $id URI inside the schema.' ; COMMENT ON COLUMN json_schema_type . type IS 'The type of the json schema type. eg. \"event\" Must match the `type` component of the $id URI inside the schema.' ; COMMENT ON COLUMN json_schema_type . name IS 'The name of the json schema type. eg. \"catalyst_v1\" Must match the `name` component of the $id URI inside the schema.' ; -- Known Schema Types are inserted when the Table which uses that type is created. -- Or can be added by migrations as the database evolves. -- They could also be added outside of the schema setup by inserting directly into the database. -- ------------------------------------------------------------------------------------------------- -- Config Table -- This table is looked up with three keys, `id`, `id2` and `id3` CREATE TABLE config ( row_id SERIAL PRIMARY KEY , id VARCHAR NOT NULL , id2 VARCHAR NOT NULL , id3 VARCHAR NOT NULL , value JSONB NULL , value_schema UUID , FOREIGN KEY ( value_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE ); -- cardano+follower+preview must be unique, they are a combined key. CREATE UNIQUE INDEX config_idx ON config ( id , id2 , id3 ); COMMENT ON TABLE config IS 'General JSON Configuration and Data Values. Defined Data Formats: Currently None ' ; COMMENT ON COLUMN config . row_id IS 'Synthetic unique key. Always lookup using `cardano.follower.preview`' ; COMMENT ON COLUMN config . id IS 'The name/id of the general config value/variable' ; COMMENT ON COLUMN config . id2 IS '2nd ID of the general config value. Must be defined, use \"\" if not required.' ; COMMENT ON COLUMN config . id3 IS '3rd ID of the general config value. Must be defined, use \"\" if not required.' ; COMMENT ON COLUMN config . value IS 'The JSON value of the system variable `cardano.follower.preview`' ; COMMENT ON COLUMN config . value_schema IS 'The Schema the Config Value conforms to. The `value` field must conform to this schema.' ; COMMENT ON INDEX config_idx IS 'We use three keys combined uniquely rather than forcing string concatenation at the app level to allow for querying groups of data.' ; INSERT INTO config ( id , id2 , id3 , value ) VALUES -- ( -- 'cardano', -- 'follower', -- 'mainnet', -- '{ -- \"relay\": \"relays-new.cardano-mainnet.iohk.io:3001\", -- \"mithril_snapshot\": { -- \"path\": \"/tmp/mainnet/immutable\", -- \"timing_pattern\": 25 -- } -- }' -- ), -- ( -- 'cardano', -- 'follower', -- 'preview', -- '{ -- \"relay\": \"preview-node.play.dev.cardano.org:3001\", -- \"mithril_snapshot\": { -- \"path\": \"/tmp/preview/immutable\", -- \"timing_pattern\": 25 -- } -- }' -- ), ( 'cardano' , 'follower' , 'preprod' , '{ \"relay\": \"preprod-node.play.dev.cardano.org:3001\", \"mithril_snapshot\": { \"path\": \"/tmp/preprod/immutable\", \"timing_pattern\": 25 } }' ); -- ------------------------------------------------------------------------------------------------- -- * Temporary. -- * Insert known json schema manually until automated json schema migration scripting is added. -- * This will be removed in the future. -- Add the Initial Schemas for configuration. --INSERT INTO json_schema_type (id, type, name, schema) --VALUES --( -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- Fix the Schema ID so that it is consistent. -- 'config', -- 'dbsync', -- (SELECT PG_READ_FILE('../json_schemas/config/dbsync.json'))::JSONB), ( -- '62d614c0-97a7-41ec-a976-91294b8f4384', -- Fix the Schema ID so that it is consistent. -- 'config', -- 'registration', -- (SELECT PG_READ_FILE('../json_schemas/config/registration.json'))::JSONB --);","title":"config_tables"},{"location":"architecture/08_concepts/event_db/migrations/#event_tables","text":"Schema Diagram Schema Definition -- Catalyst Voices Database - Event Data -- sqlfluff:dialect:postgres -- `id` mapping. -- * `id` is a UUID, in the past it was an auto incrementing value. -- * it is changed to a UUID so that the data can be generated independently and it is more friendly -- * and simpler for a decentralized or distributed system to safely create UUID than incremental number. -- * However we need compatibility with the rpe-existing incremental numbers. -- * Accordingly we will abuse the UUID format. -- * A V8 UUID will be defined where the low 32 bits are 0s. -- * If the ID is an incremental ID it will be mapped to this special uuid, by or-ing the incremental ID -- * with the mapping UUID, creating a compatible UUID. -- * As ALL autogenerated UUID's will be type 4, there is no possibility of collision. -- -- The Mapping UUID is defined as: `164fba58-31ff-8084-96cb-eb9d00000000` -- Event Tables -- ------------------------------------------------------------------------------------------------- CREATE TABLE event_type ( id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID (), name TEXT NOT NULL , description_schema UUID NOT NULL , data_schema UUID NOT NULL , FOREIGN KEY ( description_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE , FOREIGN KEY ( data_schema ) REFERENCES json_schema_type ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX event_type_name_idx ON event_type ( name ); COMMENT ON TABLE event_type IS 'The types of event which have been defined.' ; COMMENT ON COLUMN event_type . id IS 'Synthetic Unique ID for each event_type (UUIDv4).' ; COMMENT ON COLUMN event_type . name IS 'The name of the event type. eg. \"Catalyst V1\"' ; COMMENT ON COLUMN event_type . description_schema IS 'The JSON Schema which defines the structure of the data in the `description` field in the event record.' ; COMMENT ON COLUMN event_type . data_schema IS 'The JSON Schema which defines the structure of the data in the `extra_data` field in the event record.' ; -- TODO: Would be better to read the schemas, extract the ID, and add or update new schemas. -- Run as required after migrations. -- Add Event Schemas to the known schema types. -- INSERT INTO json_schema_type_names (id) -- VALUES -- ('event_description'), -- Event Description schemas -- ('event_data'); -- Event Data Schemas -- Add the Initial Schemas for events. -- INSERT INTO json_schema_type (id, type, name, schema) -- VALUES --( -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- From the schema file. -- 'event_description', -- 'multiline_text', -- ( -- SELECT jsonb -- FROM PG_READ_FILE('../json_schemas/event/description/multiline_text.json') -- ) --), --( -- '9c5df318-fa9a-4310-80fa-490f46d1cc43', -- From the schema file. -- 'event_data', -- 'catalyst_v1', -- ( -- SELECT jsonb -- FROM PG_READ_FILE('../json_schemas/event/description/catalyst_v1.json') -- ) --); -- Define a Catalyst V1 Event. --INSERT INTO event_type (name, description_schema, data_schema) --VALUES --( -- 'Catalyst V1', -- 'd899cd44-3513-487b-ab46-fdca662a724d', -- '9c5df318-fa9a-4310-80fa-490f46d1cc43' --); -- ------------------------------------------------------------------------------------------------- -- Event Table - Defines each voting or decision event CREATE TABLE event ( id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID (), -- The Organizer/Administrator of this event. -- Update once RBAC is defined, as Organizer is an RBAC Role. organizer TEXT NOT NULL , type UUID REFERENCES event_type ( id ), name TEXT NOT NULL , description JSONB NOT NULL , start_time TIMESTAMP , backing_start TIMESTAMP , backing_end TIMESTAMP , end_time TIMESTAMP , data JSONB NOT NULL ); CREATE UNIQUE INDEX event_name_idx ON event ( name ); COMMENT ON TABLE event IS 'The basic parameters of a related set of funding campaigns.' ; COMMENT ON COLUMN event . id IS 'Synthetic Unique ID for each event (UUIDv4).' ; COMMENT ON COLUMN event . organizer IS 'Name of the Event Organizer. Placeholder, this will need to be replaced with a reference to an authorized organization.' ; COMMENT ON COLUMN event . name IS 'The name of the event. eg. \"Fund9\" or \"SVE1\"' ; COMMENT ON COLUMN event . type IS 'The type of the event.' ; COMMENT ON COLUMN event . description IS 'A detailed description of the purpose of the event. Must conform to the JSON Schema defined by `event_type.description_schema.`' ; COMMENT ON COLUMN event . start_time IS 'The time (UTC) the event starts. NULL = Not yet defined.' ; COMMENT ON COLUMN event . backing_start IS 'The time (UTC) when backers may start backing the events campaign/s. This must >= event.start_time. NULL = Not yet defined.' ; COMMENT ON COLUMN event . backing_end IS 'The time (UTC) when backers may no longer back the events campaign/s. This must > event.backing_start and <= event.end_time. NULL = Not yet defined.' ; COMMENT ON COLUMN event . end_time IS 'The time (UTC) the event ends. Must be >= event.backing_end. NULL = Not yet defined.' ; COMMENT ON COLUMN event . data IS 'Event Type specific data defined about the event. Must conform to the JSON Schema defined by `event_type.extra_data_schema.`' ;","title":"event_tables"},{"location":"architecture/08_concepts/event_db/migrations/#objective_tables","text":"Schema Diagram Schema Definition -- Catalyst Event Database -- Title: Objective Tables -- objective types table - Defines all currently known objectives types. CREATE TABLE objective_category ( name TEXT PRIMARY KEY , description TEXT ); COMMENT ON TABLE objective_category IS 'Defines all known and valid objective categories.' ; COMMENT ON COLUMN objective_category . name IS 'The name of this objective category.' ; COMMENT ON COLUMN objective_category . description IS 'A Description of this kind of objective category.' ; -- Define known objective categories INSERT INTO objective_category ( name , description ) VALUES ( 'catalyst-simple' , 'A Simple choice' ), ( 'catalyst-native' , '??' ), ( 'catalyst-community-choice' , 'Community collective decision' ), ( 'sve-decision' , 'Special voting event decision' ); -- known currencies - Defines all currently known currencies. CREATE TABLE currency ( name TEXT PRIMARY KEY , description TEXT ); COMMENT ON TABLE currency IS 'Defines all known and valid currencies.' ; COMMENT ON COLUMN currency . name IS 'The name of this currency type.' ; COMMENT ON COLUMN currency . description IS 'A Description of this kind of currency type.' ; -- Define known currencies INSERT INTO currency ( name , description ) VALUES ( 'USD_ADA' , 'US Dollars, converted to Cardano ADA at time of reward calculation.' ), ( 'ADA' , 'Cardano ADA.' ), ( 'CLAP' , 'CLAP tokens.' ), ( 'COTI' , 'COTI tokens.' ); -- known vote options - Defines all currently known vote options. CREATE TABLE vote_options ( id SERIAL PRIMARY KEY , idea_scale TEXT ARRAY UNIQUE , objective TEXT ARRAY UNIQUE ); COMMENT ON TABLE vote_options IS 'Defines all known vote plan option types.' ; COMMENT ON COLUMN vote_options . id IS 'Unique ID for each possible option set.' ; COMMENT ON COLUMN vote_options . idea_scale IS 'How this vote option is represented in idea scale.' ; COMMENT ON COLUMN vote_options . objective IS 'How the vote options is represented in the objective.' ; -- Define known vote_options INSERT INTO vote_options ( idea_scale , objective ) VALUES ( '{\"blank\", \"yes\", \"no\"}' , '{\"yes\", \"no\"}' ); -- goals CREATE TABLE goal ( id SERIAL PRIMARY KEY , event_id UUID NOT NULL , idx INTEGER NOT NULL , name VARCHAR NOT NULL , FOREIGN KEY ( event_id ) REFERENCES event ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX goal_index ON goal ( event_id , idx ); COMMENT ON TABLE goal IS 'The list of campaign goals for this event.' ; COMMENT ON COLUMN goal . id IS 'Synthetic Unique Key.' ; COMMENT ON COLUMN goal . idx IS 'The index specifying the order/priority of the goals.' ; COMMENT ON COLUMN goal . name IS 'The description of this event goal.' ; COMMENT ON COLUMN goal . event_id IS 'The ID of the event this goal belongs to.' ; COMMENT ON INDEX goal_index IS 'An index to enforce uniqueness of the relative `idx` field per event.' ; -- objective table - Defines all objectives for all known funds. CREATE TABLE objective ( row_id SERIAL PRIMARY KEY , id INTEGER NOT NULL , event UUID NOT NULL , category TEXT NOT NULL , title TEXT NOT NULL , description TEXT NOT NULL , rewards_currency TEXT , rewards_total BIGINT , rewards_total_lovelace BIGINT , proposers_rewards BIGINT , vote_options INTEGER , extra JSONB , FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE , FOREIGN KEY ( category ) REFERENCES objective_category ( name ) ON DELETE CASCADE , FOREIGN KEY ( rewards_currency ) REFERENCES currency ( name ) ON DELETE CASCADE , FOREIGN KEY ( vote_options ) REFERENCES vote_options ( id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX objective_idx ON objective ( id , event ); COMMENT ON TABLE objective IS 'All objectives for all events. A objective is a group category for selection in an event.' ; COMMENT ON COLUMN objective . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN objective . id IS 'Event specific objective ID. Can be non-unique between events (Eg, Ideascale ID for objective).' ; COMMENT ON COLUMN objective . event IS 'The specific Event ID this objective is part of.' ; COMMENT ON COLUMN objective . category IS 'What category of objective is this. See the objective_category table for allowed values.' ; COMMENT ON COLUMN objective . title IS 'The title of the objective.' ; COMMENT ON COLUMN objective . description IS 'Long form description of the objective.' ; COMMENT ON COLUMN objective . rewards_currency IS 'The currency rewards values are represented as.' ; COMMENT ON COLUMN objective . rewards_total IS 'The total reward pool to pay on this objective to winning proposals. In the Objective Currency.' ; COMMENT ON COLUMN objective . rewards_total_lovelace IS 'The total reward pool to pay on this objective to winning proposals. In Lovelace.' ; COMMENT ON COLUMN objective . proposers_rewards IS 'Not sure how this is different from rewards_total???' ; COMMENT ON COLUMN objective . vote_options IS 'The Vote Options applicable to all proposals in this objective.' ; COMMENT ON COLUMN objective . extra IS 'Extra Data for this objective represented as JSON. \"url\".\"objective\" is a URL for more info about the objective. \"highlights\" is ??? ' ;","title":"objective_tables"},{"location":"architecture/08_concepts/event_db/migrations/#proposal_tables","text":"Schema Diagram Schema Definition -- Catalyst Event Database -- Proposals Table CREATE TABLE proposal ( row_id SERIAL PRIMARY KEY , id INTEGER NOT NULL , objective INTEGER NOT NULL , title TEXT NOT NULL , summary TEXT NOT NULL , public_key TEXT NOT NULL , funds BIGINT NOT NULL , url TEXT NOT NULL , files_url TEXT NOT NULL , impact_score BIGINT NOT NULL , extra JSONB , proposer_name TEXT NOT NULL , proposer_contact TEXT NOT NULL , proposer_url TEXT NOT NULL , proposer_relevant_experience TEXT NOT NULL , bb_proposal_id BYTEA , FOREIGN KEY ( objective ) REFERENCES objective ( row_id ) ON DELETE CASCADE --FOREIGN KEY (bb_vote_options) REFERENCES vote_options ( -- objective --) ON DELETE CASCADE ); CREATE UNIQUE INDEX proposal_index ON proposal ( id , objective ); COMMENT ON TABLE proposal IS 'All Proposals for the current fund.' ; COMMENT ON COLUMN proposal . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN proposal . id IS 'Actual Proposal Unique ID' ; COMMENT ON COLUMN proposal . objective IS 'The Objective this proposal falls under.' ; COMMENT ON COLUMN proposal . title IS 'Brief title of the proposal.' ; COMMENT ON COLUMN proposal . summary IS 'A Summary of the proposal to be implemented.' ; COMMENT ON COLUMN proposal . public_key IS 'Proposals Reward Address (CIP-19 Payment Key)' ; COMMENT ON COLUMN proposal . funds IS 'How much funds (in the currency of the fund)' ; COMMENT ON COLUMN proposal . url IS 'A URL with supporting information for the proposal.' ; COMMENT ON COLUMN proposal . files_url IS 'A URL link to relevant files supporting the proposal.' ; COMMENT ON COLUMN proposal . impact_score IS 'The Impact score assigned to this proposal by the Assessors.' ; COMMENT ON COLUMN proposal . proposer_name IS 'The proposers name.' ; COMMENT ON COLUMN proposal . proposer_contact IS 'Contact details for the proposer.' ; COMMENT ON COLUMN proposal . proposer_url IS 'A URL with details of the proposer.' ; COMMENT ON COLUMN proposal . proposer_relevant_experience IS 'A freeform string describing the proposers experience relating to their capability to implement the proposal.' ; COMMENT ON COLUMN proposal . bb_proposal_id IS 'The ID used by the voting ledger (bulletin board) to refer to this proposal.' ; COMMENT ON COLUMN proposal . extra IS 'Extra data about the proposal. The types of extra data are defined by the proposal type and are not enforced. Extra Fields for `native` challenges: NONE. Extra Fields for `simple` challenges: \"problem\" : <text> - Statement of the problem the proposal tries to address. \"solution\" : <text> - The Solution to the challenge. Extra Fields for `community choice` challenge: \"brief\" : <text> - Brief explanation of a proposal. \"importance\" : <text> - The importance of the proposal. \"goal\" : <text> - The goal of the proposal is addressed to meet. \"metrics\" : <text> - The metrics of the proposal or how success will be determined.' ; -- Reviewer's levels table CREATE TABLE reviewer_level ( row_id SERIAL PRIMARY KEY , name TEXT NOT NULL , total_reward_pct NUMERIC ( 6 , 3 ) CONSTRAINT percentage CHECK ( total_reward_pct <= 100 AND total_reward_pct >= 0 ), event_id UUID NOT NULL , FOREIGN KEY ( event_id ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE reviewer_level IS 'All levels of reviewers. This table represents all different types of reviewer`s levels, which is taken into account during rewarding process.' ; COMMENT ON COLUMN reviewer_level . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN reviewer_level . name IS 'Name of the reviewer level' ; COMMENT ON COLUMN reviewer_level . total_reward_pct IS 'Total reviewer`s reward assigned to the specific level, which is defined as a percentage from the total pot of Community Review rewards (See `event.review_rewards` column).' ; COMMENT ON COLUMN reviewer_level . event_id IS 'The specific Event ID this review level is part of.' ; -- community advisor reviews -- I feel like these ratings and notes should be in a general json field to -- suit adaptability without needing schema changes. CREATE TABLE proposal_review ( row_id SERIAL PRIMARY KEY , proposal_id INTEGER NOT NULL , assessor VARCHAR NOT NULL , assessor_level INTEGER , reward_address TEXT , flags JSONB NULL , FOREIGN KEY ( proposal_id ) REFERENCES proposal ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( assessor_level ) REFERENCES reviewer_level ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE proposal_review IS 'All Reviews.' ; COMMENT ON COLUMN proposal_review . row_id IS 'Synthetic Unique Key.' ; COMMENT ON COLUMN proposal_review . proposal_id IS 'The Proposal this review is for.' ; COMMENT ON COLUMN proposal_review . assessor IS 'Assessors Anonymized ID' ; COMMENT ON COLUMN proposal_review . assessor_level IS 'Assessors level ID' ; COMMENT ON COLUMN proposal_review . reward_address IS 'Assessors reward address' ; COMMENT ON COLUMN proposal_review . flags IS 'OPTIONAL: JSON Array which defines the flags raised for this review. Flags can be raised for different reasons and have different metadata. Each entry = ```jsonc { \"flag_type\": \"<flag_type>\", // Enum of the flag type (0: Profanity, 1: Similarity 2: AI generated). \"score\": <score>, // Profanity score, similarity score, or AI generated score. 0-1. \"related_reviews\": [<review_id>] // Array of review IDs that this flag is related to (valid for similarity). } '; CREATE TABLE review_metric ( row_id SERIAL PRIMARY KEY, name VARCHAR NOT NULL, description VARCHAR NULL, min INTEGER NOT NULL, max INTEGER NOT NULL, map JSONB ARRAY NULL ); COMMENT ON TABLE review_metric IS 'Definition of all possible review metrics.'; COMMENT ON COLUMN review_metric.row_id IS 'The synthetic ID of this metric.'; COMMENT ON COLUMN review_metric.name IS 'The short name for this review metric.'; COMMENT ON COLUMN review_metric.description IS 'Long form description of what the review metric means.'; COMMENT ON COLUMN review_metric.min IS 'The minimum value of the metric (inclusive).'; COMMENT ON COLUMN review_metric.max IS 'The maximum value of the metric (inclusive).'; COMMENT ON COLUMN review_metric.map IS 'OPTIONAL: JSON Array which defines extra details for each metric score. There MUST be one entry per possible score in the range. Entries are IN ORDER, from the lowest numeric score to the highest. Each entry = { \"name\" : \"<name>\", // Symbolic Name for the metric score. \"description\" : \"<desc>\", // Description of what the named metric score means. } '; -- Define known review metrics INSERT INTO review_metric (name, description, min, max, map) VALUES ('impact', 'Impact Rating', 0, 5, null), ('feasibility', 'Feasibility Rating', 0, 5, null), ('auditability', 'Auditability Rating', 0, 5, null), ('value', 'Value Proposition Rating', 0, 5, null), ('vpa_ranking', 'VPA Ranking of the review', 0, 3, ARRAY[ '{\"name\":\"Excellent\",\"desc\":\"Excellent Review\"}', '{\"name\":\"Good\",\"desc\":\"Could be improved.\"}', '{\"name\":\"FilteredOut\",\"desc\":\"Exclude this review\"}', '{\"name\":\"NA\", \"desc\":\"Not Applicable\"}' ]::JSON []); CREATE TABLE objective_review_metric ( row_id SERIAL PRIMARY KEY, objective INTEGER NOT NULL, metric INTEGER NOT NULL, note BOOLEAN, review_group VARCHAR, UNIQUE (objective, metric, review_group), FOREIGN KEY (objective) REFERENCES objective (row_id) ON DELETE CASCADE, FOREIGN KEY (metric) REFERENCES review_metric (row_id) ON DELETE CASCADE ); COMMENT ON TABLE objective_review_metric IS 'All valid metrics for reviews on an objective.'; COMMENT ON COLUMN objective_review_metric.objective IS 'The objective that can use this review metric.'; COMMENT ON COLUMN objective_review_metric.metric IS 'The review metric that the objective can use.'; COMMENT ON COLUMN objective_review_metric.note IS 'Does the metric require a Note? NULL = Optional. True = MUST include Note. False = MUST NOT include Note.'; COMMENT ON COLUMN objective_review_metric.review_group IS 'The review group that can give this metric. Details TBD.'; CREATE TABLE review_rating ( row_id SERIAL PRIMARY KEY, review_id INTEGER NOT NULL, metric INTEGER NOT NULL, rating INTEGER NOT NULL, note VARCHAR, UNIQUE (review_id, metric), FOREIGN KEY (review_id) REFERENCES proposal_review (row_id) ON DELETE CASCADE, FOREIGN KEY (metric) REFERENCES review_metric (row_id) ON DELETE CASCADE ); COMMENT ON TABLE review_rating IS 'An Individual rating for a metric given on a review.'; COMMENT ON COLUMN review_rating.row_id IS 'Synthetic ID of this individual rating.'; COMMENT ON COLUMN review_rating.review_id IS 'The review the metric is being given for.'; COMMENT ON COLUMN review_rating.metric IS 'Metric the rating is being given for.'; COMMENT ON COLUMN review_rating.rating IS 'The rating being given to the metric.'; COMMENT ON COLUMN review_rating.note IS 'OPTIONAL: Note about the rating given.'; ```","title":"proposal_tables"},{"location":"architecture/08_concepts/event_db/migrations/#vote_plan","text":"Schema Diagram Schema Definition -- Catalyst Event Database -- Vote Plan Categories CREATE TABLE voteplan_category ( name TEXT PRIMARY KEY , public_key BOOL ); INSERT INTO voteplan_category ( name , public_key ) VALUES ( 'public' , false ), -- Fully public votes only ( 'private' , true ), -- Fully private votes only. ( 'cast-private' , true ); -- Private until tally, then decrypted. COMMENT ON TABLE voteplan_category IS 'The category of vote plan currently supported.' ; COMMENT ON COLUMN voteplan_category . name IS 'The UNIQUE name of this voteplan category.' ; COMMENT ON COLUMN voteplan_category . public_key IS 'Does this vote plan category require a public key.' ; -- groups CREATE TABLE voting_group ( name TEXT PRIMARY KEY ); INSERT INTO voting_group ( name ) VALUES ( 'direct' ), -- Direct Voters ( 'rep' ); -- Delegated Voter (Check what is the real name for this group we already use in snapshot) COMMENT ON TABLE voting_group IS 'All Groups.' ; COMMENT ON COLUMN voting_group . name IS 'The ID of this voting group.' ; -- Vote Plans CREATE TABLE voteplan ( row_id SERIAL PRIMARY KEY , objective_id INTEGER NOT NULL , id VARCHAR NOT NULL , category TEXT NOT NULL , encryption_key VARCHAR , group_id TEXT , token_id TEXT , FOREIGN KEY ( objective_id ) REFERENCES objective ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( category ) REFERENCES voteplan_category ( name ) ON DELETE CASCADE , FOREIGN KEY ( group_id ) REFERENCES voting_group ( name ) ON DELETE CASCADE ); COMMENT ON TABLE voteplan IS 'All Vote plans.' ; COMMENT ON COLUMN voteplan . row_id IS 'Synthetic Unique Key' ; COMMENT ON COLUMN voteplan . id IS 'The ID of the Vote plan in the voting ledger/bulletin board. A Binary value encoded as hex.' ; COMMENT ON COLUMN voteplan . category IS 'The kind of vote which can be cast on this vote plan.' ; COMMENT ON COLUMN voteplan . encryption_key IS 'The public encryption key used. ONLY if required by the voteplan category.' ; COMMENT ON COLUMN voteplan . group_id IS 'The identifier of voting power token used withing this plan.' ; -- Table to link Proposals to Vote plans in a many-many relationship. -- This Many-Many relationship arises because: -- in the vote ledger/bulletin board, -- one proposal may be within multiple different vote plans, -- and each voteplan can contain multiple proposals. CREATE TABLE proposal_voteplan ( row_id SERIAL PRIMARY KEY , proposal_id INTEGER , voteplan_id INTEGER , bb_proposal_index BIGINT , FOREIGN KEY ( proposal_id ) REFERENCES proposal ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( voteplan_id ) REFERENCES voteplan ( row_id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX proposal_voteplan_idx ON proposal_voteplan ( proposal_id , voteplan_id , bb_proposal_index ); COMMENT ON TABLE proposal_voteplan IS 'Table to link Proposals to Vote plans in a Many to Many relationship.' ; COMMENT ON COLUMN proposal_voteplan . row_id IS 'Synthetic ID of this Voteplan/Proposal M-M relationship.' ; COMMENT ON COLUMN proposal_voteplan . proposal_id IS 'The link to the Proposal primary key that links to this voteplan.' ; COMMENT ON COLUMN proposal_voteplan . voteplan_id IS 'The link to the Voteplan primary key that links to this proposal.' ; COMMENT ON COLUMN proposal_voteplan . bb_proposal_index IS 'The Index with the voteplan used by the voting ledger/bulletin board that references this proposal.' ;","title":"vote_plan"},{"location":"architecture/08_concepts/event_db/migrations/#registration","text":"Schema Diagram Schema Definition -- Catalyst Voices Database - Role Registration Data -- sqlfluff:dialect:postgres -- Configuration Tables -- ------------------------------------------------------------------------------------------------- -- Slot Index Table CREATE TABLE cardano_slot_index ( slot_no BIGINT NOT NULL , network TEXT NOT NULL , epoch_no BIGINT NOT NULL , block_time TIMESTAMP WITH TIME ZONE NOT NULL , block_hash BYTEA NOT NULL CHECK ( LENGTH ( block_hash ) = 32 ), PRIMARY KEY ( slot_no , network ) ); CREATE INDEX cardano_slot_index_time_idx ON cardano_slot_index ( block_time , network ); COMMENT ON INDEX cardano_slot_index_time_idx IS 'Index to allow us to efficiently lookup a slot by time for a particular network.' ; CREATE INDEX cardano_slot_index_epoch_idx ON cardano_slot_index ( epoch_no , network ); COMMENT ON INDEX cardano_slot_index_epoch_idx IS 'Index to allow us to efficiently lookup a slot by epoch for a particular network.' ; COMMENT ON TABLE cardano_slot_index IS 'This is an index of cardano blockchain slots. It allows us to quickly find data about every block in the cardano network. This data is created when each block is first seen.' ; COMMENT ON COLUMN cardano_slot_index . slot_no IS 'The slot number of the block. This is the first half of the Primary key.' ; COMMENT ON COLUMN cardano_slot_index . network IS 'The Cardano network for this slot. This is the second half of the primary key, as each network could use th same slot numbers.' ; COMMENT ON COLUMN cardano_slot_index . epoch_no IS 'The epoch number the slot appeared in.' ; COMMENT ON COLUMN cardano_slot_index . block_time IS 'The time of the slot/block.' ; COMMENT ON COLUMN cardano_slot_index . block_hash IS 'The hash of the block.' ; -- ------------------------------------------------------------------------------------------------- -- Transaction Index Table CREATE TABLE cardano_txn_index ( id BYTEA NOT NULL PRIMARY KEY CHECK ( LENGTH ( id ) = 32 ), slot_no BIGINT NULL , network TEXT NOT NULL , FOREIGN KEY ( slot_no , network ) REFERENCES cardano_slot_index ( slot_no , network ) ); CREATE INDEX cardano_txn_index_idx ON cardano_txn_index ( id , network ); COMMENT ON INDEX cardano_txn_index_idx IS 'Index to allow us to efficiently get the slot a particular transaction is in.' ; COMMENT ON TABLE cardano_txn_index IS 'This is an index of all transactions in the cardano network. It allows us to quickly find a transaction by its id, and its slot number.' ; COMMENT ON COLUMN cardano_txn_index . id IS 'The ID of the transaction. This is a 32 Byte Hash.' ; COMMENT ON COLUMN cardano_txn_index . network IS 'The Cardano network for this transaction. This is the second half of the primary key, as each network could use the same transactions.' ; COMMENT ON COLUMN cardano_txn_index . slot_no IS 'The slot number the transaction appeared in. If this is NULL, then the Transaction is no longer in a known slot, due to a rollback. Such transactions should be considered invalid until the appear in a new slot. We only need to index transactions we care about and not every single transaction in the cardano network.' ; -- ------------------------------------------------------------------------------------------------- -- cardano update state table. -- Keeps a record of each update to the Role Registration state data. -- Used internally to track the updates to the database. CREATE TABLE cardano_update_state ( id BIGSERIAL PRIMARY KEY , started TIMESTAMP WITH TIME ZONE NOT NULL , ended TIMESTAMP WITH TIME ZONE NOT NULL , updater_id TEXT NOT NULL , slot_no BIGINT NOT NULL , network TEXT NOT NULL , block_hash BYTEA NOT NULL CHECK ( LENGTH ( block_hash ) = 32 ), update BOOLEAN , rollback BOOLEAN , stats JSONB , FOREIGN KEY ( slot_no , network ) REFERENCES cardano_slot_index ( slot_no , network ) ); CREATE INDEX cardano_update_state_idx ON cardano_update_state ( id , network ); COMMENT ON INDEX cardano_update_state_idx IS 'Index to allow us to efficiently get find an update state record by its id. This index can be used to find the latest state record for a particular network.' ; CREATE INDEX cardano_update_state_time_idx ON cardano_update_state ( started , network ); COMMENT ON INDEX cardano_update_state_time_idx IS 'Index to allow us to efficiently get find an update state record by time for a particular network.' ; COMMENT ON TABLE cardano_update_state IS 'A record of the updates to the Cardano Registration data state. Every time the state is updated, a new record is created. On update, an updating node, must check if the slot it is updating already exists. If it does, it checks if the indexed block is the same (same hash). If it is, it sets `update` to false, and just saves its update state with no further action. This allows us to run multiple followers and update the database simultaneously. IF the hash is different, then we need to handle that, logic not yet defined... This table also serves as a central lock source for updates to the registration state which must be atomic. Should be accessed with a pattern like: ```sql BEGIN; LOCK TABLE cardano_update_state IN ACCESS EXCLUSIVE MODE; -- Read state, update any other tables as needed INSERT INTO cardano_update_state SET ...; -- Set latest state COMMIT; '; COMMENT ON COLUMN cardano_update_state.id IS 'Sequential ID of successive updates to the registration state data.'; COMMENT ON COLUMN cardano_update_state.started IS 'The time the update started for this network.'; COMMENT ON COLUMN cardano_update_state.ended IS 'The time the update was complete for this network.'; COMMENT ON COLUMN cardano_update_state.updater_id IS 'The ID of the node which performed the update. This helps us track which instance of the backend did which updates.'; COMMENT ON COLUMN cardano_update_state.slot_no IS 'The slot_no this update was run for.'; COMMENT ON COLUMN cardano_update_state.network IS 'The Cardano network that was updated. As networks are independent and updates are event driven, only one network will be updated at a time.'; COMMENT ON COLUMN cardano_update_state.update IS 'True when this update updated any other tables. False when a duplicate update was detected.'; COMMENT ON COLUMN cardano_update_state.rollback IS 'True when this update is as a result of a rollback on-chain. False when its a normal consecutive update.'; COMMENT ON COLUMN cardano_update_state.stats IS 'A JSON stats record containing extra data about this update. Must conform to Schema: catalyst_schema://0f917b13-afac-40d2-8263-b17ca8219914/registration/update_stats .'; -- UTXO Table -- Unspent + Staked TX Outputs -- Populated from the transactions in each block CREATE TABLE cardano_utxo ( tx_id BYTEA NOT NULL REFERENCES cardano_txn_index (id), index INTEGER NOT NULL CHECK (index >= 0), value BIGINT NOT NULL, asset JSONB NULL, stake_credential BYTEA NULL, spent_tx_id BYTEA NULL REFERENCES cardano_txn_index (id), PRIMARY KEY (tx_id, index) ); COMMENT ON TABLE cardano_utxo IS 'This table holds all UTXOs for any transaction which is tied to a stake address. This data allows us to calculate staked ADA at any particular instant in time.'; COMMENT ON COLUMN cardano_utxo.tx_id IS 'The ID of the transaction containing the UTXO. 32 Byte Hash.'; COMMENT ON COLUMN cardano_utxo.index IS 'The index of the UTXO within the transaction.'; COMMENT ON COLUMN cardano_utxo.value IS 'The value of the UTXO, in Lovelace if the asset is not defined.'; COMMENT ON COLUMN cardano_utxo.asset IS 'The asset of the UTXO, if any. NULL = Ada/Lovelace.'; COMMENT ON COLUMN cardano_utxo.stake_credential IS 'The stake credential of the address which owns the UTXO.'; COMMENT ON COLUMN cardano_utxo.spent_tx_id IS 'The ID of the transaction which Spent the TX Output. If we consider this UTXO Spent will depend on when it was spent.'; -- Rewards Table -- Earned Rewards CREATE TABLE cardano_reward ( slot_no BIGINT NOT NULL, -- First slot of the epoch following the epoch the rewards were earned for. network TEXT NOT NULL, stake_credential BYTEA NOT NULL, earned_epoch_no BIGINT NOT NULL, value BIGINT NOT NULL, PRIMARY KEY (slot_no, network, stake_credential), FOREIGN KEY (slot_no, network) REFERENCES cardano_slot_index (slot_no, network) ); CREATE INDEX cardano_rewards_stake_credential_idx ON cardano_reward ( stake_credential, slot_no ); COMMENT ON INDEX cardano_rewards_stake_credential_idx IS 'Index to allow us to efficiently lookup a set of Rewards by stake credential relative to a slot_no.'; COMMENT ON TABLE cardano_reward IS 'This table holds all earned rewards per stake address. It is possible for a Stake Address to earn multiple rewards in the same epoch. This record contains the Total of all rewards earned in the relevant epoch. This data structure is preliminary pending the exact method of determining the rewards earned by any particular stake address.'; COMMENT ON COLUMN cardano_reward.slot_no IS 'The slot number the rewards were earned for. This is the first slot of the epoch following the epoch the rewards were earned for.'; COMMENT ON COLUMN cardano_reward.network IS 'The Cardano network for this rewards.'; COMMENT ON COLUMN cardano_reward.stake_credential IS 'The stake credential of the address who earned the rewards.'; COMMENT ON COLUMN cardano_reward.earned_epoch_no IS 'The epoch number the rewards were earned for.'; COMMENT ON COLUMN cardano_reward.value IS 'The value of the reward earned, in Lovelace'; -- Withdrawn Rewards Table -- Withdrawn Rewards CREATE TABLE cardano_withdrawn_reward ( slot_no BIGINT NOT NULL, network TEXT NOT NULL, stake_credential BYTEA NOT NULL, value BIGINT NOT NULL, PRIMARY KEY (slot_no, network), FOREIGN KEY (slot_no, network) REFERENCES cardano_slot_index (slot_no, network) ); COMMENT ON TABLE cardano_withdrawn_reward IS 'This table holds all withdrawn rewards data. This makes it possible to accurately calculate the rewards which are still available for a specific Stake Address .'; COMMENT ON COLUMN cardano_withdrawn_reward.slot_no IS 'The slot number the rewards were withdrawn for.'; COMMENT ON COLUMN cardano_withdrawn_reward.network IS 'The Cardano network this withdrawal occurred on.'; COMMENT ON COLUMN cardano_withdrawn_reward.stake_credential IS 'The stake credential of the address who earned the rewards.'; COMMENT ON COLUMN cardano_withdrawn_reward.value IS 'The value of the reward withdrawn, in Lovelace'; -- Cardano Voter Registrations Table -- Voter Registrations CREATE TABLE cardano_voter_registration ( tx_id BYTEA PRIMARY KEY NOT NULL REFERENCES cardano_txn_index (id), stake_credential BYTEA NULL, public_voting_key BYTEA NULL, payment_address BYTEA NULL, nonce BIGINT NULL, metadata_cip36 BYTEA NULL, -- We can purge metadata for valid registrations that are old to save storage space. valid BOOLEAN NOT NULL DEFAULT false, stats JSONB -- record rolled back in stats if the registration was lost during a rollback, its also invalid at this point. -- Other stats we can record are is it a CIP-36 or CIP-15 registration format. -- does it have a valid reward address but not a payment address, so we can't pay to it. -- other flags about why the registration was invalid. -- other flags about statistical data (if any). ); CREATE INDEX cardano_voter_registration_stake_credential_idx ON cardano_voter_registration ( stake_credential, nonce, valid ); COMMENT ON INDEX cardano_voter_registration_stake_credential_idx IS 'Optimize lookups for \"stake_credential\" or \"stake_credential\"+\"nonce\" or \"stake_credential\"+\"nonce\"+\"valid\".'; CREATE INDEX cardano_voter_registration_voting_key_idx ON cardano_voter_registration ( public_voting_key, nonce, valid ); COMMENT ON INDEX cardano_voter_registration_voting_key_idx IS 'Optimize lookups for \"public_voting_key\" or \"public_voting_key\"+\"nonce\" or \"public_voting_key\"+\"nonce\"+\"valid\".'; COMMENT ON TABLE cardano_voter_registration IS 'All CIP15/36 Voter Registrations that are on-chain. This tables stores all found registrations, even if they are invalid, or have been rolled back.'; COMMENT ON COLUMN cardano_voter_registration.tx_id IS 'The Transaction hash of the Transaction holding the registration metadata. This is used as the Primary Key because it is immutable in the face of potential rollbacks.'; COMMENT ON COLUMN cardano_voter_registration.stake_credential IS 'The stake credential of the address who registered.'; COMMENT ON COLUMN cardano_voter_registration.public_voting_key IS 'The public voting key of the address who registered.'; COMMENT ON COLUMN cardano_voter_registration.payment_address IS 'The payment address where any voter rewards associated with this registration will be sent.'; COMMENT ON COLUMN cardano_voter_registration.nonce IS 'The nonce of the registration. Registrations for the same stake address with higher nonces have priority.'; COMMENT ON COLUMN cardano_voter_registration.metadata_cip36 IS 'The raw metadata for the CIP-15/36 registration. This data is optional, a parameter in config specifies how long raw registration metadata should be kept. Outside this time, the Registration record will be kept, but the raw metadata will be purged.'; COMMENT ON COLUMN cardano_voter_registration.valid IS 'True if the registration is valid, false if the registration is invalid. stats can be checked to determine WHY the registration is considered invalid.'; COMMENT ON COLUMN cardano_voter_registration.stats IS 'Statistical information about the registration. Must conform to Schema: catalyst_schema://fd5a2f8f-afb4-4cf7-ae6b-b7a370c85c82/registration/cip36_stats .'; ```","title":"registration"},{"location":"architecture/08_concepts/event_db/migrations/#vote_tables","text":"Schema Diagram Schema Definition -- Catalyst Event Database - Vote Storage -- vote storage (replicates on-chain data for easy querying) CREATE TABLE ballot ( row_id SERIAL8 PRIMARY KEY , objective INTEGER NOT NULL , proposal INTEGER NULL , voter BYTEA NOT NULL , fragment_id TEXT NOT NULL , cast_at TIMESTAMP NOT NULL , choice SMALLINT NULL , raw_fragment BYTEA NOT NULL , FOREIGN KEY ( objective ) REFERENCES objective ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( proposal ) REFERENCES proposal ( row_id ) ON DELETE CASCADE ); CREATE UNIQUE INDEX ballot_proposal_idx ON ballot ( proposal , fragment_id ); CREATE UNIQUE INDEX ballot_objective_idx ON ballot ( objective , fragment_id ); COMMENT ON TABLE ballot IS 'All Ballots cast on an event.' ; COMMENT ON COLUMN ballot . fragment_id IS 'Unique ID of this Ballot' ; COMMENT ON COLUMN ballot . voter IS 'Voters Voting Key who cast the ballot' ; COMMENT ON COLUMN ballot . objective IS 'Reference to the Objective the ballot was for.' ; COMMENT ON COLUMN ballot . proposal IS 'Reference to the Proposal the ballot was for. May be NULL if this ballot covers ALL proposals in the challenge.' ; COMMENT ON COLUMN ballot . cast_at IS 'When this ballot was recorded as properly cast' ; COMMENT ON COLUMN ballot . choice IS 'If a public vote, the choice on the ballot, otherwise NULL.' ; COMMENT ON COLUMN ballot . raw_fragment IS 'The raw ballot record.' ;","title":"vote_tables"},{"location":"architecture/08_concepts/event_db/migrations/#catalyst_automation","text":"Schema Diagram Schema Definition -- Catalyst Event Database -- Voting Nodes Table - Defines nodes in the network -- This table is looked up by hostname and event CREATE TABLE voting_node ( hostname TEXT NOT NULL , event UUID NOT NULL , pubkey TEXT NOT NULL , seckey TEXT NOT NULL , netkey TEXT NOT NULL , PRIMARY KEY ( hostname , event ), FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE voting_node IS 'This table holds information for all nodes in the event. It is used by nodes to self-bootstrap the blockchain.' ; COMMENT ON COLUMN voting_node . hostname IS 'Unique hostname for the voting node.' ; COMMENT ON COLUMN voting_node . event IS 'Unique event this node was configured for.' ; COMMENT ON COLUMN voting_node . seckey IS 'Encrypted secret key from Ed25519 pair for the node. Used as the node secret.' ; COMMENT ON COLUMN voting_node . pubkey IS 'Public key from Ed25519 pair for the node. Used as consensus_leader_id when the node is a leader.' ; COMMENT ON COLUMN voting_node . netkey IS 'Encrypted Ed25519 secret key for the node. Used as the node p2p topology key.' ; -- Tally Committee Table - Stores data about the tally committee per voting event -- This table is looked up by event CREATE TABLE tally_committee ( row_id SERIAL PRIMARY KEY , event UUID NOT NULL UNIQUE , committee_pk TEXT NOT NULL , committee_id TEXT NOT NULL , member_crs TEXT , election_key TEXT , FOREIGN KEY ( event ) REFERENCES event ( id ) ON DELETE CASCADE ); COMMENT ON TABLE tally_committee IS 'Table for storing data about the tally committee per voting event.' ; COMMENT ON COLUMN tally_committee . row_id IS 'Unique ID for this committee member for this event.' ; COMMENT ON COLUMN tally_committee . event IS 'The event this committee member is for.' ; COMMENT ON COLUMN tally_committee . committee_pk IS 'Encrypted private key for the committee wallet. This key can be used to get the committee public address.' ; COMMENT ON COLUMN tally_committee . committee_id IS 'The hex-encoded public key for the committee wallet.' ; COMMENT ON COLUMN tally_committee . member_crs IS 'Encrypted Common Reference String shared in the creation of every set of committee member keys.' ; COMMENT ON COLUMN tally_committee . election_key IS 'Public key generated with all committee member public keys, and is used to encrypt votes. NULL if the event.committee_size is 0.' ; -- Committee Member Table - Stores data about the tally committee members -- This table is looked up by committee CREATE TABLE committee_member ( row_id SERIAL PRIMARY KEY , committee INTEGER NOT NULL , member_index INTEGER NOT NULL , threshold INTEGER NOT NULL , comm_pk TEXT NOT NULL , comm_sk TEXT NOT NULL , member_pk TEXT NOT NULL , member_sk TEXT NOT NULL , FOREIGN KEY ( committee ) REFERENCES tally_committee ( row_id ) ); COMMENT ON TABLE committee_member IS 'Table for storing data about the tally committee members.' ; COMMENT ON COLUMN committee_member . row_id IS 'Unique ID for this committee member for this event.' ; COMMENT ON COLUMN committee_member . member_index IS 'the zero-based index of the member, ranging from 0 <= index < committee_size.' ; COMMENT ON COLUMN committee_member . committee IS 'The committee this member belongs to.' ; COMMENT ON COLUMN committee_member . comm_pk IS 'Committee member communication public key.' ; COMMENT ON COLUMN committee_member . comm_sk IS 'Encrypted committee member communication secret key.' ; COMMENT ON COLUMN committee_member . member_pk IS 'Committee member public key' ; COMMENT ON COLUMN committee_member . member_sk IS 'Encrypted committee member secret key' ;","title":"catalyst_automation"},{"location":"architecture/08_concepts/event_db/migrations/#moderation_stage","text":"Schema Diagram Schema Definition -- Catalyst Event Database -- ModerationAllocation - Defines the relationship between users and proposals_reviews -- to describe the allocation of moderations that needs to be done. CREATE TABLE moderation_allocation ( row_id SERIAL PRIMARY KEY , review_id INTEGER NOT NULL , user_id INTEGER NOT NULL , FOREIGN KEY ( review_id ) REFERENCES proposal_review ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( user_id ) REFERENCES config ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE moderation_allocation IS 'The relationship between users and proposals_reviews.' ; COMMENT ON COLUMN moderation_allocation . row_id IS 'Synthetic ID of this relationship.' ; COMMENT ON COLUMN moderation_allocation . review_id IS 'The review the relationship is related to.' ; COMMENT ON COLUMN moderation_allocation . user_id IS 'The user the relationship is related to.' ; -- Moderation - Defines the moderation submitted by users for each proposal_review. CREATE TABLE moderation ( row_id SERIAL PRIMARY KEY , review_id INTEGER NOT NULL , user_id INTEGER NOT NULL , classification INTEGER NOT NULL , rationale VARCHAR , UNIQUE ( review_id , user_id ), FOREIGN KEY ( review_id ) REFERENCES proposal_review ( row_id ) ON DELETE CASCADE , FOREIGN KEY ( user_id ) REFERENCES config ( row_id ) ON DELETE CASCADE ); COMMENT ON TABLE moderation IS 'An individual moderation for a proposal review.' ; COMMENT ON COLUMN moderation . row_id IS 'Synthetic ID of this moderation.' ; COMMENT ON COLUMN moderation . review_id IS 'The review the moderation is related to.' ; COMMENT ON COLUMN moderation . user_id IS 'The user the moderation is submitted from.' ; COMMENT ON COLUMN moderation . classification IS 'The value used to describe the moderation (e.g. 0: excluded, 1: included).' ; COMMENT ON COLUMN moderation . rationale IS 'The rationale for the given classification.' ;","title":"moderation_stage"},{"location":"architecture/08_concepts/gateway/mechanics/","text":"Mechanics \u00b6 stateDiagram-v2 state if_state <<choice>> Node -->if_state if_state --> node : config exists if_state --> Node: config does not exist note right of node Indexing blockchain data provided by follower end note note left of node checkConfig = thread A end note note right of node checkDB = thread B end note note right of Node Orchestration is coordinated via the config end note state Node { init --> init: try until config exists } state Follower { [*] } state node { checkConfig-->Database: release Database-->checkConfig: wait checkDB-->Database: release Database-->checkDB: wait State checkConfig{ Tick --> Updated Tick --> NoChange: Updated --> Restart: stop all followers cleanly Restart --> Tick: Restart with new config NoChange--> Tick } State checkDB{ tick --> UpdateThreshold UpdateThreshold --> tick: data is fresh UpdateThreshold--> Follower: data is stale updateDB --> tick updateDB-->Follower Follower -->updateDB } state Database{ Unlocked --> Locked Locked--> Unlocked } }","title":"Mechanics"},{"location":"architecture/08_concepts/gateway/mechanics/#mechanics","text":"stateDiagram-v2 state if_state <<choice>> Node -->if_state if_state --> node : config exists if_state --> Node: config does not exist note right of node Indexing blockchain data provided by follower end note note left of node checkConfig = thread A end note note right of node checkDB = thread B end note note right of Node Orchestration is coordinated via the config end note state Node { init --> init: try until config exists } state Follower { [*] } state node { checkConfig-->Database: release Database-->checkConfig: wait checkDB-->Database: release Database-->checkDB: wait State checkConfig{ Tick --> Updated Tick --> NoChange: Updated --> Restart: stop all followers cleanly Restart --> Tick: Restart with new config NoChange--> Tick } State checkDB{ tick --> UpdateThreshold UpdateThreshold --> tick: data is fresh UpdateThreshold--> Follower: data is stale updateDB --> tick updateDB-->Follower Follower -->updateDB } state Database{ Unlocked --> Locked Locked--> Unlocked } }","title":"Mechanics"},{"location":"architecture/08_concepts/immutable_ledger/ledger/","text":"Immutable Ledger Design \u00b6 Title: Immutable Ledger Design Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-08-19 Abstract \u00b6 This document describes a specification of the immutable ledger for various purposes of project \"Catalyst\". Motivation \u00b6 Project \"Catalyst\" requires a solution for storing people votes and any other data, in a transparent, verifiable, scalable and immutable way. Specification \u00b6 Ledger structure \u00b6 Ledger will be represented as a collection of distinct, unconnected chains, processed and run in parallel. The only common thing for all these chains will be a \"tree\" identifier, so these chains will serve and form an overall ledger state. Obviously, given approach leads to data duplication, as each chain, will not know anything about others. And it also requires that the overall ledger state, could be deterministically defined at any point of time, considering potential transaction overlapping or duplication. To achieve an immutability of data inside each chain Each particular chain, will be a common sequence of blocks. To achieve an immutability of data inside each chain, cryptographic hashing is applied. So each block from the chain reference to the hash of previous one. It is a widely used technic to prevent a modification of some data from previous blocks, without affecting structure of the current one. The described approach allows to easily scale and increase throughput of the network on demand at any time, just by starting to process new chains. Temporary chains \u00b6 It's a common thing for blockchains to have a starting block (genesis), but it's unusual to have a final block for a chain. After which no any block could be produced. And that's a main distinguish for this Immutable Ledger design, it has a final block. So any chain will be bounded by some period of time. Which is well suited where it comes to process some temporary event e.g. voting. Block structure \u00b6 Block CDDL definition: block.cddl block = [ block_header , block_data : ~ encoded-cbor , ; deterministically encoded CBOR validator_signature , ] block_header = [ chain_id : ULID , height : int , timestamp : ~ #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time prev_block_id : hash_bytes , ; hash of the previous block ? ledger_type : UUID , ? purpose_id : ULID / UUID , ? validator , ~ metadata , ] UUID = #6.37 ( bytes ) ; UUID type ULID = #6.32780 ( bytes ) ; ULID type hash_bytes = ( #6.32781 ( bytes ) \\ ; Blake3 hash #6.32782 ( bytes ) \\ ; Blake2b hash #6.32783 ( bytes ) ; Blake2s hash ) kid = hash_bytes ; hash of the x509/c509 certificate validator = ( kid / [ 2 * kid ]) metadata = [ * Any ] validator_signature = ( bytes / [ 2 * bytes ]) Header: chain_id - unique identifier of the chain. height - block's height. Also is used to identify the block type: genesis , regular , final (in more details described in validation section ). timestamp - block's timestamp. prev_block_id - previous block hash. ledger_type - unique identifier of the ledger type. In general, this is the way to strictly bound and specify block_data of the ledger for the specific ledger_type . But such rules will be a part of the specific ledger type definition, and not specified by this document. purpose_id - unique identifier of the purpose. As it was stated before, each Ledger instance will have a strict time boundaries, so each of them will run for different purposes. This is the way to distinguish them. validator - identifier or identifiers of the entity who was produced and processed a block. metadata - fully optional field, to add some arbitrary metadata to the block. Block: block_header - block header described above, block_data - an array of some CBOR encoded data validator_signature - a signature or signatures of the validator's. Block validation rules \u00b6 chain_id MUST be the same as for the previous block (except for genesis). height MUST be incremented by 1 from the previous block height value (except for genesis and final block). Genesis block MUST have 0 value. Final block MUST hash be incremented by 1 from the previous block height and changed the sign to negative. E.g. previous block height is 9 and the Final block height is -10 . Final block is the last one for the specific chain and any other block could not be referenced to the Final one. timestamp MUST be greater or equals than the timestamp of the previous block (except for genesis). prev_block_id MUST be a hash of the previous block bytes (except for genesis). ledger_type MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. purpose_id MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. validator MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. prev_block_id 's CBOR tag value and bstr size MUST be the same as for the previous block (except for genesis). Means that the hash function type and hash size itself must be the same. prev_block_id and validator_signature MUST use the same hash function, defined with the hash_bytes . prev_block_id for the Genesis block MUST be a hash of the genesis_to_prev_hash bytes. block_data MUST be a deterministically encoded CBOR. Genesis to previous block hash CDDL definition: genesis_to_prev_hash.cddl genesis_to_prev_hash = [ chain_id : ULID , timestamp : ~ #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time ledger_type : UUID , purpose_id : ULID / UUID , validator , ] UUID = #6.37 ( bytes ) ; UUID type ULID = #6.32780 ( bytes ) ; ULID type validator = ( kid / [ 2 * kid ]) kid = hash_bytes ; hash of the x509/c509 certificate hash_bytes = ( #6.32781 ( bytes ) \\ ; Blake3 hash #6.32782 ( bytes ) \\ ; Blake2b hash #6.32783 ( bytes ) ; Blake2s hash ) Signature rules \u00b6 validator_signature MUST be a signature of the hashed block_header bytes and the block_data bytes (with the order the same as defined for block ). Signed by the validator's keys defined in the corresponding certificates referenced by the validator . Signature algorithm is defined by the certificate. The format and size of this field MUST be totally the same as validator field: if validator is only one id => validator_signature contains only 1 signature; if validator is array => validator_signature contains an array with the same length; order of signatures from the validator_signature 's array corresponds to the validators order of validator 's array. Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"Immutable Ledger Design"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#immutable-ledger-design","text":"Title: Immutable Ledger Design Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-08-19","title":"Immutable Ledger Design"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#abstract","text":"This document describes a specification of the immutable ledger for various purposes of project \"Catalyst\".","title":"Abstract"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#motivation","text":"Project \"Catalyst\" requires a solution for storing people votes and any other data, in a transparent, verifiable, scalable and immutable way.","title":"Motivation"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#specification","text":"","title":"Specification"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#ledger-structure","text":"Ledger will be represented as a collection of distinct, unconnected chains, processed and run in parallel. The only common thing for all these chains will be a \"tree\" identifier, so these chains will serve and form an overall ledger state. Obviously, given approach leads to data duplication, as each chain, will not know anything about others. And it also requires that the overall ledger state, could be deterministically defined at any point of time, considering potential transaction overlapping or duplication. To achieve an immutability of data inside each chain Each particular chain, will be a common sequence of blocks. To achieve an immutability of data inside each chain, cryptographic hashing is applied. So each block from the chain reference to the hash of previous one. It is a widely used technic to prevent a modification of some data from previous blocks, without affecting structure of the current one. The described approach allows to easily scale and increase throughput of the network on demand at any time, just by starting to process new chains.","title":"Ledger structure"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#temporary-chains","text":"It's a common thing for blockchains to have a starting block (genesis), but it's unusual to have a final block for a chain. After which no any block could be produced. And that's a main distinguish for this Immutable Ledger design, it has a final block. So any chain will be bounded by some period of time. Which is well suited where it comes to process some temporary event e.g. voting.","title":"Temporary chains"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#block-structure","text":"Block CDDL definition: block.cddl block = [ block_header , block_data : ~ encoded-cbor , ; deterministically encoded CBOR validator_signature , ] block_header = [ chain_id : ULID , height : int , timestamp : ~ #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time prev_block_id : hash_bytes , ; hash of the previous block ? ledger_type : UUID , ? purpose_id : ULID / UUID , ? validator , ~ metadata , ] UUID = #6.37 ( bytes ) ; UUID type ULID = #6.32780 ( bytes ) ; ULID type hash_bytes = ( #6.32781 ( bytes ) \\ ; Blake3 hash #6.32782 ( bytes ) \\ ; Blake2b hash #6.32783 ( bytes ) ; Blake2s hash ) kid = hash_bytes ; hash of the x509/c509 certificate validator = ( kid / [ 2 * kid ]) metadata = [ * Any ] validator_signature = ( bytes / [ 2 * bytes ]) Header: chain_id - unique identifier of the chain. height - block's height. Also is used to identify the block type: genesis , regular , final (in more details described in validation section ). timestamp - block's timestamp. prev_block_id - previous block hash. ledger_type - unique identifier of the ledger type. In general, this is the way to strictly bound and specify block_data of the ledger for the specific ledger_type . But such rules will be a part of the specific ledger type definition, and not specified by this document. purpose_id - unique identifier of the purpose. As it was stated before, each Ledger instance will have a strict time boundaries, so each of them will run for different purposes. This is the way to distinguish them. validator - identifier or identifiers of the entity who was produced and processed a block. metadata - fully optional field, to add some arbitrary metadata to the block. Block: block_header - block header described above, block_data - an array of some CBOR encoded data validator_signature - a signature or signatures of the validator's.","title":"Block structure"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#block-validation-rules","text":"chain_id MUST be the same as for the previous block (except for genesis). height MUST be incremented by 1 from the previous block height value (except for genesis and final block). Genesis block MUST have 0 value. Final block MUST hash be incremented by 1 from the previous block height and changed the sign to negative. E.g. previous block height is 9 and the Final block height is -10 . Final block is the last one for the specific chain and any other block could not be referenced to the Final one. timestamp MUST be greater or equals than the timestamp of the previous block (except for genesis). prev_block_id MUST be a hash of the previous block bytes (except for genesis). ledger_type MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. purpose_id MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. validator MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. prev_block_id 's CBOR tag value and bstr size MUST be the same as for the previous block (except for genesis). Means that the hash function type and hash size itself must be the same. prev_block_id and validator_signature MUST use the same hash function, defined with the hash_bytes . prev_block_id for the Genesis block MUST be a hash of the genesis_to_prev_hash bytes. block_data MUST be a deterministically encoded CBOR. Genesis to previous block hash CDDL definition: genesis_to_prev_hash.cddl genesis_to_prev_hash = [ chain_id : ULID , timestamp : ~ #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time ledger_type : UUID , purpose_id : ULID / UUID , validator , ] UUID = #6.37 ( bytes ) ; UUID type ULID = #6.32780 ( bytes ) ; ULID type validator = ( kid / [ 2 * kid ]) kid = hash_bytes ; hash of the x509/c509 certificate hash_bytes = ( #6.32781 ( bytes ) \\ ; Blake3 hash #6.32782 ( bytes ) \\ ; Blake2b hash #6.32783 ( bytes ) ; Blake2s hash )","title":"Block validation rules"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#signature-rules","text":"validator_signature MUST be a signature of the hashed block_header bytes and the block_data bytes (with the order the same as defined for block ). Signed by the validator's keys defined in the corresponding certificates referenced by the validator . Signature algorithm is defined by the certificate. The format and size of this field MUST be totally the same as validator field: if validator is only one id => validator_signature contains only 1 signature; if validator is array => validator_signature contains an array with the same length; order of signatures from the validator_signature 's array corresponds to the validators order of validator 's array.","title":"Signature rules"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/voting_transaction/crypto/","text":"Cryptography Schema \u00b6 Title: Voting Protocol Cryptography Schema Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-06 Abstract \u00b6 This voting protocol is based on this paper and on this specification , so all formal definitions described in this document you can find there. It provides a fully anonymous, secured, verifiable schema of casting votes and performing tally process for executing \"Catalyst\" fund events. Motivation \u00b6 Specification \u00b6 Preliminaries \u00b6 Through this paper we will use the following notations to refer to some entities of this protocol: Proposal - voting subject on which each voter will be cast their votes. Proposal voting options - a proposal options array, e.g. \\([Yes, No, Abstain]\\) . Voting committee - a special trusted entity, which perform tally process and revealing the results of the tallying. Such committee consists of the 1 person. Voters - actors who actually performing the voting by posting ballots with their voting choices. Election public key \\(pk\\) - committees generated public key, which is shared across all voters and used for vote's encryption and tallying processes. Voter's voting power - an integer value which defines a voting power for a specific voter. This value could be equals to \\(1\\) for every voter, so everyone would be equal in their voting rights. Or it could be defined based on their stake in the blockchain, which is more appropriate for web3 systems. Important to note that current protocol defined to work with the one specific proposal, so all definitions and procedures would be applied for some proposal. Obviously, it could be easily scaled for a set of proposals, performing all this protocol in parallel. The voting committee and voters registration/definition are not subjects of this document. Initial setup \u00b6 Before any voting will start an initial setup procedure should be performed. Define an array of voting options/choices for a proposal, e.g. \\([Yes, No, Abstain]\\) . Voting committee must generate a shared election public key \\(pk\\) and distribute it among voters. A corresponding private key (secret share) \\(sk\\) will be used to perform tally. Define for each voter their own voting power. Basically this step could be done at any point of time, but before the tally. As most of the crypto algorithms are group dependent (more about this you can read in appendix A ), it is needed to specifically define which cryptographically secure group would be used. Vote \u00b6 A voter could cast a vote for some proposal. To do that, obviously, a voting choice should be made and encoded in specific format. For achieving anonymity this voting choice must be homomorphically encrypted, using the specific election public key \\(pk\\) , so afterwards voting committee could perform tally. It is also important for the voter to generate a cryptographically secured proof, that he has generated and encrypted a vote correctly and according to the protocol, and everyone would be able to verify it. So we will preserve anonymity without lacking transparency and correctness. Voting choice \u00b6 For some proposal, voter generates a unit vector \\(\\mathbf{e}_i\\) , the length of such vector must be equal to the amount of the voting options of the proposal. \\(i\\) corresponds to the proposal voting choice and defines that the \\(i\\) -th component of the unit vector equals to \\(1\\) and the rest components are equals to \\(0\\) . And it stands as an identifier of the unit vector and could varies \\(1 \\le i \\le M\\) , \\(M\\) - amount of the voting options. E.g. proposal has voting options \\([Yes, No, Abstain]\\) : \\(\\mathbf{e}_1\\) equals to \\((1,0,0)\\) corresponds to \\(Yes\\) \\(\\mathbf{e}_2\\) equals to \\((0,1,0)\\) corresponds to \\(No\\) \\(\\mathbf{e}_3\\) equals to \\((0,0,1)\\) corresponds to \\(Abstain\\) Lets \\(e_{i,j}\\) denote as an each component value of the unit vector \\(\\mathbf{e}_i\\) . Where \\(i\\) is a unit vector's identifier as it was described before, \\(j\\) index of the unit vector's component, which could varies \\(1 \\le j \\le M\\) , \\(M\\) - amount of the voting options and equals to the length of the unit vector. Using such notation unit vector \\(\\mathbf{e}_i\\) could be defined as \\[\\begin{equation} \\mathbf{e}_i = (e_{i,1}, \\ldots, e_{i,M}) \\end{equation}\\] E.g. for the unit vector \\(\\mathbf{e}_1 = (1,0,0)\\) components would be defined as follows: \\(e_{1, 1}\\) equals to \\(1\\) \\(e_{1, 2}\\) equals to \\(0\\) \\(e_{1, 3}\\) equals to \\(0\\) Vote encrypting \u00b6 After the choice is done, vote must be encrypted using shared shared election public key \\(pk\\) . Lifted ElGamal encryption algorithm is used, noted as \\(ElGamalEnc(message, randomness, public \\; key)\\) . More detailed description of the lifted ElGamal algorithm you can find in the appendix B . \\(ElGamalEnc(message, randomness, public \\; key)\\) algorithm produces a ciphertext \\(c\\) as a result. \\begin{equation} c = ElGamalEnc(message, randomness, public \\; key) \\end{equation} To encode previously generated unit vector \\(\\mathbf{e}_i\\) ( \\(i\\) - voting choice identifier), in more details you can read in this section , for each vector component value \\(e_{i,j}\\) generate a corresponding randomness. Lets denote randomness value as \\(r_j\\) , where \\(j\\) states as the same identifier of the vector component \\(e_{i,j}\\) . Then, for each vector component \\(e_{i,j}\\) with the corresponding randomness, perform encryption algorithm applying shared election public key \\(pk\\) . \\begin{equation} c_j = Enc(e_{i,j}, r_j, pk) \\end{equation} As a result getting a vector \\(\\mathbf{c}\\) of ciphertext values \\(c_f\\) , with the size equals of the size \\(\\mathbf{e}_t\\) unit vector, equals to the amount of the voting options. Lets denote this vector as: \\begin{equation} \\mathbf{c} = (c_1, \\ldots, c_{M}) \\end{equation} where \\(M\\) is the voting options amount. This is a first part of the published vote for a specific proposal. Voter's proof \u00b6 After the voter's choice is generated and encrypted, it is crucial to prove that encoding and encryption are formed correctly (i.e. that the voter indeed encrypt a unit vector). Because by the definition of the encryption algorithm \\(Enc(message, randomness, public \\; key)\\) it is possible to encrypt an any message value, it is not restricted for encryption only \\(0\\) and \\(1\\) values (as it was stated in the previous section , unit vector components only could be \\(0\\) or \\(1\\) ). That's why it is needed to generate such a proof, so everyone could validate a correctness of the encrypted vote data, without revealing a voting choice itself. To achieve that a some sophisticated ZK (Zero Knowledge) algorithm is used, noted as \\(VotingChoiceProof(\\mathbf{c})\\) . It takes an encrypted vote vector \\(\\mathbf{c}\\) and generates a proof value \\(\\pi\\) . \\begin{equation} \\pi = VotingChoiceProof(\\mathbf{c}) \\end{equation} So to validate a \\(VotingChoiceCheck(\\mathbf{c}, \\pi)\\) procedure should be used, which takes an encrypted vote \\(\\mathbf{c}\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = VotingChoiceCheck(\\mathbf{c}, \\pi) \\end{equation} A more detailed description of how \\(VotingChoiceProof\\) , \\(VotingChoiceCheck\\) work you can find in the section 2.4 of this paper . Vote publishing \u00b6 After all these procedures are done, a final step is to publish an encrypted vote \\(\\mathbf{c}\\) and voter's proof \\(\\pi\\) corresponded to this choice. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network. Tally \u00b6 After voters performed voting procedure and encrypted votes are published, tally could be executed by the voting committee. Important to note, voting committee doing tally does not revealing personal voting choices. By the result of tally procedure means an accumulated sum of voting power for each voting option of the proposal, based on published votes. E.g.: proposal with voting options \\([Yes, No, Abstain]\\) two different voters with their voting power: \"Alice\" with voting power \\(10\\) \"Bob\" with voting power \\(30\\) these voter's published their choices on this proposal: \"Alice\" voted \\(Yes\\) \"Bob\" voted \\(No\\) final result would be the following: \\(Yes\\) accumulated \\(10\\) \\(No\\) accumulated \\(30\\) \\(Abstain\\) accumulated \\(0\\) So to replicate the same process but securely, based on the set of encrypted votes \\(\\mathbf{c}\\) , a special \\(Tally\\) , \\(TallyDec\\) and \\(TallyProof\\) algorithms are used. Homomorphic tally \u00b6 To perform homomorphic tally of the encrypted set of votes, \\(Tally\\) algorithm is used which described in appendix C . It takes as an input the following: \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c}_{N}]\\) - an array of all published encrypted vote's. \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. \\(i\\) - voting option index. Where \\(N\\) - votes amount. And produce an encrypted tally result for voting option \\(i\\) . \\begin{equation} er_i = Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) \\end{equation} E.g. a proposal with voting choices \\([Yes, No]\\) , votes \\([\\mathbf{c_1}, \\mathbf{c_2}]\\) , voting powers \\([\\alpha_1, \\alpha_2]\\) and election secret key \\(sk\\) . Encrypted result for option \\(Yes\\) : \\(er_1 = Tally(1, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) . Encrypted result for option \\(No\\) : \\(er_2 = Tally(2, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) Tally decryption \u00b6 To decrypt each calculated tally result from the previous step , \\(TallyDec\\) is used, which is technically a common \\(ElGamalDec\\) algorithm described in appendix B . It takes as an input the following: \\(sk\\) - an election private key held by voting committee. \\(er_i\\) - an encrypted tally result for the specific voting option defined for a proposal. It produces a decrypted tally result for the voting option of a proposal. \\begin{equation} r_i = ElGamalDec(er_i, sk) = TallyDec(er_i, sk) \\end{equation} This decrypted tally result is an exact result of the voting procedure, which represents an outcome of the election process. E.g. a proposal with voting choices \\([Yes, No]\\) , encrypted tally results \\([er_1, er_2]\\) and election secret key \\(sk\\) . Decrypted result for option \\(Yes\\) : \\(r_1 = TallyDec(er_1, sk)\\) . Decrypted result for option \\(No\\) : \\(r_2 = TallyDec(er_2, sk)\\) Tally proof \u00b6 An important step for bringing transparency and exclude misbehaving from the voting committee, a corresponded proof for each decrypted tally result must be generated. It is necessary to verify that encrypted tally was decrypted exactly by using committee secret key, and not any other. So the publicly published decrypted tally result (a final tally result) actually is correct and represents a proper election outcome. To do that, a sophisticated ZK (Zero Knowledge) \\(TallyProof\\) algorithm is used. Which proofs that a provided encrypted tally result value \\(er\\) was decrypted into tally result \\(r\\) using the exact secret key \\(sk\\) , which is corresponded to the already known shared election public key \\(pk\\) . \\begin{equation} \\pi = TallyProof(er, r, sk) \\end{equation} So to validate a \\(TallyCheck(er, r, pk, \\pi)\\) procedure should be used, which takes an encrypted tally result \\(er\\) , decrypted tally result \\(r\\) , election public key \\(pk\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = TallyCheck(er, r, pk, \\pi) \\end{equation} A more detailed description of how \\(TallyProof\\) , \\(TallyCheck\\) work you can find in the section Fig. 10 of this paper . Tally publishing \u00b6 After all these procedures are done, a final step is to publish an encrypted tally results \\(er_i\\) , decrypted tally results \\(r_i\\) and tally proofs \\(\\pi_i\\) corresponded for each voting option of some proposal. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network. A: Group definition \u00b6 Important to note that some crypto algorithms, which are described below, are group \\(\\mathbb{G}\\) dependant. More detailed about groups you can find at section 8.2.1 section on this book . Therefore, the generalized notation of the group operation used - \\(\\circ\\) . And defined as follows: For all \\(a, b \\in \\mathbb{G}\\) , \\(a \\circ b = c\\) , where \\(c \\in \\mathbb{G}\\) . For all \\(a \\in \\mathbb{G}\\) , and \\(n \\in \\mathbb{Z}\\) , \\(a^n = a \\circ a \\ldots \\circ a\\) ( \\(n\\) - times). There is an element noted as \\(1\\) , called neutral element, such that \\(a \\circ 1 = a\\) , for all \\(a \\in \\mathbb{G}\\) . For each element \\(a \\in \\mathbb{G}\\) exists \\(a^{-1} \\in \\mathbb{G}\\) , called the inversed of \\(a\\) , such that \\(a \\circ a^{-1} = a^{-1} \\circ a = 1\\) . B: Lifted ElGamal encryption/decryption \u00b6 Lifted ElGamal encryption schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). It could be multiplicative group of integers modulo \\(n\\) or some elliptic curve over the finite field group. More detailed how group operations are defined, described in appendix A . Encryption \u00b6 Lifted ElGamal encryption algorithm takes as arguments \\(m\\) message ( \\(m \\in \\mathbb{Z}_q^*\\) ), \\(r\\) randomness ( \\(r \\in \\mathbb{Z}_q^*\\) ), \\(pk\\) public key ( \\(pk \\in \\mathbb{G}\\) ): \\begin{equation} ElGamalEnc(m, r, pk) = (c_1, c_2) = c, \\end{equation} \\begin{equation} c_1 = g^r, \\quad c_2 = g^m \\circ pk^r \\end{equation} \\(c\\) - is a resulted ciphertext which consists of two elements \\(c_1, c_2 \\in \\mathbb{G}\\) . Decryption \u00b6 Lifted ElGamal decryption algorithm takes as arguments \\(c\\) ciphertext, \\(sk\\) secret key ( \\(sk \\in \\mathbb{Z}_q^*\\) ): \\begin{equation} ElGamalDec(c, sk) = Dlog(c_2 \\circ c_1^{-sk}) = m \\end{equation} \\(m\\) - an original message which was encrypted on the previous step, \\(Dlog(x)\\) is a discrete logarithm of \\(x\\) . Note that since \\(Dlog\\) is not efficient, the message space should be a small set, say \\(m \\in (0, 1)^{\\xi}\\) , for \\(\\xi \\le 30\\) . C: Homomorphic tally \u00b6 Homomorphic tally schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). More detailed how group operations are defined, described in appendix A . Homomorphic tally algorithm takes as arguments \\(i\\) voting choice index, \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}]\\) an array of encrypted votes vector's, \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. Where \\(N\\) - votes amount. \\begin{equation} Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) = c_{1, i}^{\\alpha_1} \\circ c_{2, i}^{\\alpha_2} \\circ \\ldots \\circ c_{N, i}^{\\alpha_N} = er_i \\end{equation} Where \\(c_{j, i}\\) - an encrypted corresponded \\(i\\) -th vector's component of the encrypted vote \\(\\mathbf{c_j}\\) . As it was stated in this section each encrypted vote is a vector \\(\\mathbf{c_j} = (c_{j, 1}, \\ldots, c_{j, M})\\) , \\(M\\) - number of voting choices. \\(er_i\\) noted as encrypted tally result for the provided \\(i\\) -th voting choice. As it is not an open decrypted value yet, it needs a decryption procedure corresponded for which encryption one was made. Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"Crypto"},{"location":"architecture/08_concepts/voting_transaction/crypto/#cryptography-schema","text":"Title: Voting Protocol Cryptography Schema Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-06","title":"Cryptography Schema"},{"location":"architecture/08_concepts/voting_transaction/crypto/#abstract","text":"This voting protocol is based on this paper and on this specification , so all formal definitions described in this document you can find there. It provides a fully anonymous, secured, verifiable schema of casting votes and performing tally process for executing \"Catalyst\" fund events.","title":"Abstract"},{"location":"architecture/08_concepts/voting_transaction/crypto/#motivation","text":"","title":"Motivation"},{"location":"architecture/08_concepts/voting_transaction/crypto/#specification","text":"","title":"Specification"},{"location":"architecture/08_concepts/voting_transaction/crypto/#preliminaries","text":"Through this paper we will use the following notations to refer to some entities of this protocol: Proposal - voting subject on which each voter will be cast their votes. Proposal voting options - a proposal options array, e.g. \\([Yes, No, Abstain]\\) . Voting committee - a special trusted entity, which perform tally process and revealing the results of the tallying. Such committee consists of the 1 person. Voters - actors who actually performing the voting by posting ballots with their voting choices. Election public key \\(pk\\) - committees generated public key, which is shared across all voters and used for vote's encryption and tallying processes. Voter's voting power - an integer value which defines a voting power for a specific voter. This value could be equals to \\(1\\) for every voter, so everyone would be equal in their voting rights. Or it could be defined based on their stake in the blockchain, which is more appropriate for web3 systems. Important to note that current protocol defined to work with the one specific proposal, so all definitions and procedures would be applied for some proposal. Obviously, it could be easily scaled for a set of proposals, performing all this protocol in parallel. The voting committee and voters registration/definition are not subjects of this document.","title":"Preliminaries"},{"location":"architecture/08_concepts/voting_transaction/crypto/#initial-setup","text":"Before any voting will start an initial setup procedure should be performed. Define an array of voting options/choices for a proposal, e.g. \\([Yes, No, Abstain]\\) . Voting committee must generate a shared election public key \\(pk\\) and distribute it among voters. A corresponding private key (secret share) \\(sk\\) will be used to perform tally. Define for each voter their own voting power. Basically this step could be done at any point of time, but before the tally. As most of the crypto algorithms are group dependent (more about this you can read in appendix A ), it is needed to specifically define which cryptographically secure group would be used.","title":"Initial setup"},{"location":"architecture/08_concepts/voting_transaction/crypto/#vote","text":"A voter could cast a vote for some proposal. To do that, obviously, a voting choice should be made and encoded in specific format. For achieving anonymity this voting choice must be homomorphically encrypted, using the specific election public key \\(pk\\) , so afterwards voting committee could perform tally. It is also important for the voter to generate a cryptographically secured proof, that he has generated and encrypted a vote correctly and according to the protocol, and everyone would be able to verify it. So we will preserve anonymity without lacking transparency and correctness.","title":"Vote"},{"location":"architecture/08_concepts/voting_transaction/crypto/#voting-choice","text":"For some proposal, voter generates a unit vector \\(\\mathbf{e}_i\\) , the length of such vector must be equal to the amount of the voting options of the proposal. \\(i\\) corresponds to the proposal voting choice and defines that the \\(i\\) -th component of the unit vector equals to \\(1\\) and the rest components are equals to \\(0\\) . And it stands as an identifier of the unit vector and could varies \\(1 \\le i \\le M\\) , \\(M\\) - amount of the voting options. E.g. proposal has voting options \\([Yes, No, Abstain]\\) : \\(\\mathbf{e}_1\\) equals to \\((1,0,0)\\) corresponds to \\(Yes\\) \\(\\mathbf{e}_2\\) equals to \\((0,1,0)\\) corresponds to \\(No\\) \\(\\mathbf{e}_3\\) equals to \\((0,0,1)\\) corresponds to \\(Abstain\\) Lets \\(e_{i,j}\\) denote as an each component value of the unit vector \\(\\mathbf{e}_i\\) . Where \\(i\\) is a unit vector's identifier as it was described before, \\(j\\) index of the unit vector's component, which could varies \\(1 \\le j \\le M\\) , \\(M\\) - amount of the voting options and equals to the length of the unit vector. Using such notation unit vector \\(\\mathbf{e}_i\\) could be defined as \\[\\begin{equation} \\mathbf{e}_i = (e_{i,1}, \\ldots, e_{i,M}) \\end{equation}\\] E.g. for the unit vector \\(\\mathbf{e}_1 = (1,0,0)\\) components would be defined as follows: \\(e_{1, 1}\\) equals to \\(1\\) \\(e_{1, 2}\\) equals to \\(0\\) \\(e_{1, 3}\\) equals to \\(0\\)","title":"Voting choice"},{"location":"architecture/08_concepts/voting_transaction/crypto/#vote-encrypting","text":"After the choice is done, vote must be encrypted using shared shared election public key \\(pk\\) . Lifted ElGamal encryption algorithm is used, noted as \\(ElGamalEnc(message, randomness, public \\; key)\\) . More detailed description of the lifted ElGamal algorithm you can find in the appendix B . \\(ElGamalEnc(message, randomness, public \\; key)\\) algorithm produces a ciphertext \\(c\\) as a result. \\begin{equation} c = ElGamalEnc(message, randomness, public \\; key) \\end{equation} To encode previously generated unit vector \\(\\mathbf{e}_i\\) ( \\(i\\) - voting choice identifier), in more details you can read in this section , for each vector component value \\(e_{i,j}\\) generate a corresponding randomness. Lets denote randomness value as \\(r_j\\) , where \\(j\\) states as the same identifier of the vector component \\(e_{i,j}\\) . Then, for each vector component \\(e_{i,j}\\) with the corresponding randomness, perform encryption algorithm applying shared election public key \\(pk\\) . \\begin{equation} c_j = Enc(e_{i,j}, r_j, pk) \\end{equation} As a result getting a vector \\(\\mathbf{c}\\) of ciphertext values \\(c_f\\) , with the size equals of the size \\(\\mathbf{e}_t\\) unit vector, equals to the amount of the voting options. Lets denote this vector as: \\begin{equation} \\mathbf{c} = (c_1, \\ldots, c_{M}) \\end{equation} where \\(M\\) is the voting options amount. This is a first part of the published vote for a specific proposal.","title":"Vote encrypting"},{"location":"architecture/08_concepts/voting_transaction/crypto/#voters-proof","text":"After the voter's choice is generated and encrypted, it is crucial to prove that encoding and encryption are formed correctly (i.e. that the voter indeed encrypt a unit vector). Because by the definition of the encryption algorithm \\(Enc(message, randomness, public \\; key)\\) it is possible to encrypt an any message value, it is not restricted for encryption only \\(0\\) and \\(1\\) values (as it was stated in the previous section , unit vector components only could be \\(0\\) or \\(1\\) ). That's why it is needed to generate such a proof, so everyone could validate a correctness of the encrypted vote data, without revealing a voting choice itself. To achieve that a some sophisticated ZK (Zero Knowledge) algorithm is used, noted as \\(VotingChoiceProof(\\mathbf{c})\\) . It takes an encrypted vote vector \\(\\mathbf{c}\\) and generates a proof value \\(\\pi\\) . \\begin{equation} \\pi = VotingChoiceProof(\\mathbf{c}) \\end{equation} So to validate a \\(VotingChoiceCheck(\\mathbf{c}, \\pi)\\) procedure should be used, which takes an encrypted vote \\(\\mathbf{c}\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = VotingChoiceCheck(\\mathbf{c}, \\pi) \\end{equation} A more detailed description of how \\(VotingChoiceProof\\) , \\(VotingChoiceCheck\\) work you can find in the section 2.4 of this paper .","title":"Voter's proof"},{"location":"architecture/08_concepts/voting_transaction/crypto/#vote-publishing","text":"After all these procedures are done, a final step is to publish an encrypted vote \\(\\mathbf{c}\\) and voter's proof \\(\\pi\\) corresponded to this choice. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network.","title":"Vote publishing"},{"location":"architecture/08_concepts/voting_transaction/crypto/#tally","text":"After voters performed voting procedure and encrypted votes are published, tally could be executed by the voting committee. Important to note, voting committee doing tally does not revealing personal voting choices. By the result of tally procedure means an accumulated sum of voting power for each voting option of the proposal, based on published votes. E.g.: proposal with voting options \\([Yes, No, Abstain]\\) two different voters with their voting power: \"Alice\" with voting power \\(10\\) \"Bob\" with voting power \\(30\\) these voter's published their choices on this proposal: \"Alice\" voted \\(Yes\\) \"Bob\" voted \\(No\\) final result would be the following: \\(Yes\\) accumulated \\(10\\) \\(No\\) accumulated \\(30\\) \\(Abstain\\) accumulated \\(0\\) So to replicate the same process but securely, based on the set of encrypted votes \\(\\mathbf{c}\\) , a special \\(Tally\\) , \\(TallyDec\\) and \\(TallyProof\\) algorithms are used.","title":"Tally"},{"location":"architecture/08_concepts/voting_transaction/crypto/#homomorphic-tally","text":"To perform homomorphic tally of the encrypted set of votes, \\(Tally\\) algorithm is used which described in appendix C . It takes as an input the following: \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c}_{N}]\\) - an array of all published encrypted vote's. \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. \\(i\\) - voting option index. Where \\(N\\) - votes amount. And produce an encrypted tally result for voting option \\(i\\) . \\begin{equation} er_i = Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) \\end{equation} E.g. a proposal with voting choices \\([Yes, No]\\) , votes \\([\\mathbf{c_1}, \\mathbf{c_2}]\\) , voting powers \\([\\alpha_1, \\alpha_2]\\) and election secret key \\(sk\\) . Encrypted result for option \\(Yes\\) : \\(er_1 = Tally(1, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) . Encrypted result for option \\(No\\) : \\(er_2 = Tally(2, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\)","title":"Homomorphic tally"},{"location":"architecture/08_concepts/voting_transaction/crypto/#tally-decryption","text":"To decrypt each calculated tally result from the previous step , \\(TallyDec\\) is used, which is technically a common \\(ElGamalDec\\) algorithm described in appendix B . It takes as an input the following: \\(sk\\) - an election private key held by voting committee. \\(er_i\\) - an encrypted tally result for the specific voting option defined for a proposal. It produces a decrypted tally result for the voting option of a proposal. \\begin{equation} r_i = ElGamalDec(er_i, sk) = TallyDec(er_i, sk) \\end{equation} This decrypted tally result is an exact result of the voting procedure, which represents an outcome of the election process. E.g. a proposal with voting choices \\([Yes, No]\\) , encrypted tally results \\([er_1, er_2]\\) and election secret key \\(sk\\) . Decrypted result for option \\(Yes\\) : \\(r_1 = TallyDec(er_1, sk)\\) . Decrypted result for option \\(No\\) : \\(r_2 = TallyDec(er_2, sk)\\)","title":"Tally decryption"},{"location":"architecture/08_concepts/voting_transaction/crypto/#tally-proof","text":"An important step for bringing transparency and exclude misbehaving from the voting committee, a corresponded proof for each decrypted tally result must be generated. It is necessary to verify that encrypted tally was decrypted exactly by using committee secret key, and not any other. So the publicly published decrypted tally result (a final tally result) actually is correct and represents a proper election outcome. To do that, a sophisticated ZK (Zero Knowledge) \\(TallyProof\\) algorithm is used. Which proofs that a provided encrypted tally result value \\(er\\) was decrypted into tally result \\(r\\) using the exact secret key \\(sk\\) , which is corresponded to the already known shared election public key \\(pk\\) . \\begin{equation} \\pi = TallyProof(er, r, sk) \\end{equation} So to validate a \\(TallyCheck(er, r, pk, \\pi)\\) procedure should be used, which takes an encrypted tally result \\(er\\) , decrypted tally result \\(r\\) , election public key \\(pk\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = TallyCheck(er, r, pk, \\pi) \\end{equation} A more detailed description of how \\(TallyProof\\) , \\(TallyCheck\\) work you can find in the section Fig. 10 of this paper .","title":"Tally proof"},{"location":"architecture/08_concepts/voting_transaction/crypto/#tally-publishing","text":"After all these procedures are done, a final step is to publish an encrypted tally results \\(er_i\\) , decrypted tally results \\(r_i\\) and tally proofs \\(\\pi_i\\) corresponded for each voting option of some proposal. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network.","title":"Tally publishing"},{"location":"architecture/08_concepts/voting_transaction/crypto/#a-group-definition","text":"Important to note that some crypto algorithms, which are described below, are group \\(\\mathbb{G}\\) dependant. More detailed about groups you can find at section 8.2.1 section on this book . Therefore, the generalized notation of the group operation used - \\(\\circ\\) . And defined as follows: For all \\(a, b \\in \\mathbb{G}\\) , \\(a \\circ b = c\\) , where \\(c \\in \\mathbb{G}\\) . For all \\(a \\in \\mathbb{G}\\) , and \\(n \\in \\mathbb{Z}\\) , \\(a^n = a \\circ a \\ldots \\circ a\\) ( \\(n\\) - times). There is an element noted as \\(1\\) , called neutral element, such that \\(a \\circ 1 = a\\) , for all \\(a \\in \\mathbb{G}\\) . For each element \\(a \\in \\mathbb{G}\\) exists \\(a^{-1} \\in \\mathbb{G}\\) , called the inversed of \\(a\\) , such that \\(a \\circ a^{-1} = a^{-1} \\circ a = 1\\) .","title":"A: Group definition"},{"location":"architecture/08_concepts/voting_transaction/crypto/#b-lifted-elgamal-encryptiondecryption","text":"Lifted ElGamal encryption schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). It could be multiplicative group of integers modulo \\(n\\) or some elliptic curve over the finite field group. More detailed how group operations are defined, described in appendix A .","title":"B: Lifted ElGamal encryption/decryption"},{"location":"architecture/08_concepts/voting_transaction/crypto/#encryption","text":"Lifted ElGamal encryption algorithm takes as arguments \\(m\\) message ( \\(m \\in \\mathbb{Z}_q^*\\) ), \\(r\\) randomness ( \\(r \\in \\mathbb{Z}_q^*\\) ), \\(pk\\) public key ( \\(pk \\in \\mathbb{G}\\) ): \\begin{equation} ElGamalEnc(m, r, pk) = (c_1, c_2) = c, \\end{equation} \\begin{equation} c_1 = g^r, \\quad c_2 = g^m \\circ pk^r \\end{equation} \\(c\\) - is a resulted ciphertext which consists of two elements \\(c_1, c_2 \\in \\mathbb{G}\\) .","title":"Encryption"},{"location":"architecture/08_concepts/voting_transaction/crypto/#decryption","text":"Lifted ElGamal decryption algorithm takes as arguments \\(c\\) ciphertext, \\(sk\\) secret key ( \\(sk \\in \\mathbb{Z}_q^*\\) ): \\begin{equation} ElGamalDec(c, sk) = Dlog(c_2 \\circ c_1^{-sk}) = m \\end{equation} \\(m\\) - an original message which was encrypted on the previous step, \\(Dlog(x)\\) is a discrete logarithm of \\(x\\) . Note that since \\(Dlog\\) is not efficient, the message space should be a small set, say \\(m \\in (0, 1)^{\\xi}\\) , for \\(\\xi \\le 30\\) .","title":"Decryption"},{"location":"architecture/08_concepts/voting_transaction/crypto/#c-homomorphic-tally","text":"Homomorphic tally schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). More detailed how group operations are defined, described in appendix A . Homomorphic tally algorithm takes as arguments \\(i\\) voting choice index, \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}]\\) an array of encrypted votes vector's, \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. Where \\(N\\) - votes amount. \\begin{equation} Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) = c_{1, i}^{\\alpha_1} \\circ c_{2, i}^{\\alpha_2} \\circ \\ldots \\circ c_{N, i}^{\\alpha_N} = er_i \\end{equation} Where \\(c_{j, i}\\) - an encrypted corresponded \\(i\\) -th vector's component of the encrypted vote \\(\\mathbf{c_j}\\) . As it was stated in this section each encrypted vote is a vector \\(\\mathbf{c_j} = (c_{j, 1}, \\ldots, c_{j, M})\\) , \\(M\\) - number of voting choices. \\(er_i\\) noted as encrypted tally result for the provided \\(i\\) -th voting choice. As it is not an open decrypted value yet, it needs a decryption procedure corresponded for which encryption one was made.","title":"C: Homomorphic tally"},{"location":"architecture/08_concepts/voting_transaction/crypto/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/voting_transaction/crypto/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/voting_transaction/crypto/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/voting_transaction/crypto/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/voting_transaction/transaction/","text":"Transaction \u00b6 Title: Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-04 Abstract \u00b6 This document describes a specification of the different versions \"Catalyst\" voting transaction structure. From the old one (J\u00f6rmungandr) to the newest. Motivation \u00b6 Project \"Catalyst\" requires a structure to keep people vote's data in the secure way, anonymous and verifiable way. Specification \u00b6 v1 (J\u00f6rmungandr) \u00b6 V1 vote transaction definition: tx_v1.abnf VOTE-TX = SIZE-BYTES-32BIT %x00 %x0b VOTE-PAYLOAD VOTE-PAYLOAD = CAST-CERT IOW CAST-CERT = VOTE-PLAN-ID PROPOSAL-INDEX CAST-PAYLOAD VOTE-PLAN-ID = SIZE-BYTES-32BYTE ; J\u00f6rmungandr specific vote plan identifier, Blake2b hash of the vote plan bytes PROPOSAL-INDEX = U8 ; J\u00f6rmungandr specific proposal identifier CAST-PAYLOAD = %x01 CHOICE ; Public payload / %x02 ENCRYPTED-VOTE PROOF-VOTE ; Private payload CHOICE = U8 ENCRYPTED-VOTE = SIZE-BYTES-8BIT * CIPHERTEXT PROOF-VOTE = SIZE-BYTES-8BIT * ANNOUNCEMENT * CIPHERTEXT * R-RESPONSE SCALAR ; size of the *ANNOUNCEMENT, *CIPHERTEXT, *R-RESPONSE are equal to SIZE-BYTES-8BIT value CIPHERTEXT = E1 E2 ANNOUNCEMENT = I A B R-RESPONSE = 3 * SCALAR I = GROUP-ELEMENT A = GROUP-ELEMENT B = GROUP-ELEMENT E1 = GROUP-ELEMENT E2 = GROUP-ELEMENT ; #################### ; IOW stand for Inputs-Outputs-Witnesses ; #################### IOW = BLOCK-DATE %x01 ; number of inputs and witness %x00 ; number of outputs INPUT ; one input WITNESS ; one witness INPUT = %xff VALUE ED25519-PUBLICKEY WITNESS = %x02 NONCE ED25519-SIGNATURE VALUE = U64 ; could be anything, not processed anymore, recommended set to zero NONCE = U32 ; could be anything, not processed anymore, recommended set to zero BLOCK-DATE = BLOCK-EPOCH BLOCK-SLOT ; expiration date, could be anything, not processed anymore, recommended set to zeros BLOCK-EPOCH = U32 BLOCK-SLOT = U32 ; #################### ; CRYPTO ; #################### ED25519-PUBLICKEY = SIZE-BYTES-32BYTE ED25519-SIGNATURE = SIZE-BYTES-64BYTE ; #################### ; PRIMITIVES ; #################### SIZE-BYTES-8BIT = U8 ; size in elements (8 bits) SIZE-BYTES-16BIT = U16 ; size in bytes (16 bits) SIZE-BYTES-32BIT = U32 ; size in bytes (32 bits) U8 = OCTET ; unsigned integer 8 bit U16 = 2 OCTET ; unsigned integer 16 bit (BE) U32 = 4 OCTET ; unsigned integer 32 bit (BE) U64 = 8 OCTET ; unsigned integer 64 bit (BE) SIZE-BYTES-32BYTE = 32 OCTET ; unsigned integer 256 bit (32 bytes) (BE) SIZE-BYTES-64BYTE = 64 OCTET ; unsigned integer 512 bit (64 bytes) (BE) SIZE-BYTES-65BYTE = 65 OCTET ; unsigned integer 520 bit (65 bytes) (BE) SCALAR = SIZE-BYTES-32BYTE GROUP-ELEMENT = SIZE-BYTES-32BYTE ; ristretto255 group element Example \u00b6 V1 transaction representation in hex: 0000037e000b36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Transaction size (u32): 0000037e 00 J\u00f6rmungandr specific tag (u8): 0b Vote plan id (32 byte hash): 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b Proposal index (u8): 00 Payload type tag (u8): 02 Encrypted vote: 03|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 size (u8): 03 ciphertext (group element (32 byte), group element (32 byte)): f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 Proof: 02|1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557|0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455|d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c|cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e size (u8): 02 announcements (group element (32 byte), group element (32 byte), group element (32 byte)): 1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557 ciphertext (group element (32 byte), group element (32 byte)): 0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455 response randomness (scalar (32 byte), scalar (32 byte), scalar (32 byte)): d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c scalar (32 byte): cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e IOW stand for Inputs-Outputs-Witnesses: 00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d J\u00f6rmungandr specific block date (epoch (u32), slot (u32)) ( could be anything, not processed anymore ): 00000000|00000000 number of inputs and witnesses (u8) ( always 1 ): 01 number of outputs (u8) ( always 0 ): 00 Inputs 1. J\u00f6rmungandr specific tag: ff J\u00f6rmungandr specific value (u64) ( could be anything, not processed anymore ): 0000000000000003 input pointer (32 byte): 6d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 Witnesses 1. J\u00f6rmungandr specific tag (u8): 02 J\u00f6rmungandr specific nonce (u32) ( could be anything, not processed anymore ): 00000000 legacy signature (64 byte): e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Transaction vote generation \u00b6 To generate a cryptographically secured ENCRYPTED-VOTE and PROOF-VOTE parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure a 3 voting choices was choosen and as a backend cryptographic group the ristretto255 is used. Transaction signing (witness generation) \u00b6 Signature generated from the BLAKE2b-256 hashed VOTE-PAYLOAD bytes except of the WITNESS part (the last part from the bytes array): CAST-CERT bytes BLOCK-DATE bytes %x01 %x00 INPUT bytes Based on the on the transaction example, data to sign: 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 BLAKE2b-256 hash of the transaction data to sign equals to f51473df863be3e0383ce5a8da79c7ff51b3d98dadbbefbf9f042e8601901269 Expected witness (includes signature) 0200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"Transaction"},{"location":"architecture/08_concepts/voting_transaction/transaction/#transaction","text":"Title: Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-04","title":"Transaction"},{"location":"architecture/08_concepts/voting_transaction/transaction/#abstract","text":"This document describes a specification of the different versions \"Catalyst\" voting transaction structure. From the old one (J\u00f6rmungandr) to the newest.","title":"Abstract"},{"location":"architecture/08_concepts/voting_transaction/transaction/#motivation","text":"Project \"Catalyst\" requires a structure to keep people vote's data in the secure way, anonymous and verifiable way.","title":"Motivation"},{"location":"architecture/08_concepts/voting_transaction/transaction/#specification","text":"","title":"Specification"},{"location":"architecture/08_concepts/voting_transaction/transaction/#v1-jormungandr","text":"V1 vote transaction definition: tx_v1.abnf VOTE-TX = SIZE-BYTES-32BIT %x00 %x0b VOTE-PAYLOAD VOTE-PAYLOAD = CAST-CERT IOW CAST-CERT = VOTE-PLAN-ID PROPOSAL-INDEX CAST-PAYLOAD VOTE-PLAN-ID = SIZE-BYTES-32BYTE ; J\u00f6rmungandr specific vote plan identifier, Blake2b hash of the vote plan bytes PROPOSAL-INDEX = U8 ; J\u00f6rmungandr specific proposal identifier CAST-PAYLOAD = %x01 CHOICE ; Public payload / %x02 ENCRYPTED-VOTE PROOF-VOTE ; Private payload CHOICE = U8 ENCRYPTED-VOTE = SIZE-BYTES-8BIT * CIPHERTEXT PROOF-VOTE = SIZE-BYTES-8BIT * ANNOUNCEMENT * CIPHERTEXT * R-RESPONSE SCALAR ; size of the *ANNOUNCEMENT, *CIPHERTEXT, *R-RESPONSE are equal to SIZE-BYTES-8BIT value CIPHERTEXT = E1 E2 ANNOUNCEMENT = I A B R-RESPONSE = 3 * SCALAR I = GROUP-ELEMENT A = GROUP-ELEMENT B = GROUP-ELEMENT E1 = GROUP-ELEMENT E2 = GROUP-ELEMENT ; #################### ; IOW stand for Inputs-Outputs-Witnesses ; #################### IOW = BLOCK-DATE %x01 ; number of inputs and witness %x00 ; number of outputs INPUT ; one input WITNESS ; one witness INPUT = %xff VALUE ED25519-PUBLICKEY WITNESS = %x02 NONCE ED25519-SIGNATURE VALUE = U64 ; could be anything, not processed anymore, recommended set to zero NONCE = U32 ; could be anything, not processed anymore, recommended set to zero BLOCK-DATE = BLOCK-EPOCH BLOCK-SLOT ; expiration date, could be anything, not processed anymore, recommended set to zeros BLOCK-EPOCH = U32 BLOCK-SLOT = U32 ; #################### ; CRYPTO ; #################### ED25519-PUBLICKEY = SIZE-BYTES-32BYTE ED25519-SIGNATURE = SIZE-BYTES-64BYTE ; #################### ; PRIMITIVES ; #################### SIZE-BYTES-8BIT = U8 ; size in elements (8 bits) SIZE-BYTES-16BIT = U16 ; size in bytes (16 bits) SIZE-BYTES-32BIT = U32 ; size in bytes (32 bits) U8 = OCTET ; unsigned integer 8 bit U16 = 2 OCTET ; unsigned integer 16 bit (BE) U32 = 4 OCTET ; unsigned integer 32 bit (BE) U64 = 8 OCTET ; unsigned integer 64 bit (BE) SIZE-BYTES-32BYTE = 32 OCTET ; unsigned integer 256 bit (32 bytes) (BE) SIZE-BYTES-64BYTE = 64 OCTET ; unsigned integer 512 bit (64 bytes) (BE) SIZE-BYTES-65BYTE = 65 OCTET ; unsigned integer 520 bit (65 bytes) (BE) SCALAR = SIZE-BYTES-32BYTE GROUP-ELEMENT = SIZE-BYTES-32BYTE ; ristretto255 group element","title":"v1 (J\u00f6rmungandr)"},{"location":"architecture/08_concepts/voting_transaction/transaction/#example","text":"V1 transaction representation in hex: 0000037e000b36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Transaction size (u32): 0000037e 00 J\u00f6rmungandr specific tag (u8): 0b Vote plan id (32 byte hash): 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b Proposal index (u8): 00 Payload type tag (u8): 02 Encrypted vote: 03|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 size (u8): 03 ciphertext (group element (32 byte), group element (32 byte)): f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 Proof: 02|1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557|0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455|d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c|cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e size (u8): 02 announcements (group element (32 byte), group element (32 byte), group element (32 byte)): 1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557 ciphertext (group element (32 byte), group element (32 byte)): 0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455 response randomness (scalar (32 byte), scalar (32 byte), scalar (32 byte)): d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c scalar (32 byte): cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e IOW stand for Inputs-Outputs-Witnesses: 00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d J\u00f6rmungandr specific block date (epoch (u32), slot (u32)) ( could be anything, not processed anymore ): 00000000|00000000 number of inputs and witnesses (u8) ( always 1 ): 01 number of outputs (u8) ( always 0 ): 00 Inputs 1. J\u00f6rmungandr specific tag: ff J\u00f6rmungandr specific value (u64) ( could be anything, not processed anymore ): 0000000000000003 input pointer (32 byte): 6d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 Witnesses 1. J\u00f6rmungandr specific tag (u8): 02 J\u00f6rmungandr specific nonce (u32) ( could be anything, not processed anymore ): 00000000 legacy signature (64 byte): e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d","title":"Example"},{"location":"architecture/08_concepts/voting_transaction/transaction/#transaction-vote-generation","text":"To generate a cryptographically secured ENCRYPTED-VOTE and PROOF-VOTE parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure a 3 voting choices was choosen and as a backend cryptographic group the ristretto255 is used.","title":"Transaction vote generation"},{"location":"architecture/08_concepts/voting_transaction/transaction/#transaction-signing-witness-generation","text":"Signature generated from the BLAKE2b-256 hashed VOTE-PAYLOAD bytes except of the WITNESS part (the last part from the bytes array): CAST-CERT bytes BLOCK-DATE bytes %x01 %x00 INPUT bytes Based on the on the transaction example, data to sign: 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 BLAKE2b-256 hash of the transaction data to sign equals to f51473df863be3e0383ce5a8da79c7ff51b3d98dadbbefbf9f042e8601901269 Expected witness (includes signature) 0200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d","title":"Transaction signing (witness generation)"},{"location":"architecture/08_concepts/voting_transaction/transaction/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/voting_transaction/transaction/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/voting_transaction/transaction/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/voting_transaction/transaction/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/","text":"Context \u00b6 There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration. Assumptions \u00b6 Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation. Decision \u00b6 We will be using the arc42 standard for organizing architecture documentation. Risks \u00b6 That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it. Consequences \u00b6 If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile. More Information \u00b6 arc42 Original Templates Main Documentation Books Examples","title":"0001 Architecture Documentation Standard"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#context","text":"There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration.","title":"Context"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#assumptions","text":"Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#decision","text":"We will be using the arc42 standard for organizing architecture documentation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#risks","text":"That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#consequences","text":"If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#more-information","text":"arc42 Original Templates Main Documentation Books Examples","title":"More Information"},{"location":"architecture/09_architecture_decisions/0002-adr/","text":"Context \u00b6 Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility. Assumptions \u00b6 The team as a whole is responsible for creating and maintaining Architecture Decision Records. Decision \u00b6 We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation. Risks \u00b6 The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required. Consequences \u00b6 ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance. More Information \u00b6 arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"0002 Architecture Decision Records"},{"location":"architecture/09_architecture_decisions/0002-adr/#context","text":"Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility.","title":"Context"},{"location":"architecture/09_architecture_decisions/0002-adr/#assumptions","text":"The team as a whole is responsible for creating and maintaining Architecture Decision Records.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0002-adr/#decision","text":"We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0002-adr/#risks","text":"The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0002-adr/#consequences","text":"ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0002-adr/#more-information","text":"arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"More Information"},{"location":"architecture/09_architecture_decisions/0003-flutter/","text":"Context \u00b6 The need for a versatile and efficient framework to develop applications across multiple platforms (Web, iOS, Android, macOS, Linux, and Windows) led us to consider various options. Flutter emerged as the most promising solution due to its wide-ranging platform support, single codebase feature, and robust widget library. Assumptions \u00b6 Flutter's capabilities extend efficiently to web and desktop platforms, in addition to mobile. The development team is capable of learning and adapting to Flutter and Dart for cross-platform development. The performance and compatibility of Flutter-built applications are adequate across all targeted platforms. Decision \u00b6 We have decided to use Flutter as our primary framework for developing applications on Web, iOS, Android, macOS, Linux, and Windows platforms. This decision leverages Flutter's ability to provide a single codebase for multiple platforms, its robust widget library, and its growing support for desktop and web applications. Risks \u00b6 Potential complications in accessing some native features and hardware-specific functionalities on each platform. The need for additional testing across different platforms to ensure consistency and performance. Flutter's desktop and web support is less mature than its mobile support, which might lead to unforeseen challenges. Consequences \u00b6 Streamlined development process with a unified codebase, reducing development and maintenance costs. Increased ability to rapidly deploy updates and new features across all platforms simultaneously. Dependency on a single technology stack, which may pose challenges if Flutter does not evolve as expected. More Information \u00b6 Flutter Dart Build more with Flutter Flutter apps in production A strong ecosystem, powered by open source Flutter\u2019s roadmap","title":"0003 Flutter for Catalyst Voting Frontend"},{"location":"architecture/09_architecture_decisions/0003-flutter/#context","text":"The need for a versatile and efficient framework to develop applications across multiple platforms (Web, iOS, Android, macOS, Linux, and Windows) led us to consider various options. Flutter emerged as the most promising solution due to its wide-ranging platform support, single codebase feature, and robust widget library.","title":"Context"},{"location":"architecture/09_architecture_decisions/0003-flutter/#assumptions","text":"Flutter's capabilities extend efficiently to web and desktop platforms, in addition to mobile. The development team is capable of learning and adapting to Flutter and Dart for cross-platform development. The performance and compatibility of Flutter-built applications are adequate across all targeted platforms.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0003-flutter/#decision","text":"We have decided to use Flutter as our primary framework for developing applications on Web, iOS, Android, macOS, Linux, and Windows platforms. This decision leverages Flutter's ability to provide a single codebase for multiple platforms, its robust widget library, and its growing support for desktop and web applications.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0003-flutter/#risks","text":"Potential complications in accessing some native features and hardware-specific functionalities on each platform. The need for additional testing across different platforms to ensure consistency and performance. Flutter's desktop and web support is less mature than its mobile support, which might lead to unforeseen challenges.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0003-flutter/#consequences","text":"Streamlined development process with a unified codebase, reducing development and maintenance costs. Increased ability to rapidly deploy updates and new features across all platforms simultaneously. Dependency on a single technology stack, which may pose challenges if Flutter does not evolve as expected.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0003-flutter/#more-information","text":"Flutter Dart Build more with Flutter Flutter apps in production A strong ecosystem, powered by open source Flutter\u2019s roadmap","title":"More Information"},{"location":"architecture/09_architecture_decisions/0004-webp/","text":"Context \u00b6 As we develop our new cross-platform application (supporting Web, iOS, Android, macOS, Windows, and Linux), we face a decision regarding the choice of image format. The selection of an image format is critical for optimizing performance, load times, and the overall user experience across diverse platforms. Assumptions \u00b6 The WebP format will be adequately supported across all targeted platforms. Adoption of WebP will yield significant benefits in terms of performance and user experience. Our development and design teams will adapt to using WebP without significant challenges. Decision \u00b6 We propose to adopt WebP as our standard image format for both web and native applications. This decision is based on several advantages of WebP over JPG and PNG: Superior Compression : WebP provides better compression than JPG and PNG, allowing images to be significantly smaller in size without a noticeable loss in quality. This leads to faster loading times and reduced bandwidth usage, which is particularly beneficial for mobile users. Support for Transparency : Unlike JPG and capable of more efficient transparency handling than PNG, WebP supports transparent backgrounds, which is essential for various design elements. Improved Performance : The smaller file size of WebP directly translates to quicker image loading and rendering, contributing to a smoother user experience. Versatility : WebP is versatile, supporting both lossy and lossless compression, making it suitable for a wide range of image types \u2013 from photographic images to graphical designs. Future-Proofing : As a modern format, WebP is increasingly supported by new browsers and platforms, making it a future-proof choice. Risks \u00b6 Some older browsers or platforms might have limited or no support for WebP, necessitating fallback solutions. The development team may need to overcome a learning curve associated with handling a new image format. Consequences \u00b6 Enhanced application performance across all platforms due to reduced image sizes. Improved loading times, especially critical for mobile users with limited bandwidth. Potential for initial development overhead as tools and processes are adapted for WebP. More Information \u00b6 WebP Comparison with Other Formats Browser Support for WebP","title":"0004 Store/Display images in WebP format."},{"location":"architecture/09_architecture_decisions/0004-webp/#context","text":"As we develop our new cross-platform application (supporting Web, iOS, Android, macOS, Windows, and Linux), we face a decision regarding the choice of image format. The selection of an image format is critical for optimizing performance, load times, and the overall user experience across diverse platforms.","title":"Context"},{"location":"architecture/09_architecture_decisions/0004-webp/#assumptions","text":"The WebP format will be adequately supported across all targeted platforms. Adoption of WebP will yield significant benefits in terms of performance and user experience. Our development and design teams will adapt to using WebP without significant challenges.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0004-webp/#decision","text":"We propose to adopt WebP as our standard image format for both web and native applications. This decision is based on several advantages of WebP over JPG and PNG: Superior Compression : WebP provides better compression than JPG and PNG, allowing images to be significantly smaller in size without a noticeable loss in quality. This leads to faster loading times and reduced bandwidth usage, which is particularly beneficial for mobile users. Support for Transparency : Unlike JPG and capable of more efficient transparency handling than PNG, WebP supports transparent backgrounds, which is essential for various design elements. Improved Performance : The smaller file size of WebP directly translates to quicker image loading and rendering, contributing to a smoother user experience. Versatility : WebP is versatile, supporting both lossy and lossless compression, making it suitable for a wide range of image types \u2013 from photographic images to graphical designs. Future-Proofing : As a modern format, WebP is increasingly supported by new browsers and platforms, making it a future-proof choice.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0004-webp/#risks","text":"Some older browsers or platforms might have limited or no support for WebP, necessitating fallback solutions. The development team may need to overcome a learning curve associated with handling a new image format.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0004-webp/#consequences","text":"Enhanced application performance across all platforms due to reduced image sizes. Improved loading times, especially critical for mobile users with limited bandwidth. Potential for initial development overhead as tools and processes are adapted for WebP.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0004-webp/#more-information","text":"WebP Comparison with Other Formats Browser Support for WebP","title":"More Information"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/","text":"Context \u00b6 Our goal for the Catalyst Voices Frontend App is to establish a structure that ensures scalability, maintainability, and a clear separation of concerns. With the complexity of voting events, it\u2019s crucial to have an architecture that supports extensive functionality and easy adaptability to change. Assumptions \u00b6 Clean Architecture will facilitate a clear separation of concerns across the app. The BLoC pattern, combined with ViewModels, will streamline state management across the app. Developers are or will become comfortable with reactive programming paradigms and Flutter\u2019s Streams. The Flutter community will continue to support and evolve the BLoC pattern. The BLoC pattern will be sufficient to handle the app\u2019s state management needs. Decision \u00b6 We have chosen to use BLoC pattern alongside ViewModels, guided by Clean Architecture principles, for the development of the Catalyst Voices Frontend App. This approach will segregate the app into distinct layers - presentation, domain, and data, with BLoC serving as the intermediary for state management and business logic. The BLoC pattern will manage the app's state reactively, making it easier to handle complex state dependencies and asynchronous operations. The ViewModel layer will further aid in abstracting the presentation logic from BLoCs. flowchart TB subgraph id1 [BLoC pattern in conjunction with ViewModels steered by the principles of Clean Architecture] subgraph al01 [Application Layer] direction LR subgraph al02 [Presentation Layer] direction LR subgraph al03 [Connect Wallet Screen] w1[Widgets] end subgraph al04 [View All Events Screen] w2[Widgets] end subgraph al05 [Settings Screen] w3[Widgets] end end subgraph bl01 [Business Layer] direction LR subgraph bl02 [Connect Wallet Bloc] vm01[State <---> Event <---> ViewModel] end subgraph bl03 [View All Events Bloc] vm02[State <---> Event <---> ViewModel] end subgraph bl04 [Settings Bloc] vm03[State <---> Event <---> ViewModel] end end end subgraph dl01 [Domain Layer] direction RL subgraph dl02 [Connect Wallet Repository] end subgraph dl03 [Events Repository] end subgraph dl04 [User Repository] end end subgraph Data Layer direction RL subgraph dl05 [Connect Wallet API] end subgraph dl06 [Catalyst Events API] end subgraph dl07 [Local Storage] end end end al03 <--> bl02 al04 <--> bl03 al05 <--> bl04 bl02 <--> dl02 bl03 <--> dl03 bl04 <--> dl04 dl02 <--> dl05 dl02 <--> dl07 dl03 <--> dl06 dl03 <--> dl07 dl04 <--> dl07 Maintain Uniformity \u00b6 To the established patterns of the team. Avoid bypassing the structured layers. Ensure each layer maintains a clear relationship hierarchy, preventing direct interactions between non-adjacent layers. For instance, the presentation layer should never directly communicate with the data layer's APIs. Maintain the hierarchy where the data layer is dependent on the domain layer across all feature development. Effective naming conventions are crucial for ease of navigation within a project. While naming is flexible (some may refer to the data layer as infrastructure), consistency in these names is essential for maintaining a clear architectural understanding. Inconsistency can lead to a disorganized and challenging codebase, potentially causing confusion among team members. It's vital to adhere to the established guidelines within the codebase to avoid these issues. \u251c\u2500\u2500 catalyst_voices | \u251c\u2500\u2500 libs \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2514\u2500\u2500 app.dart | | | \u2514\u2500\u2500 utils.dart | | \u2514\u2500\u2500 configs | | | \u2514\u2500\u2500 app_bloc_observer.dart | | | \u2514\u2500\u2500 bootstrap.dart | | | \u2514\u2500\u2500 main_dev.dart | | | \u2514\u2500\u2500 main_prod.dart | | | \u2514\u2500\u2500 main_preprod.dart | | | \u2514\u2500\u2500 main_qa.dart \u2502 \u2502 \u2514\u2500\u2500 connect_wallet \u2502 \u2502 | \u251c\u2500\u2500 connect_wallet_page.dart | | | \u2514\u2500\u2500 wallet_list_item.dart \u2502 \u2502 | \u2514\u2500\u2500 wallets_list.dart | | \u2514\u2500\u2500 events | | | \u2514\u2500\u2500 events_page.dart | | | \u2514\u2500\u2500 events_list_item.dart | | | \u2514\u2500\u2500 other_event_widgets.dart \u2502 \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 | \u251c\u2500\u2500 settings_page.dart | | | \u2514\u2500\u2500 user_widget.dart | | | \u2514\u2500\u2500 app_settings.dart \u2502 \u251c\u2500\u2500 packages \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_assets \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_blocs \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_localization \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_repositories \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_services \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_shared \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_view_models \u251c\u2500\u2500 pubspec.lock \u251c\u2500\u2500 pubspec.yaml Risks \u00b6 Learning curve associated with Clean Architecture and BLoC pattern for developers not familiar with these concepts. Overhead in setting up and managing BLoCs and ViewModels for simpler UI components. Potential for boilerplate code, impacting readability and maintainability. Consequences \u00b6 Enhanced maintainability and testability due to the separation of concerns. Greater flexibility in changing or extending the app\u2019s features. Improved scalability, as new components can be added with minimal impact on existing code. A consistent structure across the app, aiding new developers in understanding the codebase. More Information \u00b6 The Clean Architecture SOLID BLoC Pattern - DartConf 2018 BLoC Pub Documentation Flutter BLoC Examples So What Exactly is a View-Model? ViewModel Overview from Android Developers","title":"0005 Catalyst Voices Frontend App Architecture"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#context","text":"Our goal for the Catalyst Voices Frontend App is to establish a structure that ensures scalability, maintainability, and a clear separation of concerns. With the complexity of voting events, it\u2019s crucial to have an architecture that supports extensive functionality and easy adaptability to change.","title":"Context"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#assumptions","text":"Clean Architecture will facilitate a clear separation of concerns across the app. The BLoC pattern, combined with ViewModels, will streamline state management across the app. Developers are or will become comfortable with reactive programming paradigms and Flutter\u2019s Streams. The Flutter community will continue to support and evolve the BLoC pattern. The BLoC pattern will be sufficient to handle the app\u2019s state management needs.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#decision","text":"We have chosen to use BLoC pattern alongside ViewModels, guided by Clean Architecture principles, for the development of the Catalyst Voices Frontend App. This approach will segregate the app into distinct layers - presentation, domain, and data, with BLoC serving as the intermediary for state management and business logic. The BLoC pattern will manage the app's state reactively, making it easier to handle complex state dependencies and asynchronous operations. The ViewModel layer will further aid in abstracting the presentation logic from BLoCs. flowchart TB subgraph id1 [BLoC pattern in conjunction with ViewModels steered by the principles of Clean Architecture] subgraph al01 [Application Layer] direction LR subgraph al02 [Presentation Layer] direction LR subgraph al03 [Connect Wallet Screen] w1[Widgets] end subgraph al04 [View All Events Screen] w2[Widgets] end subgraph al05 [Settings Screen] w3[Widgets] end end subgraph bl01 [Business Layer] direction LR subgraph bl02 [Connect Wallet Bloc] vm01[State <---> Event <---> ViewModel] end subgraph bl03 [View All Events Bloc] vm02[State <---> Event <---> ViewModel] end subgraph bl04 [Settings Bloc] vm03[State <---> Event <---> ViewModel] end end end subgraph dl01 [Domain Layer] direction RL subgraph dl02 [Connect Wallet Repository] end subgraph dl03 [Events Repository] end subgraph dl04 [User Repository] end end subgraph Data Layer direction RL subgraph dl05 [Connect Wallet API] end subgraph dl06 [Catalyst Events API] end subgraph dl07 [Local Storage] end end end al03 <--> bl02 al04 <--> bl03 al05 <--> bl04 bl02 <--> dl02 bl03 <--> dl03 bl04 <--> dl04 dl02 <--> dl05 dl02 <--> dl07 dl03 <--> dl06 dl03 <--> dl07 dl04 <--> dl07","title":"Decision"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#maintain-uniformity","text":"To the established patterns of the team. Avoid bypassing the structured layers. Ensure each layer maintains a clear relationship hierarchy, preventing direct interactions between non-adjacent layers. For instance, the presentation layer should never directly communicate with the data layer's APIs. Maintain the hierarchy where the data layer is dependent on the domain layer across all feature development. Effective naming conventions are crucial for ease of navigation within a project. While naming is flexible (some may refer to the data layer as infrastructure), consistency in these names is essential for maintaining a clear architectural understanding. Inconsistency can lead to a disorganized and challenging codebase, potentially causing confusion among team members. It's vital to adhere to the established guidelines within the codebase to avoid these issues. \u251c\u2500\u2500 catalyst_voices | \u251c\u2500\u2500 libs \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2514\u2500\u2500 app.dart | | | \u2514\u2500\u2500 utils.dart | | \u2514\u2500\u2500 configs | | | \u2514\u2500\u2500 app_bloc_observer.dart | | | \u2514\u2500\u2500 bootstrap.dart | | | \u2514\u2500\u2500 main_dev.dart | | | \u2514\u2500\u2500 main_prod.dart | | | \u2514\u2500\u2500 main_preprod.dart | | | \u2514\u2500\u2500 main_qa.dart \u2502 \u2502 \u2514\u2500\u2500 connect_wallet \u2502 \u2502 | \u251c\u2500\u2500 connect_wallet_page.dart | | | \u2514\u2500\u2500 wallet_list_item.dart \u2502 \u2502 | \u2514\u2500\u2500 wallets_list.dart | | \u2514\u2500\u2500 events | | | \u2514\u2500\u2500 events_page.dart | | | \u2514\u2500\u2500 events_list_item.dart | | | \u2514\u2500\u2500 other_event_widgets.dart \u2502 \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 | \u251c\u2500\u2500 settings_page.dart | | | \u2514\u2500\u2500 user_widget.dart | | | \u2514\u2500\u2500 app_settings.dart \u2502 \u251c\u2500\u2500 packages \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_assets \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_blocs \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_localization \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_repositories \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_services \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_shared \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_view_models \u251c\u2500\u2500 pubspec.lock \u251c\u2500\u2500 pubspec.yaml","title":"Maintain Uniformity"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#risks","text":"Learning curve associated with Clean Architecture and BLoC pattern for developers not familiar with these concepts. Overhead in setting up and managing BLoCs and ViewModels for simpler UI components. Potential for boilerplate code, impacting readability and maintainability.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#consequences","text":"Enhanced maintainability and testability due to the separation of concerns. Greater flexibility in changing or extending the app\u2019s features. Improved scalability, as new components can be added with minimal impact on existing code. A consistent structure across the app, aiding new developers in understanding the codebase.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#more-information","text":"The Clean Architecture SOLID BLoC Pattern - DartConf 2018 BLoC Pub Documentation Flutter BLoC Examples So What Exactly is a View-Model? ViewModel Overview from Android Developers","title":"More Information"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/","text":"Context \u00b6 Our API currently lacks a pagination mechanism, leading to inefficiencies in data retrieval processes, especially when dealing with large datasets. This absence has resulted in longer load times and a strained user experience, prompting the need for a scalable solution to manage data access and navigation effectively. Assumptions \u00b6 The assumption that cursor-based pagination will be universally supported and understood by all clients consuming our API. Assuming our database and backend infrastructure can efficiently support cursor-based operations without significant refactoring or performance degradation. The expectation that data growth will continue at its current pace or accelerate, necessitating a robust solution. Decision \u00b6 We are proposing to introduce a cursor-based pagination system to our API. This system will rely on ans enabling clients to efficiently fetch data in chunks and understand when more data is available: limit - This establishes a restriction on the quantity of objects to be returned, with a minimum of 1 and a maximum no greater than 100. starting_after - the cursor to start returning results from, ending_before - the cursor to stop returning results at. The JSON response structure will include fields such as data - containing the requested data. Data must always be deterministically sorted, such that id always return in the same order, regardless of the pagination, has_more - indicating whether more data is available, Example JSON response: { \"data\" : [ { \"id\" : \"item1\" , \"attribute\" : \"value\" }, { \"id\" : \"item2\" , \"attribute\" : \"value\" } ], \"has_more\" : true } Example API Calls \u00b6 These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination. Initial Fetch with Limit \u00b6 Request: GET /api/resource?limit=2 This retrieves the first two items of the dataset. Fetching the Next Page \u00b6 Request: GET /api/resource?limit=2&starting_after=eyJpZCI6Iml0ZW0xMDAifQ== Using the next_cursor from the previous response, this fetches the next two items. Fetching the Previous Page \u00b6 Request: GET /api/resource?limit=2&ending_before=eyJpZCI6Iml0ZW0yMDAifQ== Using a prev_cursor value, this would fetch the two items before the current page, assuming prev_cursor is implemented and provided in your system. These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination. Risks \u00b6 Implementing cursor-based pagination might introduce complexity for clients unfamiliar with this approach, potentially affecting adoption or requiring additional documentation and support. Potential risks in the backend implementation, such as incorrect cursor handling, could lead to data inconsistencies, including skipped items or duplicate data. The assumption regarding our backend's ability to support this efficiently might be overly optimistic, leading to unforeseen performance issues. Consequences \u00b6 Pagination will significantly improve data handling efficiency, particularly for large datasets, enhancing the user experience by reducing load times and improving data manageability. This change might increase the initial learning curve for new API consumers, requiring comprehensive documentation and possibly support resources to aid in integration. Backend development practices may need to adapt to account for the new pagination logic, potentially affecting development timelines for new features or adjustments to existing data models. More Information \u00b6 Implementing a system similar to Stripe not only aligns us with industry standards but also ensures that we are adopting proven practices for scalability and efficiency. Stripe API Documentation on Pagination Using Cursors for Pagination (PostgreSQL documentation) Cursor-Based Pagination: A Better Way to Retrieve Data Offset vs Cursor-Based Pagination: Choosing the Best Approach Pagination \u2014 Offset vs Cursor in MySQL Web API Pagination | Offset-based vs Cursor-based","title":"0006 Cursor-based pagination for Catalyst Data Service"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#context","text":"Our API currently lacks a pagination mechanism, leading to inefficiencies in data retrieval processes, especially when dealing with large datasets. This absence has resulted in longer load times and a strained user experience, prompting the need for a scalable solution to manage data access and navigation effectively.","title":"Context"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#assumptions","text":"The assumption that cursor-based pagination will be universally supported and understood by all clients consuming our API. Assuming our database and backend infrastructure can efficiently support cursor-based operations without significant refactoring or performance degradation. The expectation that data growth will continue at its current pace or accelerate, necessitating a robust solution.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#decision","text":"We are proposing to introduce a cursor-based pagination system to our API. This system will rely on ans enabling clients to efficiently fetch data in chunks and understand when more data is available: limit - This establishes a restriction on the quantity of objects to be returned, with a minimum of 1 and a maximum no greater than 100. starting_after - the cursor to start returning results from, ending_before - the cursor to stop returning results at. The JSON response structure will include fields such as data - containing the requested data. Data must always be deterministically sorted, such that id always return in the same order, regardless of the pagination, has_more - indicating whether more data is available, Example JSON response: { \"data\" : [ { \"id\" : \"item1\" , \"attribute\" : \"value\" }, { \"id\" : \"item2\" , \"attribute\" : \"value\" } ], \"has_more\" : true }","title":"Decision"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#example-api-calls","text":"These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination.","title":"Example API Calls"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#initial-fetch-with-limit","text":"Request: GET /api/resource?limit=2 This retrieves the first two items of the dataset.","title":"Initial Fetch with Limit"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#fetching-the-next-page","text":"Request: GET /api/resource?limit=2&starting_after=eyJpZCI6Iml0ZW0xMDAifQ== Using the next_cursor from the previous response, this fetches the next two items.","title":"Fetching the Next Page"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#fetching-the-previous-page","text":"Request: GET /api/resource?limit=2&ending_before=eyJpZCI6Iml0ZW0yMDAifQ== Using a prev_cursor value, this would fetch the two items before the current page, assuming prev_cursor is implemented and provided in your system. These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination.","title":"Fetching the Previous Page"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#risks","text":"Implementing cursor-based pagination might introduce complexity for clients unfamiliar with this approach, potentially affecting adoption or requiring additional documentation and support. Potential risks in the backend implementation, such as incorrect cursor handling, could lead to data inconsistencies, including skipped items or duplicate data. The assumption regarding our backend's ability to support this efficiently might be overly optimistic, leading to unforeseen performance issues.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#consequences","text":"Pagination will significantly improve data handling efficiency, particularly for large datasets, enhancing the user experience by reducing load times and improving data manageability. This change might increase the initial learning curve for new API consumers, requiring comprehensive documentation and possibly support resources to aid in integration. Backend development practices may need to adapt to account for the new pagination logic, potentially affecting development timelines for new features or adjustments to existing data models.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#more-information","text":"Implementing a system similar to Stripe not only aligns us with industry standards but also ensures that we are adopting proven practices for scalability and efficiency. Stripe API Documentation on Pagination Using Cursors for Pagination (PostgreSQL documentation) Cursor-Based Pagination: A Better Way to Retrieve Data Offset vs Cursor-Based Pagination: Choosing the Best Approach Pagination \u2014 Offset vs Cursor in MySQL Web API Pagination | Offset-based vs Cursor-based","title":"More Information"},{"location":"architecture/10_quality/","text":"Quality strategies \u00b6","title":"Quality strategies"},{"location":"architecture/10_quality/#quality-strategies","text":"","title":"Quality strategies"},{"location":"architecture/10_quality/quality_requirements/","text":"Quality Requirements \u00b6 Quality Tree \u00b6 Quality Category Quality Description Scenarios Usable Voting User experience Voting and browsing proposals should be easy and intuitive to do SC1-SC4, SC7-SC9 Usable Proposer User experience Creating and managing proposals should be easy and intuitive to do SC12-SC15 Usable Correctness System functions should provide accurate results SC50-SC53 Usable Accessibility The system should be design so as to be usable by everyone SC63-SC64 Usable Engagement Users should actively participate with the system SC57-SC60 Secure Access control Role-Based Access Control SC24-SC31 Secure Privacy User information are kept private SC66 Secure Auditability Voting results can be audited by external parties SC20-SC23 Secure Compliancy The system is complaint with local laws SC41-SC42 Reliable Fail-safe In case of failures the system does not loose data/votes SC16-SC19, SC65 Reliable Scalability The system should scale well with increasing number of users/votes SC43-SC49 Efficient Response Time The system should give feedback in timely manner SC5, SC6, SC10, SC11 Efficient Code Complexity Code should be easy to understand and well documented SC68 Operable Deployability The system should be easy to deploy and operate SC37-SC40 Operable Testability Tests should be easy to run and give a clear feedback SC61-SC62 Operable Clarity Clarity in technical documentation SC67 Flexible Configurable Efficient change of business rules SC32-SC36 Quality Scenarios \u00b6 Id Scenario SC1 A user who is new to Catalyst can understand how to vote in 5 minutes maximum. SC2 A user should be able to stop voting and restart voting without loosing votes SC3 If a user tries to vote on the same proposal twice he will receive a clear error message SC4 After a user cast a vote he will receive a clear feedback on the status of his vote SC5 Proposals are fully loaded and able to be navigated by user in less than 10 seconds SC6 Search/sort/ filter results returned in less than 5 seconds SC7 User clicks on one of the top 5 search results in at least 80% of search queries SC8 A user can vote in less than 3 clicks from loading proposals page SC9 A user can vote on another proposal in less than 2 clicks after voting on one proposal SC10 User gets confirmation of votes cast in less than 5 seconds SC11 User gets confirmation of votes confirmed in less than 30s SC12 More than 80% of proposals are submitted to a vote within 6 months of creation SC13 Less than 10% of proposals are reassigned to a new category between initial category select & submission SC14 Less than 10% of proposals are withdrawn from an event once submitted SC15 More than 80% of proposals are ready for submission in less than 10 editing sessions SC16 100% of votes confirmed are represented in final tally SC17 Less than 5% of votes cast are rejected SC18 100% of rejected transactions have known reason SC19 100% transactions sent to chain are traceable SC20 All voters can be verified against mainnet snapshot SC21 All voting power can be verified against mainnet snapshot SC22 All votes cast are represented in tally SC23 Tally is correctly calculated given all votes SC24 User gets new access permissions within 60s of role registration tx confirmation SC25 Only registered proposers may create, update, or delete a proposal SC26 As a voter, I can only delegate voting power to dreps that have a valid drep registration SC27 Only a registered drep may vote with delegated voting power SC28 As a user, I need to sign my votes with a voter key SC29 As a user, I need to sign proposal updates with a proposer key SC30 As a user, I need to sign my drep votes with a drep key SC31 As a user, I need to sign team-owned proposal updates with a team key SC32 Able to handle arbitrary configurations of fund parameters SC33 Able to handle arbitrary configurations of proposal template SC34 Able to handle arbitrary configurations of category template SC35 Able to integrate new modules in the future SC36 Able to integrate open source community contributions SC37 A single event can be administered by a single non technical user SC38 Overall platform can be maintained by 1 SRE, 2 SWE, 1 QA SC39 Important metrics viewable by non technical users SC40 New versions can be deployed by SRE in less than 1 hour SC41 On chain immutable record of registrations, proposals, votes, and tally for every event SC42 Due Diligence maintained by 3 rd party for all relevant user types SC43 Up to 1M concurrent users - wallet connect, login, registration, proposal create, comment, vote SC44 Up to 100 votes per second SC45 Up to 10 people editing the same proposal SC45 Up to 50 concurrent brands/customers running parallel events on platform SC46 Up to 500 concurrent events/voting rounds SC47 Up to 100k proposals SC48 Up to 500k comments SC49 Up to 250k registered accounts SC50 The search click-through rate should be more then 50% SC51 As a user, if I mark my proposal private, only I (and my team) can see it SC52 As a user, if I mark my proposal as public, anyone can see it SC53 As a user, only me and my team can make edits to my proposal SC54 Notifications properly delivered to all target accounts SC55 Updates to event parameters reflected in less than 1 hour across all users SC56 Users always shown accurate dates for an event SC57 10% of circulating supply that registers to vote SC58 80% of registered stake that submits a vote SC59 50% of voting stake that casts at least 25 votes SC60 Users should not reach to customer service for help on how to use the system SC61 Unit tests should take less then 30 minutes to run SC62 Test report should be available and up to date SC63 Localizable to several languages SC64 Compliance with WCA accessibility guidelines SC65 If the system gets more then 100 votes per second votes are not lost SC66 User private key are secure SC67 New team member can be onboarded without help from the team SC68 Tests functions have a comment explaining the steps of the test","title":"Quality Requirements"},{"location":"architecture/10_quality/quality_requirements/#quality-requirements","text":"","title":"Quality Requirements"},{"location":"architecture/10_quality/quality_requirements/#quality-tree","text":"Quality Category Quality Description Scenarios Usable Voting User experience Voting and browsing proposals should be easy and intuitive to do SC1-SC4, SC7-SC9 Usable Proposer User experience Creating and managing proposals should be easy and intuitive to do SC12-SC15 Usable Correctness System functions should provide accurate results SC50-SC53 Usable Accessibility The system should be design so as to be usable by everyone SC63-SC64 Usable Engagement Users should actively participate with the system SC57-SC60 Secure Access control Role-Based Access Control SC24-SC31 Secure Privacy User information are kept private SC66 Secure Auditability Voting results can be audited by external parties SC20-SC23 Secure Compliancy The system is complaint with local laws SC41-SC42 Reliable Fail-safe In case of failures the system does not loose data/votes SC16-SC19, SC65 Reliable Scalability The system should scale well with increasing number of users/votes SC43-SC49 Efficient Response Time The system should give feedback in timely manner SC5, SC6, SC10, SC11 Efficient Code Complexity Code should be easy to understand and well documented SC68 Operable Deployability The system should be easy to deploy and operate SC37-SC40 Operable Testability Tests should be easy to run and give a clear feedback SC61-SC62 Operable Clarity Clarity in technical documentation SC67 Flexible Configurable Efficient change of business rules SC32-SC36","title":"Quality Tree"},{"location":"architecture/10_quality/quality_requirements/#quality-scenarios","text":"Id Scenario SC1 A user who is new to Catalyst can understand how to vote in 5 minutes maximum. SC2 A user should be able to stop voting and restart voting without loosing votes SC3 If a user tries to vote on the same proposal twice he will receive a clear error message SC4 After a user cast a vote he will receive a clear feedback on the status of his vote SC5 Proposals are fully loaded and able to be navigated by user in less than 10 seconds SC6 Search/sort/ filter results returned in less than 5 seconds SC7 User clicks on one of the top 5 search results in at least 80% of search queries SC8 A user can vote in less than 3 clicks from loading proposals page SC9 A user can vote on another proposal in less than 2 clicks after voting on one proposal SC10 User gets confirmation of votes cast in less than 5 seconds SC11 User gets confirmation of votes confirmed in less than 30s SC12 More than 80% of proposals are submitted to a vote within 6 months of creation SC13 Less than 10% of proposals are reassigned to a new category between initial category select & submission SC14 Less than 10% of proposals are withdrawn from an event once submitted SC15 More than 80% of proposals are ready for submission in less than 10 editing sessions SC16 100% of votes confirmed are represented in final tally SC17 Less than 5% of votes cast are rejected SC18 100% of rejected transactions have known reason SC19 100% transactions sent to chain are traceable SC20 All voters can be verified against mainnet snapshot SC21 All voting power can be verified against mainnet snapshot SC22 All votes cast are represented in tally SC23 Tally is correctly calculated given all votes SC24 User gets new access permissions within 60s of role registration tx confirmation SC25 Only registered proposers may create, update, or delete a proposal SC26 As a voter, I can only delegate voting power to dreps that have a valid drep registration SC27 Only a registered drep may vote with delegated voting power SC28 As a user, I need to sign my votes with a voter key SC29 As a user, I need to sign proposal updates with a proposer key SC30 As a user, I need to sign my drep votes with a drep key SC31 As a user, I need to sign team-owned proposal updates with a team key SC32 Able to handle arbitrary configurations of fund parameters SC33 Able to handle arbitrary configurations of proposal template SC34 Able to handle arbitrary configurations of category template SC35 Able to integrate new modules in the future SC36 Able to integrate open source community contributions SC37 A single event can be administered by a single non technical user SC38 Overall platform can be maintained by 1 SRE, 2 SWE, 1 QA SC39 Important metrics viewable by non technical users SC40 New versions can be deployed by SRE in less than 1 hour SC41 On chain immutable record of registrations, proposals, votes, and tally for every event SC42 Due Diligence maintained by 3 rd party for all relevant user types SC43 Up to 1M concurrent users - wallet connect, login, registration, proposal create, comment, vote SC44 Up to 100 votes per second SC45 Up to 10 people editing the same proposal SC45 Up to 50 concurrent brands/customers running parallel events on platform SC46 Up to 500 concurrent events/voting rounds SC47 Up to 100k proposals SC48 Up to 500k comments SC49 Up to 250k registered accounts SC50 The search click-through rate should be more then 50% SC51 As a user, if I mark my proposal private, only I (and my team) can see it SC52 As a user, if I mark my proposal as public, anyone can see it SC53 As a user, only me and my team can make edits to my proposal SC54 Notifications properly delivered to all target accounts SC55 Updates to event parameters reflected in less than 1 hour across all users SC56 Users always shown accurate dates for an event SC57 10% of circulating supply that registers to vote SC58 80% of registered stake that submits a vote SC59 50% of voting stake that casts at least 25 votes SC60 Users should not reach to customer service for help on how to use the system SC61 Unit tests should take less then 30 minutes to run SC62 Test report should be available and up to date SC63 Localizable to several languages SC64 Compliance with WCA accessibility guidelines SC65 If the system gets more then 100 votes per second votes are not lost SC66 User private key are secure SC67 New team member can be onboarded without help from the team SC68 Tests functions have a comment explaining the steps of the test","title":"Quality Scenarios"},{"location":"architecture/10_quality/test_reports/","text":"Test reports \u00b6 Main branch test report Nightly test report","title":"Test reports"},{"location":"architecture/10_quality/test_reports/#test-reports","text":"Main branch test report Nightly test report","title":"Test reports"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/","text":"Flutter Cardano Integration \u00b6 Flutter Cardano Integration General Informations Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Integration tests Integration tests strategy Integration test cases Extensions User actions Wallet General Informations \u00b6 Abstract \u00b6 Catalyst Cardano is a web application that facilitate interaction with the Cardano blockchain. It incorporates CIP-30 (Wallet DAppBridge) and CIP-95 (Message Signing) specifications. It requires connection to the wallet third party extensions (e.g Eternl) to be able to perform wallet actions. These actions are namely retrieving wallet details, signing data/transactions and submiting transactions. Stakeholders \u00b6 Role/Name Contact Approval Eng-Manager Sasha Developers Dominik Testers Duy Requirements \u00b6 EPIC CIP-30 CIP-95 Testing will be focused only on web applications for the time being. Focus needs to be on compliance with CIP-30 and CIP-95 specs, reliability and security. This is especially needed when handling wallet interactions and message signing. UI testing is out of scope, the web application will be used only for setup purpose. Acceptance criteria \u00b6 The package must comply with CIP-30 and CIP-95 specifications, focusing on the web. High unit test coverage to ensure reliability and security. Clear and comprehensive documentation for developers. An example web application that effectively demonstrates the package's functionalities. The web application needs to support Lace, Nami, Eternl, and Vespr Risks \u00b6 Documentation is not complete yet, integration dart package might be not enough Tools \u00b6 The main tool we will use is Playwright ACC framework \u00b6 Note: Use the ACC framework to help you define the test cases Attributes \u00b6 Secure, comply with CIP-30 and CIP-95, reliable Components \u00b6 Web application Capabilities \u00b6 User can retrieve his wallet details User can sign data User can sign transactions User submit transactions Integration tests \u00b6 Integration tests strategy \u00b6 Note: Evaluate all integrations with other functions, services etc. Integration test cases \u00b6 Extensions \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Wallet extension installation success Start application, Download wallet chrome extension Displays message when Wallet extension is successfully installed YES 2 Wallet extension installation failure Start application, Download wallet chrome extension Displays error message handling when Wallet extension installation fails YES 3 Wallet extension detection Start application, Download wallet chrome extension Displays message when the app correctly detects the presence of the Wallet extension YES User actions \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 User can retrieve his wallet details Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Wallet details (balance, addresses, etc.) is correctly returned YES 2 User can sign data Connect the wallet as #1, sign data No exceptions are thrown, VkeyWitness is valid YES 3 User can sign transactions Connect the wallet as #1, sign transaction data No exceptions are thrown, and in TransactionWitnessSet, atleast one VkeyWitness is present YES 4 User can submit transactions Connect the wallet as #1, submit transaction No exceptions are thrown, Returned TransactionHash is not empty, Metadata is not included YES 5 User can handle invalid transactions Connect the wallet as #1, create and submit an invalid transaction (e.g., incorrect signature, insufficient funds, malformed data) Appropriate error message is returned, Transaction is not processed YES 6 User can submit transactions with metadata Connect the wallet as #1, submit transaction with metadata No exceptions are thrown, Returned TransactionHash is not empty, transaction is processed successfully with metadata YES 7 User can submit transactions with auxiliary data set Connect the wallet as #1, create and submit transaction with auxiliary data set, verify auxiliary_data_set existence If auxiliary_data_set exists, process the transaction successfully, otherwise return None YES Wallet \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Empty wallet list Start application, Download wallet chrome extension, Connect wallet extension in the application Displays empty message when no wallets are available YES 2 Wallet enabling success Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Displays message is displayed when enabling wallet success YES 3 Wallet enabling failure Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Error message is displayed when enabling wallet fails YES 4 Error while loading wallet details Connect the wallet as #1 Error message is displayed when loading wallet details fails YES 5 Sign data failure Connect the wallet as #1, sign data Error message is displayed when signing data fails YES 6 Sign and submit transaction failure Connect the wallet as #1, sign data, submit data Error message is displayed when signing and submitting transaction fails YES","title":"Flutter cardano integration"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#flutter-cardano-integration","text":"Flutter Cardano Integration General Informations Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Integration tests Integration tests strategy Integration test cases Extensions User actions Wallet","title":"Flutter Cardano Integration"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#general-informations","text":"","title":"General Informations"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#abstract","text":"Catalyst Cardano is a web application that facilitate interaction with the Cardano blockchain. It incorporates CIP-30 (Wallet DAppBridge) and CIP-95 (Message Signing) specifications. It requires connection to the wallet third party extensions (e.g Eternl) to be able to perform wallet actions. These actions are namely retrieving wallet details, signing data/transactions and submiting transactions.","title":"Abstract"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#stakeholders","text":"Role/Name Contact Approval Eng-Manager Sasha Developers Dominik Testers Duy","title":"Stakeholders"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#requirements","text":"EPIC CIP-30 CIP-95 Testing will be focused only on web applications for the time being. Focus needs to be on compliance with CIP-30 and CIP-95 specs, reliability and security. This is especially needed when handling wallet interactions and message signing. UI testing is out of scope, the web application will be used only for setup purpose.","title":"Requirements"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#acceptance-criteria","text":"The package must comply with CIP-30 and CIP-95 specifications, focusing on the web. High unit test coverage to ensure reliability and security. Clear and comprehensive documentation for developers. An example web application that effectively demonstrates the package's functionalities. The web application needs to support Lace, Nami, Eternl, and Vespr","title":"Acceptance criteria"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#risks","text":"Documentation is not complete yet, integration dart package might be not enough","title":"Risks"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#tools","text":"The main tool we will use is Playwright","title":"Tools"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#acc-framework","text":"Note: Use the ACC framework to help you define the test cases","title":"ACC framework"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#attributes","text":"Secure, comply with CIP-30 and CIP-95, reliable","title":"Attributes"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#components","text":"Web application","title":"Components"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#capabilities","text":"User can retrieve his wallet details User can sign data User can sign transactions User submit transactions","title":"Capabilities"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-tests","text":"","title":"Integration tests"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-tests-strategy","text":"Note: Evaluate all integrations with other functions, services etc.","title":"Integration tests strategy"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-test-cases","text":"","title":"Integration test cases"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#extensions","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Wallet extension installation success Start application, Download wallet chrome extension Displays message when Wallet extension is successfully installed YES 2 Wallet extension installation failure Start application, Download wallet chrome extension Displays error message handling when Wallet extension installation fails YES 3 Wallet extension detection Start application, Download wallet chrome extension Displays message when the app correctly detects the presence of the Wallet extension YES","title":"Extensions"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#user-actions","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 User can retrieve his wallet details Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Wallet details (balance, addresses, etc.) is correctly returned YES 2 User can sign data Connect the wallet as #1, sign data No exceptions are thrown, VkeyWitness is valid YES 3 User can sign transactions Connect the wallet as #1, sign transaction data No exceptions are thrown, and in TransactionWitnessSet, atleast one VkeyWitness is present YES 4 User can submit transactions Connect the wallet as #1, submit transaction No exceptions are thrown, Returned TransactionHash is not empty, Metadata is not included YES 5 User can handle invalid transactions Connect the wallet as #1, create and submit an invalid transaction (e.g., incorrect signature, insufficient funds, malformed data) Appropriate error message is returned, Transaction is not processed YES 6 User can submit transactions with metadata Connect the wallet as #1, submit transaction with metadata No exceptions are thrown, Returned TransactionHash is not empty, transaction is processed successfully with metadata YES 7 User can submit transactions with auxiliary data set Connect the wallet as #1, create and submit transaction with auxiliary data set, verify auxiliary_data_set existence If auxiliary_data_set exists, process the transaction successfully, otherwise return None YES","title":"User actions"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#wallet","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Empty wallet list Start application, Download wallet chrome extension, Connect wallet extension in the application Displays empty message when no wallets are available YES 2 Wallet enabling success Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Displays message is displayed when enabling wallet success YES 3 Wallet enabling failure Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Error message is displayed when enabling wallet fails YES 4 Error while loading wallet details Connect the wallet as #1 Error message is displayed when loading wallet details fails YES 5 Sign data failure Connect the wallet as #1, sign data Error message is displayed when signing data fails YES 6 Sign and submit transaction failure Connect the wallet as #1, sign data, submit data Error message is displayed when signing and submitting transaction fails YES","title":"Wallet"},{"location":"architecture/10_quality/testplans/template/","text":"Test Plan Template \u00b6 Note: Substitute with test plan name and link to the github testplan issue. Test Plan Name \u00b6 Note: This is meant to be only a guideline, the paragraphs can be removed or added as they fit. General informations Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Unit tests Unit tests strategy Unit test cases Functional tests Functional tests strategy Functional test cases Regression tests Regression tests strategy Regression test cases Integration tests Integration tests strategy Integration test cases End-to-end tests End-to-end tests strategy End-to-end test cases General Informations \u00b6 Abstract \u00b6 Note: Describe the design and architecture of the system in a way that highlights possible points of failure Stakeholders \u00b6 Note: Insert the relevant stakeholders that need to understand, review and approve the test plan Role/Name Contact Approval Product-Owner Developers Admin SRE Testers Requirements \u00b6 Note: Business requirements, insert links to relevant Github or JIRA tickets, list what platforms are supported, what will not be tested, etc Acceptance criteria \u00b6 Note: List the acceptance criteria for this feature Risks \u00b6 Note: Describe what risks can affect the accomplishment of the testplan. For example documentation is missing, not enough resources etc Tools \u00b6 Note: Describe what tools will be needed for the testing, if new tools are needed to be developed ACC framework \u00b6 Note: Use the ACC framework to help you define the test cases Attributes \u00b6 Note: The adverbs and adjectives that describe the high level concepts testing is meant to ensure. Attributes such as fast, usable, secure, accessible and so forth. The quality metrics document in this repo should and can be used as a guideline Components \u00b6 Note: The nouns that define the major code chunks that comprise the product. These are classes, module names and features of the application. Capabilities \u00b6 Note: The verbs that describe user actions and activities. Every capability should be testable. Unit tests \u00b6 Unit tests strategy \u00b6 Note: Evaluate new features and bug fixes introduced in this release, and the extent of the unit tests Unit test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Functional tests \u00b6 Functional tests strategy \u00b6 Note: Evaluate new features introduced in this release, and the extent of the functional tests Functional test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Regression tests \u00b6 Regression tests strategy \u00b6 Note: Ensure that previously developed and tested software still performs after change. Regression test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Integration tests \u00b6 Integration tests strategy \u00b6 Note: Evaluate all integrations with other functions, services etc. Integration test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 End-to-end tests \u00b6 End-to-end tests strategy \u00b6 Note: Evaluate how will test infrastructure, systems under test, and other dependencies be managed? How will they be deployed? How will persistence be set-up/torn-down? How will you handle required migrations from one datacenter to another? End-to-end test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Template"},{"location":"architecture/10_quality/testplans/template/#test-plan-template","text":"Note: Substitute with test plan name and link to the github testplan issue.","title":"Test Plan Template"},{"location":"architecture/10_quality/testplans/template/#test-plan-name","text":"Note: This is meant to be only a guideline, the paragraphs can be removed or added as they fit. General informations Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Unit tests Unit tests strategy Unit test cases Functional tests Functional tests strategy Functional test cases Regression tests Regression tests strategy Regression test cases Integration tests Integration tests strategy Integration test cases End-to-end tests End-to-end tests strategy End-to-end test cases","title":"Test Plan Name"},{"location":"architecture/10_quality/testplans/template/#general-informations","text":"","title":"General Informations"},{"location":"architecture/10_quality/testplans/template/#abstract","text":"Note: Describe the design and architecture of the system in a way that highlights possible points of failure","title":"Abstract"},{"location":"architecture/10_quality/testplans/template/#stakeholders","text":"Note: Insert the relevant stakeholders that need to understand, review and approve the test plan Role/Name Contact Approval Product-Owner Developers Admin SRE Testers","title":"Stakeholders"},{"location":"architecture/10_quality/testplans/template/#requirements","text":"Note: Business requirements, insert links to relevant Github or JIRA tickets, list what platforms are supported, what will not be tested, etc","title":"Requirements"},{"location":"architecture/10_quality/testplans/template/#acceptance-criteria","text":"Note: List the acceptance criteria for this feature","title":"Acceptance criteria"},{"location":"architecture/10_quality/testplans/template/#risks","text":"Note: Describe what risks can affect the accomplishment of the testplan. For example documentation is missing, not enough resources etc","title":"Risks"},{"location":"architecture/10_quality/testplans/template/#tools","text":"Note: Describe what tools will be needed for the testing, if new tools are needed to be developed","title":"Tools"},{"location":"architecture/10_quality/testplans/template/#acc-framework","text":"Note: Use the ACC framework to help you define the test cases","title":"ACC framework"},{"location":"architecture/10_quality/testplans/template/#attributes","text":"Note: The adverbs and adjectives that describe the high level concepts testing is meant to ensure. Attributes such as fast, usable, secure, accessible and so forth. The quality metrics document in this repo should and can be used as a guideline","title":"Attributes"},{"location":"architecture/10_quality/testplans/template/#components","text":"Note: The nouns that define the major code chunks that comprise the product. These are classes, module names and features of the application.","title":"Components"},{"location":"architecture/10_quality/testplans/template/#capabilities","text":"Note: The verbs that describe user actions and activities. Every capability should be testable.","title":"Capabilities"},{"location":"architecture/10_quality/testplans/template/#unit-tests","text":"","title":"Unit tests"},{"location":"architecture/10_quality/testplans/template/#unit-tests-strategy","text":"Note: Evaluate new features and bug fixes introduced in this release, and the extent of the unit tests","title":"Unit tests strategy"},{"location":"architecture/10_quality/testplans/template/#unit-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Unit test cases"},{"location":"architecture/10_quality/testplans/template/#functional-tests","text":"","title":"Functional tests"},{"location":"architecture/10_quality/testplans/template/#functional-tests-strategy","text":"Note: Evaluate new features introduced in this release, and the extent of the functional tests","title":"Functional tests strategy"},{"location":"architecture/10_quality/testplans/template/#functional-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Functional test cases"},{"location":"architecture/10_quality/testplans/template/#regression-tests","text":"","title":"Regression tests"},{"location":"architecture/10_quality/testplans/template/#regression-tests-strategy","text":"Note: Ensure that previously developed and tested software still performs after change.","title":"Regression tests strategy"},{"location":"architecture/10_quality/testplans/template/#regression-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Regression test cases"},{"location":"architecture/10_quality/testplans/template/#integration-tests","text":"","title":"Integration tests"},{"location":"architecture/10_quality/testplans/template/#integration-tests-strategy","text":"Note: Evaluate all integrations with other functions, services etc.","title":"Integration tests strategy"},{"location":"architecture/10_quality/testplans/template/#integration-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Integration test cases"},{"location":"architecture/10_quality/testplans/template/#end-to-end-tests","text":"","title":"End-to-end tests"},{"location":"architecture/10_quality/testplans/template/#end-to-end-tests-strategy","text":"Note: Evaluate how will test infrastructure, systems under test, and other dependencies be managed? How will they be deployed? How will persistence be set-up/torn-down? How will you handle required migrations from one datacenter to another?","title":"End-to-end tests strategy"},{"location":"architecture/10_quality/testplans/template/#end-to-end-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"End-to-end test cases"},{"location":"catalyst-standards/","text":"Catalyst Standards \u00b6 These are documents that relate to standardized specifications of the catalyst stack.","title":"Catalyst Standards"},{"location":"catalyst-standards/#catalyst-standards","text":"These are documents that relate to standardized specifications of the catalyst stack.","title":"Catalyst Standards"},{"location":"catalyst-standards/ballot/","text":"Catalyst Ballot Formats \u00b6","title":"Index"},{"location":"catalyst-standards/ballot/#catalyst-ballot-formats","text":"","title":"Catalyst Ballot Formats"},{"location":"catalyst-standards/ballot/catalyst-v1/","text":"Catalyst Ballot Format V1 \u00b6","title":"Catalyst v1"},{"location":"catalyst-standards/ballot/catalyst-v1/#catalyst-ballot-format-v1","text":"","title":"Catalyst Ballot Format V1"},{"location":"catalyst-standards/ballot/catalyst-v2/","text":"Catalyst Ballot Format V2 \u00b6","title":"Catalyst v2"},{"location":"catalyst-standards/ballot/catalyst-v2/#catalyst-ballot-format-v2","text":"","title":"Catalyst Ballot Format V2"},{"location":"catalyst-standards/cbor_tags/blake/","text":"BLAKE2 and BLAKE3 for for CBOR \u00b6 This document specifies a CBOR [1] tags for BLAKE2 [2] and BLAKE3 [3] hash functions. BLAKE3 \u00b6 Tag: 32781 Data item: byte string Semantics: Binary BLAKE3 hash value (https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE3 Semantics \u00b6 Tag 32781 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE3 [2] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE3-256, BLAKE3-512 etc. BLAKE2b \u00b6 Tag: 32782 Data item: byte string Semantics: Binary BLAKE2b hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2b Semantics \u00b6 Tag 32782 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2b [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2b-256, BLAKE2b-512 etc. BLAKE2s \u00b6 Tag: 32783 Data item: byte string Semantics: Binary BLAKE2s hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2s Semantics \u00b6 Tag 32783 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2s [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2s-256, BLAKE2s-512 etc. BLAKE2bp \u00b6 Tag: 32784 Data item: byte string Semantics: Binary BLAKE2bp hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2bp Semantics \u00b6 Tag 32784 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2bp [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2bp-256, BLAKE2bp-512 etc. BLAKE2sp \u00b6 Tag: 32785 Data item: byte string Semantics: Binary BLAKE2sp hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2s Semantics \u00b6 Tag 32785 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2sp [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2sp-256, BLAKE2sp-512 etc. References \u00b6 [1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [J. O'Conor, J-P. Aumasson, S. Neves, Z. Wilcox-O'Hearn. \"BLAKE3 one function, fast everywhere\".] BLAKE3 [3] [J-P. Aumasson, S. Neves, Z. Wilcox-O'Hearn., C. Winnerlein. \"BLAKE2: simpler, smaller, fast as MD5\". January 2013.] BLAKE2 Authors \u00b6 Steven Johnson steven.johnson@iohk.io Alex Pozhylenkov alex.pozhylenkov@iohk.io","title":"Blake"},{"location":"catalyst-standards/cbor_tags/blake/#blake2-and-blake3-for-for-cbor","text":"This document specifies a CBOR [1] tags for BLAKE2 [2] and BLAKE3 [3] hash functions.","title":"BLAKE2 and BLAKE3 for for CBOR"},{"location":"catalyst-standards/cbor_tags/blake/#blake3","text":"Tag: 32781 Data item: byte string Semantics: Binary BLAKE3 hash value (https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE3","title":"BLAKE3"},{"location":"catalyst-standards/cbor_tags/blake/#semantics","text":"Tag 32781 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE3 [2] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE3-256, BLAKE3-512 etc.","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/blake/#blake2b","text":"Tag: 32782 Data item: byte string Semantics: Binary BLAKE2b hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2b","title":"BLAKE2b"},{"location":"catalyst-standards/cbor_tags/blake/#semantics_1","text":"Tag 32782 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2b [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2b-256, BLAKE2b-512 etc.","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/blake/#blake2s","text":"Tag: 32783 Data item: byte string Semantics: Binary BLAKE2s hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2s","title":"BLAKE2s"},{"location":"catalyst-standards/cbor_tags/blake/#semantics_2","text":"Tag 32783 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2s [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2s-256, BLAKE2s-512 etc.","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/blake/#blake2bp","text":"Tag: 32784 Data item: byte string Semantics: Binary BLAKE2bp hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2bp","title":"BLAKE2bp"},{"location":"catalyst-standards/cbor_tags/blake/#semantics_3","text":"Tag 32784 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2bp [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2bp-256, BLAKE2bp-512 etc.","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/blake/#blake2sp","text":"Tag: 32785 Data item: byte string Semantics: Binary BLAKE2sp hash value (https://www.blake2.net/blake2.pdf) Point of contact: Steven Johnson <steven.johnson@iohk.io>, Alex Pozhylenkov <alex.pozhylenkov@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/blake.md#BLAKE2s","title":"BLAKE2sp"},{"location":"catalyst-standards/cbor_tags/blake/#semantics_4","text":"Tag 32785 can be applied to a byte string (major type 2) to indicate that the byte string is a binary BLAKE2sp [3] hash value encoded in big-endian. The length of the byte string will characterize the size of the hash function to be used e.g. BLAKE2sp-256, BLAKE2sp-512 etc.","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/blake/#references","text":"[1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [J. O'Conor, J-P. Aumasson, S. Neves, Z. Wilcox-O'Hearn. \"BLAKE3 one function, fast everywhere\".] BLAKE3 [3] [J-P. Aumasson, S. Neves, Z. Wilcox-O'Hearn., C. Winnerlein. \"BLAKE2: simpler, smaller, fast as MD5\". January 2013.] BLAKE2","title":"References"},{"location":"catalyst-standards/cbor_tags/blake/#authors","text":"Steven Johnson steven.johnson@iohk.io Alex Pozhylenkov alex.pozhylenkov@iohk.io","title":"Authors"},{"location":"catalyst-standards/cbor_tags/ulid/","text":"ULIDs for CBOR \u00b6 This document specifies a tag for ULIDs in Concise Binary Object Representation (CBOR) [1]. Tag: 32780 Data item: byte string Semantics: Binary ULID (https://github.com/ulid/spec/tree/master) Point of contact: Steven Johnson <steven.johnson@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/ulid.md Semantics \u00b6 Tag 32780 can be applied to a byte string (major type 2) to indicate that the byte string is a binary ULID as specified by the ULID Binary Layout . References \u00b6 [1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [Universally Unique Lexicographically Sortable Identifier] ULID Author \u00b6 Steven Johnson steven.johnson@iohk.io","title":"ULIDs for CBOR"},{"location":"catalyst-standards/cbor_tags/ulid/#ulids-for-cbor","text":"This document specifies a tag for ULIDs in Concise Binary Object Representation (CBOR) [1]. Tag: 32780 Data item: byte string Semantics: Binary ULID (https://github.com/ulid/spec/tree/master) Point of contact: Steven Johnson <steven.johnson@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/ulid.md","title":"ULIDs for CBOR"},{"location":"catalyst-standards/cbor_tags/ulid/#semantics","text":"Tag 32780 can be applied to a byte string (major type 2) to indicate that the byte string is a binary ULID as specified by the ULID Binary Layout .","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/ulid/#references","text":"[1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [Universally Unique Lexicographically Sortable Identifier] ULID","title":"References"},{"location":"catalyst-standards/cbor_tags/ulid/#author","text":"Steven Johnson steven.johnson@iohk.io","title":"Author"},{"location":"catalyst-standards/draft-cips/","text":"Draft CIPs \u00b6","title":"Index"},{"location":"catalyst-standards/draft-cips/#draft-cips","text":"","title":"Draft CIPs"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/","text":"Restricted format for C509 compatibility with Plutus \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Restricted format for C509 compatibility with Plutus"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/#restricted-format-for-c509-compatibility-with-plutus","text":"","title":"Restricted format for C509 compatibility with Plutus"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/","text":"Project Catalyst Role Registrations \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Project Catalyst Role Registrations"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/#project-catalyst-role-registrations","text":"","title":"Project Catalyst Role Registrations"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/","text":"x509 Replayability Protection Envelope \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"x509 Replayability Protection Envelope"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/#x509-replayability-protection-envelope","text":"","title":"x509 Replayability Protection Envelope"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/","text":"Preparing and Signing x509 Metadata with CIP-30 \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Preparing and Signing x509 Metadata with CIP-30"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/#preparing-and-signing-x509-metadata-with-cip-30","text":"","title":"Preparing and Signing x509 Metadata with CIP-30"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/","text":"x509 Role based Access Control Registration \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"x509 Role based Access Control Registration"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/#x509-role-based-access-control-registration","text":"","title":"x509 Role based Access Control Registration"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/permissionless-auth/auth-header/","text":"Permission-less Authentication for Catalyst \u00b6 Overview \u00b6 There is a requirement to establish identity with the catalyst backend to provide secure and contextual access to resources managed by project Catalyst. For example, a query of a voter's current voting power, should provide that information from the voter's identity. This provides better security and also simplifies API's because they can have implicit parameters based on the verified identity of the user. This document defines the format of the Authentication Token, and how it should be used. Token Format \u00b6 The Authentication Token is based loosely on JWT. It consists of an Authentication Header attached to every authenticated request, and an encoded signed. This token can be attached to either individual HTTP requests, or to the beginning of a web socket connection. The authentication header is in the format: Authorization: Bearer catv1.<encoded token> The <encoded token> is a [base64-url] encoded binary token whose format is defined in auth-token.cddl . Encoded Binary Token Format \u00b6 The Encoded Binary Token is a [CBOR sequence] that consists of 3 fields. kid : The key identifier. ulid : A ULID which defines when the token was issued, and a random nonce. signature : The signature over the kid and ulid fields. kid \u00b6 The Key ID is used to identify the Public Key Certificate, which identifies the Public Key used to sign the token. Because this certificate is the Role 0 Certificate from the on-chain Role-Based Access Control specification, it can be used to also provide identifying information about the user. Such as: Stake Address Registered Rewards Address The Identity of the issuer of the Certificate (Self Signed, or issued by an Authority). Other Roles keys they have registered. Or any other data attached to the registration. The kid is simply the Blake2b-128 hash of the Role 0 Certificate. The backend will use this hash to identify the certificate from the on-chain registration and use that information to both authenticate the user and provide identifying information about them to the backend. ulid \u00b6 A standard [ULID] will be created when the token is first issued. The [ULID] contains a timestamp of when it was created, and a random nonce. The timestamp is used to protect against replay attack by allowing the backend to reject authentication if the timestamp is too old (or too far into the future). signature \u00b6 Initially, the only supported signature algorithm is ED25519. However, the KID could in-future refer to a certificate which uses different cryptography. Accordingly, the formal specification of the signature is that it is as many bytes as required to embed a signature of the type defined by the certificate identified by the kid . For ED25519, the signature will be 64 bytes. Example Token \u00b6 The CDDL Specification contains an example token. This is binary. The binary of that example is: 50 00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 50 01 91 2C EC 71 CF 2C 4C 14 A5 5D 55 85 D9 4D 7B 58 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [base64-url] encoded it becomes: UAARIjNEVWZ3iJmqu8zd7v9QAZEs7HHPLEwUpV1VhdlNe1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA The full token header would then be: Authorization: Bearer catv1.UAARIjNEVWZ3iJmqu8zd7v9QAZEs7HHPLEwUpV1VhdlNe1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [base64-url] https://base64.guru/standards/base64url [CBOR sequence] https://www.rfc-editor.org/rfc/rfc8742.html [ULID] https://github.com/ulid/spec","title":"Permission-less Authentication for Catalyst"},{"location":"catalyst-standards/permissionless-auth/auth-header/#permission-less-authentication-for-catalyst","text":"","title":"Permission-less Authentication for Catalyst"},{"location":"catalyst-standards/permissionless-auth/auth-header/#overview","text":"There is a requirement to establish identity with the catalyst backend to provide secure and contextual access to resources managed by project Catalyst. For example, a query of a voter's current voting power, should provide that information from the voter's identity. This provides better security and also simplifies API's because they can have implicit parameters based on the verified identity of the user. This document defines the format of the Authentication Token, and how it should be used.","title":"Overview"},{"location":"catalyst-standards/permissionless-auth/auth-header/#token-format","text":"The Authentication Token is based loosely on JWT. It consists of an Authentication Header attached to every authenticated request, and an encoded signed. This token can be attached to either individual HTTP requests, or to the beginning of a web socket connection. The authentication header is in the format: Authorization: Bearer catv1.<encoded token> The <encoded token> is a [base64-url] encoded binary token whose format is defined in auth-token.cddl .","title":"Token Format"},{"location":"catalyst-standards/permissionless-auth/auth-header/#encoded-binary-token-format","text":"The Encoded Binary Token is a [CBOR sequence] that consists of 3 fields. kid : The key identifier. ulid : A ULID which defines when the token was issued, and a random nonce. signature : The signature over the kid and ulid fields.","title":"Encoded Binary Token Format"},{"location":"catalyst-standards/permissionless-auth/auth-header/#kid","text":"The Key ID is used to identify the Public Key Certificate, which identifies the Public Key used to sign the token. Because this certificate is the Role 0 Certificate from the on-chain Role-Based Access Control specification, it can be used to also provide identifying information about the user. Such as: Stake Address Registered Rewards Address The Identity of the issuer of the Certificate (Self Signed, or issued by an Authority). Other Roles keys they have registered. Or any other data attached to the registration. The kid is simply the Blake2b-128 hash of the Role 0 Certificate. The backend will use this hash to identify the certificate from the on-chain registration and use that information to both authenticate the user and provide identifying information about them to the backend.","title":"kid"},{"location":"catalyst-standards/permissionless-auth/auth-header/#ulid","text":"A standard [ULID] will be created when the token is first issued. The [ULID] contains a timestamp of when it was created, and a random nonce. The timestamp is used to protect against replay attack by allowing the backend to reject authentication if the timestamp is too old (or too far into the future).","title":"ulid"},{"location":"catalyst-standards/permissionless-auth/auth-header/#signature","text":"Initially, the only supported signature algorithm is ED25519. However, the KID could in-future refer to a certificate which uses different cryptography. Accordingly, the formal specification of the signature is that it is as many bytes as required to embed a signature of the type defined by the certificate identified by the kid . For ED25519, the signature will be 64 bytes.","title":"signature"},{"location":"catalyst-standards/permissionless-auth/auth-header/#example-token","text":"The CDDL Specification contains an example token. This is binary. The binary of that example is: 50 00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 50 01 91 2C EC 71 CF 2C 4C 14 A5 5D 55 85 D9 4D 7B 58 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [base64-url] encoded it becomes: UAARIjNEVWZ3iJmqu8zd7v9QAZEs7HHPLEwUpV1VhdlNe1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA The full token header would then be: Authorization: Bearer catv1.UAARIjNEVWZ3iJmqu8zd7v9QAZEs7HHPLEwUpV1VhdlNe1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [base64-url] https://base64.guru/standards/base64url [CBOR sequence] https://www.rfc-editor.org/rfc/rfc8742.html [ULID] https://github.com/ulid/spec","title":"Example Token"},{"location":"getting-started/","text":"Getting Started \u00b6","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/advanced/","text":"Advanced \u00b6","title":"Advanced"},{"location":"getting-started/advanced/#advanced","text":"","title":"Advanced"},{"location":"getting-started/development/","text":"Development \u00b6","title":"Development"},{"location":"getting-started/development/#development","text":"","title":"Development"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records api \u00b6 0006 Cursor-based pagination for Catalyst Data Service arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records dart \u00b6 0003 Flutter for Catalyst Voting Frontend flutter \u00b6 0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture images \u00b6 0004 Store/Display images in WebP format.","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#api","text":"0006 Cursor-based pagination for Catalyst Data Service","title":"api"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"},{"location":"appendix/tags/#dart","text":"0003 Flutter for Catalyst Voting Frontend","title":"dart"},{"location":"appendix/tags/#flutter","text":"0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture","title":"flutter"},{"location":"appendix/tags/#images","text":"0004 Store/Display images in WebP format.","title":"images"}]}