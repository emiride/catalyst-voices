searchState.loadedDescShard("c509_certificate", 0, "CBOR Encoded X.509 Certificate (C509 Certificate) library\nC509 Algorithm Identifier\nC509 <code>Attributes</code> containing <code>Attribute</code>\nC509 Unwrapped CBOR Unsigned Bignum (~biguint)\nC509 Certificate\nC509 Extension as a part of <code>TBSCertificate</code> used in C509 …\nC509 General Names\nGenerate a signed or unsigned C509 certificate.\nC509 Issuer Signature Algorithm as a part of <code>TBSCertificate</code>…\nC509 type Name\nC509 OID provides an encoding and decoding of C509 Object …\nED25519 public and private key implementation.\nC509 Issuer Signature Algorithm as a part of <code>TBSCertificate</code>…\nA bimap table for bidirectional lookup.\nTo Be Sign Certificate (TBS Certificate) use to construct …\nC509 Time\nVerify the signature of a C509 certificate.\nWASM binding wrapper for the C509 certificate crate.\nA struct represents the <code>AlgorithmIdentifier</code> type.\nA <code>C509oid</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new instance of <code>AlgorithmIdentifier</code>.\nGet the OID.\nGet the parameter.\nAn optional parameter string\nA struct of C509 <code>Attributes</code> containing a vector of …\nAdd an <code>Attribute</code> to the <code>Attributes</code>. and set <code>Attribute</code> …\nC509 Attribute\nGet the attributes.\nAttribute data provides a necessary information for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Attributes</code> as empty vector.\nA struct of C509 <code>Attribute</code>\nAn enum of possible value types for <code>Attribute</code>.\nA byte vector.\nA helper struct for deserialize and serialize <code>Attribute</code>.\nA text string.\nAdd a value to <code>Attribute</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA flag to indicate whether the value can have multiple …\nCreate a new instance of <code>Attribute</code>.\nAn OID value in string.\nGet the registered OID of <code>Attribute</code>.\nA registered OID of C509 <code>Attribute</code>.\nSet whether <code>Attribute</code> can have multiple value.\nGet the value of <code>Attribute</code>.\nA value of C509 <code>Attribute</code> can be a vector of text or bytes.\nA value of C509 <code>Attribute</code> can be a vector of text or bytes.\nStatic reference to the <code>AttributeData</code> lookup table.\nDefine static lookup for attributes table\n<code>Attribute</code> data table\nA struct of data that contains lookup tables for <code>Attribute</code>.\nType of <code>Attribute</code> data Int | OID | Name\nReturns the argument unchanged.\nGet the <code>IntegerToOidTable</code>.\nGet the OID from the int value.\nA table of integer to OID, provide a bidirectional lookup.\nCalls <code>U::from(self)</code>.\nA struct representing an unwrapped CBOR unsigned bignum.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>UnwrappedBigUint</code>.\nA struct represents the <code>C509</code> Certificate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the <code>IssuerSignatureValue</code> of the C509 Certificate.\nAn optional <code>IssuerSignatureValue</code> of the C509 Certificate.\nCreate a new instance of C509 Certificate .\nGet the <code>TBSCertificate</code> of the C509 Certificate.\nA TBS Certificate.\nA struct of C509 Extensions containing a vector of …\nOID of <code>KeyUsage</code> extension\nAdd an <code>Extension</code> to the <code>Extensions</code>.\nC509 Alternative Name uses for Subject Alternative Name …\nC509 Extension use to construct an Extensions message …\nGet the inner vector of <code>Extensions</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Extensions</code> as empty vector.\nAlternative Name extension. Can be interpreted as a …\nA value of <code>GeneralNames</code>.\nEnum for type that can be a <code>GeneralNames</code> or a text use in …\nA text string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the general name which can be general names or text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>AlternativeName</code> given value.\nAn Alternative Name.\nAn Alternative Name.\nA bytes.\nA bytes.\nA struct of C509 <code>Extension</code>\nAn enum of possible value types for <code>Extension</code>.\nAuto-generated discriminant enum variants\nTrait for <code>ExtensionValueType</code>\nA helper struct to deserialize and serialize <code>Extension</code>.\nAn Integer in the range [-2^64, 2^64-1]\nAn Integer in the range [-2^64, 2^64-1]\nAn unsupported value.\nAn unsupported value.\nGet the critical flag of the <code>Extension</code>.\nThe critical flag of the <code>Extension</code> negative if critical is …\nFlag to indicate whether the extension is critical\nExtension data provides a necessary information for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the type of the <code>ExtensionValueType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Extension</code> using <code>OID</code> and value.\nOID string value\nGet the registered OID of the <code>Extension</code>.\nThe registered OID of the <code>Extension</code>.\nGet the value of the <code>Extension</code> in <code>ExtensionValue</code>.\nThe value of the <code>Extension</code> in <code>ExtensionValue</code>.\nExtension value\nAn Alternative Name.\nA bytes.\nStatic reference to the <code>ExtensionData</code> lookup table.\nDefine static lookup for extensions table\n<code>Extension</code> data table\nCreate a type alias for <code>ExtensionValueType</code>\nA struct of data that contains lookup tables for <code>Extension</code>.\nType of <code>Extension</code> data Int | OID | Type | Name\nAn Integer in the range [-2^64, 2^64-1]\nAn unsupported value.\nReturns the argument unchanged.\nGet the extension value type from the int value.\nGet the <code>IntegerToOidTable</code>.\nGet the <code>int_to_type_table</code>\nGet the OID from the int value.\nA table of integer to OID, provide a bidirectional lookup.\nA table of integer to <code>ExtensionValueType</code>, provide a lookup …\nCalls <code>U::from(self)</code>.\nA struct represents an array of <code>GeneralName</code>.\nAdd a new <code>GeneralName</code> to the <code>GeneralNames</code>.\nGeneral Name data provides a necessary information for …\nReturns the argument unchanged.\nC509 General Name\nGet the inner of <code>GeneralName</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GeneralNames</code> as empty vector.\n<code>OtherNameHardwareModuleName</code>, special type for …\nA bytes.\nA dNSName.\nA directoryName.\n<code>GeneralName</code> data table.\nDefine static lookup for general names table\nA struct of data that contains lookup table for <code>GeneralName</code>…\nType of <code>GeneralName</code> data. Int | Name | Type\nCreate a type alias for <code>GeneralNameTypeRegistry</code>\nCreate a type alias for <code>GeneralNameValueType</code>\nAn iPAddress.\nA struct of integer to <code>GeneralNameTypeRegistry</code> table.\nName\nAn OID\nAn otherName.\nAn otherName with <code>BundleEID</code>.\nA otherName + hardwareModuleName.\nAn otherName with <code>HardwareModuleName</code>.\nAn otherName with <code>SmtpUTF8Mailbox</code>.\nA registeredID.\nA rfc822Name.\nA text string.\nA uniformResourceIdentifier.\nAn unsupported value.\nAdd a new integer to <code>GeneralNameTypeRegistry</code> map table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the general name from the int value.\nGet the general name value type from the int value.\nGet the int value from the general name.\nGet the <code>int_to_name_table</code>.\nGet the <code>int_to_type_table</code>.\nGet the map table of integer to <code>GeneralNameTypeRegistry</code>.\nA table of integer to <code>GeneralNameTypeRegistry</code>, provide a …\nA table of integer to <code>GeneralNameValueType</code>, provide a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>IntegerToGNTable</code>.\nA bytes.\nA bytes.\nA dNSName.\nA directoryName.\nA struct represents a <code>GeneralName</code>.\nEnum of <code>GeneralName</code> registered in table Section 9.9 C509.\nAn enum of possible value types for <code>GeneralName</code>.\nTrait for <code>GeneralNameValueType</code>\nAuto-generated discriminant enum variants\nAn iPAddress.\nName\nName\nAn OID\nAn OID\nAn otherName.\nAn otherName with <code>BundleEID</code>.\nA otherName + hardwareModuleName.\nA otherName + hardwareModuleName.\nAn otherName with <code>HardwareModuleName</code>.\nAn otherName with <code>SmtpUTF8Mailbox</code>.\nA registeredID.\nA rfc822Name.\nA text string.\nA text string.\nA uniformResourceIdentifier.\nAn unsupported value.\nAn unsupported value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the type of the <code>GeneralNameValueType</code>.\nGet the <code>GeneralName</code> type.\nA registered general name type.\nGet the value of the <code>GeneralName</code> in <code>GeneralNameValue</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nReturns true if the enum is …\nCreate a new instance of <code>GeneralName</code>.\nA general name value.\nA struct represents the hardwareModuleName type of …\nReturns the argument unchanged.\nGet the hardware serial number.\nThe hardware serial number represent in bytes.\nGet the c509 OID hardware type.\nThe hardware type OID.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>OtherNameHardwareModuleName</code>.\nHelper struct for deserialize and serialize …\nA struct represents the <code>IssuerSignatureAlgorithm</code>\nGet the algorithm identifier.\nAn <code>AlgorithmIdentifier</code> type\nSignature algorithm data provides a necessary information …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new instance of <code>IssuerSignatureAlgorithm</code> where it …\nOID as string.\nOptional parameter.\nGet the registered OID.\nThe registered OID of the <code>IssuerSignatureAlgorithm</code>.\nType of algorithm data INT | OID | Name\nStatic reference to the <code>IssuerSigAlgoData</code> lookup table.\nDefine static lookup for issuer signature algorithm table\nA struct of data that contains lookup table of integer to …\nSignature algorithm data table.\nReturns the argument unchanged.\nGet the <code>IntegerToOidTable</code>\nGet the OID from the int value.\nCalls <code>U::from(self)</code>.\nAttributes.\nbytes.\nOID of <code>CommonName</code> attribute.\nTotal length of CBOR byte for EUI-64.\nTotal length of CBOR byte for EUI-64 mapped from a 48-bit …\nEUI-64 prefix.\nHex prefix.\nA struct of C509 Name with <code>NameValue</code>.\nAn enum of possible value types for <code>Name</code>.\nA text.\nCreate a attributes with attribute common name from string.\nDecode bytes.\nDecode common name EUI-64 bytes.\nDecode common name hex bytes.\nEncode common name value.\nFormat EUI bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Name</code> its value.\nGet the value of the <code>Name</code>.\nA struct represent an instance of <code>C509oid</code>.\nA strut of C509 OID with Registered Integer.\nA helper struct for deserialize and serialize <code>C509oid</code>.\nGet the <code>C509oid</code>.\nThe <code>C509oid</code>.\nDecode an OID Decode the OID as unwrapped OID (~oid) - as …\nEncode an OID Encode as an unwrapped OID (~oid) - as bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>C509oidRegistered</code>.\nCreate an new instance of <code>C509oid</code>.\nGet the underlying OID of the <code>C509oid</code>\nOID value in string.\nThe registration table.\nGet the registration table.\nFile open and read error.\nPublic or private key decoding from string error.\nEd25519 private key instance. Wrapper over …\nEd25519 public key instance. Wrapper over …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new public key from raw bytes.\nCreate new public key from file decoded in PEM format.\nCreate new public key from file decoded in PEM format.\nCreate a new <code>FileError</code> instance from a path location.\nCreate a new <code>FileError</code> instance from a string location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFile location.\nFile open and read error.\nGet associated public key.\nSign the message with the current private key. Returns the …\nConvert string to public key.\nConvert string to private key.\nConvert public key to raw bytes.\nVerify signature of the message with the current public …\nHelper struct for deserialize and serialize …\nA struct represents the <code>SubjectPubKeyAlgorithm</code>\nGet the algorithm identifier.\nAn <code>AlgorithmIdentifier</code> type\nPublic key algorithm data provides a necessary information …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new instance of <code>SubjectPubKeyAlgorithm</code> where it …\nOID as string.\nOptional parameter.\nGet the registered OID.\nThe registered OID of the <code>SubjectPubKeyAlgorithm</code>.\nType of algorithm data INT | OID | Name\nPublic key algorithm data table.\nStatic reference to the <code>SubjectPubKeyAlgoData</code> lookup table.\nDefine static lookup for subject publickey table\nA struct of data that contains lookup table of integer to …\nReturns the argument unchanged.\nGet the <code>IntegerToOidTable</code>\nGet the OID from the int value.\nCalls <code>U::from(self)</code>.\nA struct that represents a table mapping integers to any …\nA struct represents a table of integer to OID.\nA trait that represents a table structure with key-value …\nAdd the key-value pair to the map table.\nAdd the key-value pair to the map table.\nAdd the key-value pair to the map table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the bimap of the map table.\nGet the bimap of the map table.\nGet the bimap of the map table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bimap table for bidirectional lookup where it map …\nCreate new instance of the map table.\nCreate new instance of <code>IntTable</code>.\nCreate new instance of <code>IntegerToOidTable</code>.\nA table of integer to OID, provide a bidirectional lookup.\nA struct represents a To Be Signed Certificate (TBS …\nGet the certificate type.\nCertificate type.\nGet the certificate serial number.\nSerial number of the certificate.\nGet the extensions.\nExtensions\nReturns the argument unchanged.\nGet the issuer signature algorithm.\nCalls <code>U::from(self)</code>.\nGet the issuer.\nIssuer\nGet the issuer signature algorithm.\nIssuer Signature Algorithm\nCreate a new instance of TBS Certificate. If issuer is not …\nGet the subject.\nSubject\nGet the subject public key.\nSubject Public Key value\nGet the subject public key algorithm.\nSubject Public Key Algorithm\nGet the validity not after.\nValidity not after.\nGet the validity not before.\nValidity not before.\nNo expiration date in seconds since the Unix epoch.\nA struct representing a time where it accept seconds since …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Time</code>.\nGet the u64 of <code>Time</code>.\nWrapper for decoding vector of C509 back to readable …\nWrapper for generate function.\nWrapper for verify function.")