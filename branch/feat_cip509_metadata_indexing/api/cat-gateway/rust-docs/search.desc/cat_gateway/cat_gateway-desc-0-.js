searchState.loadedDescShard("cat_gateway", 0, "Catalyst Data Gateway\nHermes binary build info\nLogic for orchestrating followers\nCLI interpreter for the service\nDatabase Interfaces\nSetup for logging for the service.\nMain entrypoint to the service\nCommand line and environment variable settings for the …\nFormatted hermes binary build info\nLog Build Info to our logs.\nThe range we generate random backoffs within given a base …\nHow long we wait between checks for connection to the …\nBlocks batch length that will trigger the blocks buffer to …\nData we return from a sync task.\nGet where this sync run actually needs to start from.\nDo the backoff delay processing.\nThe number of retries so far on this sync task.\nWhat blockchain are we syncing.\nConvert Params into the result of the sync.\nThe ending point of this sync.\nThe first block we successfully synced.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of blocks we successfully synced, in the last …\nThe last block we successfully synced.\nCreate a new <code>SyncParams</code>.\nIf the sync completed without error or not.\nThe number of retries so far on this sync task.\nConvert a result back into parameters for a retry.\nThe starting point of this sync.\nStart followers as per defined in the config\nStart syncing a particular network\nSync a portion of the blockchain. Set end to <code>TIP_POINT</code> to …\nThe number of blocks we successfully synced overall.\nBlock stream parsing and filtering utils\nAssets\nHash size\nParsed Assets\nStake credential hash from the certificate\nCorrect stake credential key in hex\nWitness pub key hashed with blake2b\nWitness pub key in hex\nAmount in lovelace\nAll policy assets\nExtract stake credentials from certificates. Stake …\nMatch hashed witness pub keys with hashed stake …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to generate the <code>blake2b_256</code> hash of a byte …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsset name\nParse child assets\nExtract assets\nPolicy identifier\nPolicy id\nEras before staking should be ignored\nSimple service CLI options\nBuild API docs of the service in the JSON format\nRun the service\nExecute the specified operation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCatalyst Election Database crate\nBlockchain Index Database\nBallot vote options per event query template\nBallot vote options per objective query template\nBallot vote options query template\nBallot vote plans query template\nDatabase version this crate matches. Must equal the last …\nIs Deep Query Analysis enabled or not?\nDelegations by event query template\nDelegator snapshot info by event query template\nDelegator snapshot info by last event query template\nFailed to get a DB Pool\nEvents query template\nPostgres Connection Manager DB Pool Instance\nEvent goals query template\nEvent details query template\n<code>EventDB</code> Errors\nThe Catalyst Event SQL Database\nObjectives query template\nProposals query template\nProposal details query template\nRating per review query template\nReview query template\nReview types query template\nSearch for events query template\nSearch for objectives query template\nSearch for proposals query template\nPostgres Connection Manager DB Pool\nTotal By Event Query template\nTotal By Last Event Query template\nTotal voting power by event query template\nTotal voting power by last event query template\nVoter By Event Query template\nVoter By Last Event Query template\nVoter Delegators List Query template\nVoting Groups query template\nBuild an order by clause\nBuild a where clause\nConstruct a count query\nConstruct a search query\nDatabase Errors\nEstablish a connection to the database, and check the …\nPrepend <code>EXPLAIN ANALYZE</code> to the query.\nPrepend <code>EXPLAIN ANALYZE</code> to the query, and commit the …\nPrepend <code>EXPLAIN ANALYZE</code> to the query, and rollback the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet ballot query\nGet delegator query\nGet event query\nGet event’s ballots query\nGet events query\nGet fund query\nGet objective’s ballots query\nGet objectives query\nGet proposal query\nGet proposals query\nGet review types query\nGet reviews query\nGet voter query\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if deep query inspection is enabled.\nLegacy event db queries and types\nModify the database.\nModify the deep query inspection setting.\nQuery the database.\nQuery the database for a single row.\nCheck if the schema is up-to-date.\nCheck the schema version. return the current schema …\nSearch query\nSearch for events\nSearch for objectives\nSearch for proposals\nSearch for a total.\nDB not found error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatabase Queries\nDB Types\nEvent Queries\nRegistration Queries\nSearch Queries\nThis whole module is deprecated, so don’t worry if its …\nBallot Queries\nObjective Queries\nProposal Queries\nReview Queries\nBallot types\nEvent Types\nObjective Types\nProposal Types\nRegistration Types\nReview Types\nSearch Queries\nThis whole module is deprecated, so don’t worry if its …\nVoting Status\nBallot\nBallot Type\nGroup Vote Plans\nObjective Ballots\nObjective Choices\nProposal Ballot\nVoting Plan\nBallot\nBallot\nBallots\nChain proposal index\nChain voteplan id\nChoice\nEncryption key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObjective ID\nProposal ID\nVote plans\nEvent\nEvent Details\nEvent Goal\nEvent ID\nEvent Registration\nEvent Schedule\nEvent Summary\nThreshold Staked ADA\nVoting Power Algorithm\nVoting Power Settings\nVoting Power Algorithm\n<code>proposal_assessment_qa_start</code>\nRegistration Deadline\nEvent details\nEnds\n<code>finalize_proposals</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGoals\nEvent ID\nGoal Index\n<code>insight_sharing</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>is_final</code>\nMaximum PCT\nMinimum ADA\nEvent name\nGoal Name\n<code>proposal_assessment</code>\n<code>proposal_submission</code>\nPurpose\n<code>refine_proposals</code>\n<code>reg_checked</code>\nRegistration\nSchedule\nStarts\nEvent summary\nRegistration Taken\ntallying start\ntallying end\nvoting start\nVoting Power\nObjective\nObjective Details\nObjective ID\nObjective Summary\nObjective Type\nReward Definition\nVoter Group\nCurrency\nDeleted\ndescription\nDescription\nObjective details\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVoter Group\nObjective Groups\nid\nObjective ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObjective Type\nReward\nObjective summary\nSupplemental data\nTitle\nValue\nVoting Token\nProposal\nProposal Details\nProposal ID\nProposal Summary\nProposer Details\nDeleted\nProposal details\nProposer email\nProposal files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunds requested\nProposal ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProposer name\nProposer payment key\nThe proposer\nSummary\nProposal summary\nSupplemental data\nTitle\nProposer URL\nProposal url\nDelegation\nDelegator\nMainnet prefix\nReward Address\nTestnet prefix\nVoter\nVoter Group Id\nVoter Info\nAs at\nAs at\nvalidation according CIP-19\nDelegations\nDelegations count\nDelegations power\nDelegator addresses\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVoting group\nVoter info\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs final\nIs final\nLast updated\nLast updated\nCreate a new reward address\nRaw power\nReward address\nReward address\nReward payable\nTotal power\nValue\nVoting group\nVoting key\nVoting power\nVoting power saturation\nWeight\nAdvisor Review\nAn individual rating\nThe Review Type\nAssessors ID\nReview Type Description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReview Type group\nReview Type ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReview Type map of values\nReview Type maximum\nReview Type minimum\nReview Type Name\nReview Type note\nNote\nRatings\nReview Type ID\nScore given\nSearch for the Author\nSearch for the Description\nSearch for events\nEvents found\nSearch for the Funds\nSearch for objectives\nObjectives found\nSearch for proposals\nProposals found\nThe column to search\nThe constraint to the search\nResults to be ordered\nThe search query\nFull search results\nThe Table to search\nSearch for the Title\nSearch for the Type\nThe Value results\nColumn to search\nColumn to order\nAscending or descending\nConstraints to filter the search\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to order the results\nResults\nValue to search\nTable to search\nTotal number of results\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSchema in database does not match schema supported by the …\n<code>select_max_version.sql</code>\nThe expected DB schema version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current DB schema version.\nIndex a block Primary Data Indexing - Upsert operations\nPre-prepare queries for a given session.\nIndex Schema\nSession creation and storage\nIndex certs found in a transaction.\nIndex CIP-36 Registrations.\nAdd all data needed from the block into the indexes.\nIndex Role-Based Access Control (RBAC) Registration.\nInsert TXI Index Data Queries.\nInsert TXO Indexed Data Queries.\nInsert Cert Queries\nTXI by Txn hash Index\nInsert TXI Query and Parameters\nIs the Certificate Deregistered?\nExecute the Certificate Indexing Queries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the certificates in a transaction.\nIndex an Alonzo Era certificate into the database.\nIndex a certificate from a conway transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new data set for Cert Insert Query Batch.\nCreate a new Insert Query.\nPool Delegation Address\nPrepare Batch of Insert TXI Index Data Queries\nPrepare Batch of Insert TXI Index Data Queries\nIs the Certificate Registered?\nIs the stake address a script or not.\nSlot Number the cert is in.\nGet the stake address for a hash, return an empty address …\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nStake key hash\nStake Registration Data captured during indexing.\nTransaction Index.\nInsert CIP-36 Registration Queries\nExecute the CIP-36 Registration Indexing Queries.\nStake Registration Data captured during indexing.\nReturns the argument unchanged.\nIndex the CIP-36 registrations in a transaction.\nInsert CIP36 Registration Query\nInsert CIP36 Registration Query\nInsert CIP36 Registration Query (Invalid Records)\nCalls <code>U::from(self)</code>.\nStake Registration Data captured during indexing.\nCreate new data set for CIP-36 Registrations Insert Query …\nPrepare Batch of Insert Cip36 Registration Data Queries\nStake Registration Data captured during indexing.\nIndex Registration by Stake Address\nInsert CIP-36 Registration Query Parameters\nIs the Registration CIP36 format, or CIP15\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nCreate a new Insert Query.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepare Batch of Insert CIP-36 Registration Index Data …\nRaw nonce value.\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nVoting Public Key\nIndex Registration by Vote Key\nInsert CIP-36 Registration Invalid Query Parameters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Insert Query.\nPrepare Batch of Insert CIP-36 Registration Index Data …\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nIs the registration Valid or not.\nVoting Public Key\nIndex Registration by Stake Address (Invalid Registrations)\nInsert CIP-36 Registration Invalid Query Parameters\nStrict Catalyst validated.\nList of serialization errors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nCreate a new Insert Query.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepare Batch of Insert CIP-36 Registration Index Data …\nRaw nonce value.\nSignature validates.\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nVoting Public Key\nIndex RBAC 509 Registration Query Parameters\nExecute the CIP-36 Registration Indexing Queries.\nReturns the argument unchanged.\nIndex the CIP-36 registrations in a transaction.\nInsert RBAC 509 Indexed D\nCalls <code>U::from(self)</code>.\nCreate new data set for CIP-36 Registrations Insert Query …\nPrepare Batch of Insert Cip36 Registration Data Queries\nRBAC Registration Data captured during indexing.\nRBAC Registration Indexing query\nInsert RBAC Registration Query Parameters\nChain Root Hash. 32 bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of RBAC Registration Index Data Queries\nHash of Previous Transaction. Is <code>None</code> for the first …\nPurpose.<code>UUIDv4</code>. 16 bytes.\nBlock Slot Number\nTransaction ID Hash. 32 bytes.\nTransaction Offset inside the block.\nTXI by Txn hash Index\nInsert TXI Query and Parameters\nInsert TXI Query and Parameters\nExecute the Certificate Indexing Queries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the transaction Inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nCreate a new record for this transaction.\nPrepare Batch of Insert TXI Index Data Queries\nBlock Slot Number when spend occurred.\nTransaction Input Data to be inserted.\nSpent Transactions Hash\nTXO Index spent.\nThis is used to indicate that there is no stake address.\nInsert TXO Query and Parameters\nIndex the transaction Inputs.\nExtracts a stake address from a TXO if possible. Returns …\nReturns the argument unchanged.\nIndex the transaction Inputs.\nInsert TXO Indexed Data Queries.\nInsert TXO Native Assets into the DB.\nInsert Unstaked TXOs into the DB.\nInsert Unstaked TXO Native Assets into the DB.\nCalls <code>U::from(self)</code>.\nCreate a new Insert TXO Query Batch\nPrepare Batch of Insert TXI Index Data Queries\nStaked TXO Data Parameters\nStaked TXO Asset Data Parameters\nUnstaked TXO Data Parameters\nUnstaked TXO Asset Data Parameters\nTXO by Stake Address Indexing query\nInsert TXO Query Parameters (Superset of data to support …\nActual full TXO Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nStake Address - Binary 28 bytes. 0 bytes = not staked.\nTransaction Offset inside the block.\nTransactions hash.\nTransaction Output Offset inside the transaction.\nActual TXO Value in lovelace\nTXO Asset by Stake Address Indexing Query\nInsert TXO Asset Query Parameters (Superset of data to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPolicy hash of the asset\nPolicy name of the asset\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nStake Address - Binary 28 bytes. 0 bytes = not staked.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nValue of the asset\nUnstaked TXO by Stake Address Indexing query\nInsert TXO Unstaked Query Parameters (Superset of data to …\nActual full TXO Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nTransaction Offset inside the block.\nTransactions hash.\nTransaction Output Offset inside the transaction.\nActual TXO Value in lovelace\nUnstaked TXO Asset by Stake Address Indexing Query\nInsert TXO Asset Query Parameters (Superset of data to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPolicy hash of the asset\nPolicy name of the asset\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nTransaction Offset inside the block.\nTransactions hash.\nTransaction Output Offset inside the transaction.\nValue of the asset\nCIP 36 Registration for stake address Insert query.\nCIP 36 Registration Error Insert query.\nCIP 36 Registration Insert Query.\nContains the error value\nContains the error value\nAn individual query response that can fail\nA set of query responses that can fail.\nA set of query responses from tasks that can fail.\nGet TXI by transaction hash query.\nGet TXO by stake address query.\nContains the success value\nContains the success value\nAll prepared queries for a session.\nAll Prepared Queries that we know about.\nAll prepared SELECT query statements.\nBatches of different sizes, prepared and ready for use.\nStake Registration Insert query.\nTXI Insert query.\nTXO Insert query.\nTXO Asset Insert query.\nTXO spent Update query.\nUnstaked TXO Insert query.\nUnstaked TXO Asset Insert query.\nCIP36 Registration errors.\nCIP36 Registration for Stake Address Insert query.\nCIP36 Registrations.\nExecute a Batch query with the given parameters.\nExecutes a select query with the given parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new prepared queries for a given session.\nPrepares a statement.\nPrepares all permutations of the batch from 1 to max. It …\nTXI Insert query.\nStaked ADA related queries.\nGet TXI by transaction hash.\nTXI Insert query.\nTXO Asset Insert query.\nGet TXO by stake address query.\nTXO Insert query.\nUpdate TXO spent query.\nUnstaked TXO Asset Insert query.\nUnstaked TXO Insert query.\nGet TXI by Transaction hash query\nGet the TXO by Stake Address\nUpdate the TXO Spent column to optimize future queries.\nGet TXI query string.\nGet TXI query.\nGet TXI query parameters.\nExecutes a get txi by transaction hashes query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GetTxiByTxnHashesQueryParams</code>\nPrepares a get txi query.\nGet TXI Query Result\nTransaction hashes.\nGet TXI query result.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTXI slot number.\nTXI transaction hash.\nTXI original TXO index.\nGet txo by stake address query string.\nGet staked ADA query.\nGet txo by stake address query parameters.\nExecutes a get txo by stake address query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GetTxoByStakeAddressQueryParams</code>.\nPrepares a get txo by stake address query.\nGet TXO by stake address query row result\nMax slot num.\nStake address.\nGet txo by stake address query result.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTXO transaction slot number.\nTXO spent slot.\nTXO transaction index within the slot.\nTXO transaction hash.\nTXO index.\nTXO value.\nUpdate TXO spent query string.\nUpdate TXO spent query.\nUpdate TXO spent query params.\nExecutes a update txo spent query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare a batch of update TXO spent queries.\nTXO slot number.\nTXO spent slot number.\nTXO stake address.\nTXO transaction index within the slot.\nTXO index.\nKeyspace Create (Templated)\nAll Schema Creation Statements\nThe version of the Schema we are using. Must be …\nCreate the namespace we will use for this session Ok to …\nCreate the Schema on the connected Cassandra DB\nGet the namespace for a particular db configuration\nAll interaction with cassandra goes through this struct.\nConfiguration Choices for compression\nDisable TLS.\nLZ4 link data compression.\nNo compression.\nPersistent DB Session.\nSnappy link data compression.\nConfiguration Choices for TLS.\nDisables verification of the peer’s certificate.\nVolatile DB Session.\nVerifies that the peer’s certificate is trusted.\nConfiguration for this session.\nExecute a Batch query with the given parameters.\nExecutes a select query with the given parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the session needed to perform a query.\nInitialise the Cassandra Cluster Connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck to see if the Cassandra Indexing DB is ready for use\nCreate a new execution profile based on the given …\nConstruct a session based on the given configuration.\nIs the session to the persistent or volatile DB?\nAll prepared queries we can use on this session.\nContinuously try and init the DB, if it fails, backoff.\nThe actual session.\nWait for the Cassandra Indexing DB to be ready before …\nDebug messages\nErrors\nDefault Span Guard for the Service.\nInformational Messages\nLogger Handle for the Service.\nDefault log level\nAll valid logging levels\nHandle to our Logger\nDefault Span Guard for the Service.\nWarnings\nReturns the argument unchanged.\nInitialize the tracing subscriber\nCalls <code>U::from(self)</code>.\nModify the logger level setting. This will reload the …\nSet the default fields in a log, using a global span.\nCatalyst Gateway API Definition\nDefine common and reusable api components here. these …\nStoplight Elements <code>OpenAPI</code> UI\nPoem Service for cat-gateway service endpoints.\nRun Catalyst Gateway Service.\n<code>API</code> Utility operations\nA long description of the API. Markdown is supported\nThe name of the API\nThe version of the API\nGet the terms of service for the API\nAuth\nCardano API endpoints\nGet the contact details for inquiring about the API\nGet the license details for the API\nHealth Endpoints\nLegacy endpoints\nCreate the <code>OpenAPI</code> definition\nCat security scheme\nToken encoding decoding logic\nCached auth tokens\nMocked Valid certificates TODO: the following is temporary …\nAuth token security scheme Add to endpoint params e.g …\nDecoded token consists of a Kid, Ulid and Signature\nAuth token in the form of catv1..\nWhen added to an endpoint, this hook is called per request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey ID - Blake2b-128 hash of the Role 0 Certificate …\nEd25519 signatures are (64 bytes)\nIdentifier for this token, encodes both the time the token …\nDecode base64 cbor encoded auth token into constituent …\nThe Encoded Binary Auth Token is a [CBOR sequence] that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCardano Follower API Endpoints\nImplementation of the GET <code>/date_time_to_slot_number</code> …\nGet Cardano slot info to the provided date-time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of the GET <code>/registration</code> endpoint\nGet registration info.\nImplementation of the GET <code>/staked_ada</code> endpoint\nGet staked ada amount.\nImplementation of the GET <code>/sync_state</code> endpoint\nGet Cardano follower’s sync state.\nCardano Specific Types\nAll responses.\nError responses\nReturns the slot info.\nEndpoint responses.\nProvided responses\nGET <code>/date_time_to_slot_number</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses\nError responses\nNo valid registration found for the provided stake address …\nThe registration information for the stake address queried.\nEndpoint responses\nProvided responses\nGET <code>/registration</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nThe queried stake address was not found at the requested …\nThe amount of ADA staked by the queried stake address, as …\nEndpoint responses.\nTXO information used when calculating a user’s stake …\nProvided responses\nBuilds an instance of <code>StakeInfo</code> based on the TXOs given.\nCalculate the stake info for a given stake address.\nChecks if the given TXOs were spent and mark then as such.\nGET <code>/staked_ada</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a map of TXO infos by transaction hash for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTXO transaction slot number.\nWhether the TXO was spent.\nTXO transaction index within the slot.\nTXO index.\nSets TXOs as spent in the database if they are marked as …\nTXO value.\nAll responses.\nError responses\nThe network is unknown. Catalyst gateway is not syncing …\nThe synchronisation state of the blockchain with the …\nEndpoint responses.\nProvided responses\nGET <code>/sync_state</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlock time\nDelegated voting\nDelegated voting\nDirect voting\nDirect voting\nMetadata 61284\nNonce\nPayment address\nPub key\nPublic voting key\nSlot\nStake amount.\nStake credential\nTransaction id\nThe source of voting power for a given registration\nGet bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet credentials, a blake2b 28 bytes hash of the pub key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHealth API Endpoints\nReturns the argument unchanged.\nOptions for service inspection.\nImplementation of the GET /health/inspection endpoint\nCalls <code>U::from(self)</code>.\nImplementation of the GET /health/live endpoint\nService Live\nImplementation of the GET /health/ready endpoint\nService Ready\nImplementation of the GET /health/started endpoint\nService Started\nAll responses.\nDebug messages\n<code>DeepQueryInspectionFlag</code> Open API definition.\nDisable deep query inspection\nEnable deep query inspection\nError responses\nErrors\nInformational Messages\n<code>LogLevel</code> Open API definition.\nService is Started and can serve requests.\nEndpoint responses.\nWarnings\nProvided responses\nGET /health/inspection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nFlag to determine if the service has started\nService is OK and can keep running.\nEndpoint responses.\nService is possibly not running reliably.\nProvided responses\nGET /health/live\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the started flag\nSet the started flag to <code>true</code>\nAll responses.\nError responses\nService is Started and can serve requests.\nEndpoint responses.\nService is not ready, do not send other requests.\nProvided responses\nGET /health/ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nFlag to determine if the service has started\nService is Started and can serve requests.\nEndpoint responses.\nService is not ready, do not send other requests.\nProvided responses\nGET /health/started\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the started flag\nSet the started flag to <code>true</code>\nLegacy endpoints API\nRegistration Endpoints\n<code>v0</code> Endpoints\n<code>v1</code> Endpoints\nAll responses\nError responses\nVoter’s registration info\nRegistration API Endpoints\nEndpoint responses\nProvided responses\nReturns the argument unchanged.\nReturns the argument unchanged.\nVoter’s info\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>v0</code> API Endpoints\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of the POST /message endpoint\nPosts a signed transaction.\nImplementation of the GET /vote/active/plans endpoint\nGet all active vote plans endpoint.\nAll responses\nError responses\nContains information about accepted and rejected fragments.\nEndpoint responses\nProvided responses\nPOST /message\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses\nError responses\nJSON array with the list of vote plans with their …\nEndpoint responses\nProvided responses\nGET /v0/vote/active/plans\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nV1 API Endpoints\nImplementation of the …\nImplementation of the GET /fragments endpoint\nProcess fragments\nImplementation of the GET /fragments/statuses endpoint\nGet Fragment Statuses\nReturns the argument unchanged.\nGet Account Votes\nCalls <code>U::from(self)</code>.\nAll responses\nError responses\nJSON array of the number of voted proposals in a plan.\nEndpoint responses\nProvided responses\nGET /v1/votes/plans/account-votes/:account_id\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses\nError responses\nFragments processing summary\nEndpoint responses\nProvided responses\nGET /fragments\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses\nError responses\nStatuses of the fragments by id.\nEndpoint responses\nProvided responses\nGET /fragments/statuses\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains common and re-usable objects.\nGeneric Responses are all contained in their own modules, …\n<code>OpenAPI</code> Tags we need to classify the endpoints.\nDefines API schemas of Cardano types.\nLegacy objects\nDefine <code>ServerError</code> type.\nDefine <code>ValidationError</code> type.\nDefines API schema of Cardano hash type.\nDefines API schemas of Cardano network types.\nDefines API schemas of CIP-36 registration type.\nDefines API schemas of Cardano Slot info types.\nDefines API schemas of Cardano address types.\nDefines API schemas of stake amount type.\nDefines API schemas of Cardano sync state types.\nCardano Blake2b256 hash encoded in hex.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>CardanoStakeAddress</code> schema definition.\nCardano mainnet.\nCardano network type.\nCardano preprod.\nCardano preview.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ndelegations\nDelegation type\nRepresents a list of delegations\ndirect voting key\nDirect voter type\nUser’s CIP-36 registration info.\nVoting key type\nA list of delegations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RegistrationInfo</code>\nRegistration nonce.\nDelegation power assigned to the voting key.\nRewards address.\nTransaction hash in which the CIP-36 registration is made.\nVoting info.\nVoting key.\nVoting key.\nCardano block’s slot data.\nCardano follower’s slot info.\nBlock hash.\nBlock time.\nCurrent slot info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNext slot info.\nPrevious slot info.\nSlot number.\nCardano stake address of the user. Should a valid Bech32 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>CardanoStakeAddress</code> schema definition.\nFull user’s cardano stake info.\nUser’s cardano stake info.\nTotal stake amount.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPersistent stake information.\nBlock’s slot number which contains the latest unspent …\nVolatile stake information.\nCardano follower’s sync state info.\nBlock hash.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nlast updated time.\nSlot number.\nDefine the Account Votes.\nDefines API schemas of block related types.\nDefine the Public Key used by a Delegate.\nDefine the ID of an Event\nDefines API schemas of fragment status types.\nDefines API schemas for fragment batch types.\nDefine information about fragments that were processed.\nDefines API schemas for hash types.\nDefine the Stake Public Key type\nDefine the Vote Plan\nDefines the allowable groups for a Voter\nDefine individual Voter Information\nDefine information about the Voters Registration.\nDefine the Voters Public Key\nUnique ID of a user account.\nIndexes of a proposal that the account has voted for …\nUnique ID of a vote plan.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe hex-encoded ID of the vote plan.\nArray of the proposal numbers voted for by the account ID …\nBlock time defined as the pair (epoch, slot).\nEpoch number.\nSlot number.\nBlock’s epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlock’s slot number.\nDelegate Public Key\nDelegate Public Key in hex format\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Numeric ID of a Voting Event\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDEPRECATED: Possible fragment statuses.\nFragment was included in a block.\nFragment is pending inclusion in a block.\nFragment was rejected.\nDEPRECATED: Fragment is included in a block.\nDEPRECATED: Fragment is pending.\nDEPRECATED: Fragment was rejected.\nHash of the block the fragment was included in.\nBlock date at which the fragment was included in a block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReason the fragment was rejected.\nHex-encoded fragment’s bytes.\nBatch of hex-encoded fragments.\nFragments are processed sequentially. If this is true, …\nArray of hex-encoded fragments bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis fragment was already processed by the node.\nUnique ID of a fragment.\nThis fragment failed validation.\nInformation about whether a message was accepted or …\nOne of the mempools rejected this fragment due to reaching …\nOne of the previous fragments was rejected and <code>fail_fast</code> …\nThe reason for which a fragment was rejected.\nInformation about a rejected fragment.\nIDs of accepted fragments.\nThe ID of the rejected fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of the pool that caused this error.\nThe reason why this fragment was rejected.\nDetailed information about rejected fragments.\nBlake2b256 hash wrapper.\nReturns the argument unchanged.\nBlake2b256 hash encoded in hex.\nCalls <code>U::from(self)</code>.\nStake Public Key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVoting Plan\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVoting token identifier\nDirect voter.\nDelegated Representative.\nVoter Group ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVoter Info\nNumber of registration which delegated to this voter.\nTotal voting power delegated to this voter. This is not …\nList of stake public key addresses which delegated to this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVoter’s voting group.\nVoter’s voting power. This is the true voting power, …\nVoting power’s share of the total voting power. Can be …\nVoter’s registration info.\nDate and time the latest snapshot represents.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>True</code> - this is the final snapshot which will be used for …\nDate and time for the latest update to this snapshot …\nVoter’s information.\nVoting Public Key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nServer Error response to a Bad request.\nExample for the Server Error Payload.\nReturns the argument unchanged.\nGet the id of this Server Error.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nA URL to report an issue.\n<em>Optional</em> SHORT Error message. Will not contain sensitive …\nCreate a new Server Error Response Payload.\nCommon error message type. It has failed to pass …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError message\nCreate a new <code>ValidationError</code>\nContent validation error.\nError responses\nDefault error responses\n<code>FilteredByStatusCodeResponse</code> is used to filter out …\nInternal Server Error.\nService Unavailable\nProvided responses\nCombine provided responses type with the default responses …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a 5xx or 4xx response. Returns a Server Error, a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>OpenAPI</code> Tags\nCardano Endpoints\nFragment endpoints\nHealth Endpoints\nInformation relating to Voter Registration, Delegations …\nAPI Version 0 Endpoints\nAPI Version 1 Endpoints\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEmbed static files.\nCreate the documentation pages where the <code>OpenAPI</code> docs can …\nGet an endpoint for favicon.ico\nReturns the argument unchanged.\nGet an embedded file and its metadata.\nCalls <code>U::from(self)</code>.\nIterates over the file paths in the folder.\nProvides a <code>OpenAPI</code> UI using the Stoplight Elements …\nStoplight Elements UI CSS\nStoplight Elements UI JavaScript\nStoplight Elements UI Template\nCreate an endpoint to return the Stoplight documentation …\nCreate the HTML from the Stoplight template above and our …\nGet the API docs as a string in the JSON format.\nThis exists to allow us to add extra routes to the service …\nRun the Poem Service\nProvided network type does not match stake address\nNetwork validation error\nUnknown address network type\nHandle catching panics created by endpoints, logging them …\nCheck the provided network type with the encoded inside …\nSimple general purpose utility functions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCustom POEM Middleware for this service.\nNetworking utility functions.\nConvert bytes to hex string with the <code>0x</code> prefix\nCustomized Panic handler. Catches all panics, and turns …\nReturns the argument unchanged.\nHandle a panic. Log the panic and respond with a 500 with …\nCalls <code>U::from(self)</code>.\nSets a custom panic hook to capture the Backtrace and …\nConvert an <code>&lt;T&gt;</code> to <code>&lt;R&gt;</code>. (saturate if out of range.) Note …\nMiddleware to verify the status of the last DB schema …\nFull Tracing and metrics middleware.\nA middleware that raises an error  with <code>ServiceUnavailable</code> …\nThe new endpoint type generated by the …\nEndpoint wrapped by the middleware.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function that wraps an endpoint with the …\nLabels for the client metrics\nClient Request Count histogram.\nHTTP Request count histogram.\nHTTP Request CPU Time histogram.\nHTTP Request duration histogram.\nLabels for the metrics\nData we collected about the response\nMiddleware for <code>tracing</code>.\nEndpoint for <code>Tracing</code> middleware.\nAdd all interesting headers to the correct fields in a …\nGiven a Clients IP Address, return the anonymized version …\nGet an anonymized client ID from the request.\nCPU time of the request\nDuration of the request\nEndpoint name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize Prometheus metrics.\nInner endpoint\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a span from the request\nCreate a new <code>ResponseData</code> set from the response. In the …\nStatus code returned\nGet the public IPv4 Address of the Service.\nGet the public IPv4 Address of the Service.\nDefault address to start service on.\nDefault <code>API_HOST_NAME/S</code> used in production.  This can be a …\nDefault <code>API_URL_PREFIX</code> used in development.\nMaximum possible batch size.\nDefault maximum batch size. This comes from: …\nMinimum possible batch size.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nDefault chain to follow.\nDefault number of sync tasks (must be in the range 1 to …\nDefault <code>CHECK_CONFIG_TICK</code> used in development.\nDefault <code>CLIENT_ID_KEY</code> used in development.\nConfiguration for an individual cassandra cluster.\nConfiguration for the chain follower.\nSettings specifies <code>OpenAPI</code> docs generation.\nHandle to the mithril sync thread. One for each Network …\nDefault Event DB URL.\nAll the <code>EnvVars</code> used by the service.\nDefault Github issue template to use\nDefault Github repo name\nDefault Github repo owner\nThe env var is plain and should not be redacted.\nThe env var is redacted and should be redacted.\nAll Settings/Options for the Service.\nSettings for the application.\nOur Global Settings for this running service.\nAn environment variable read as a string.\nErgonomic way of specifying if a env var needs to be …\nServer binding address\nGet a list of all host names to serve the API on.\nA List of servers to provide\nThe API Url prefix\nThe base path the API is served at.\nGet the read env var as a str.\nGet the read env var as a str.\nThe socket address we are bound to.\nHash the Public IPv4 and IPv6 address of the machine, and …\nGet the Persistent &amp; Volatile Cassandra DB config for this …\nThe Config of the Persistent Cassandra DB.\nThe Config of the Volatile Cassandra DB.\nThe Blockchain we sync from.\nThe Chain Follower configuration\nTick every N seconds until config exists in db\nThe Key used to anonymize client connections in the logs.\nThe client id key used to anonymize client connections.\nCompression to use.\nDocs settings.\nThe Address of the Event DB.\nGet the current Event DB settings for this service.\nThe Address of the Event DB.\nUrl to the postgres event db\nThe <code>UserName</code> to use for the Event DB.\nGet the configuration of the chain follower.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a github issue url with a given title\nThe github issue template to use\nThe github repo name\nThe github repo owner\nInitialize the settings data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog the configuration of this Cassandra DB\nLog the configuration of this Chain Follower\nLogging level\nMaximum Configured Batch size.\nThe Namespace of Cassandra DB.\nRead the env var from the environment.\nCreate a config for a cassandra cluster, identified by a …\nCreate a config for a cassandra cluster, identified by a …\nConvert an Envvar into the required Enum Type.\nConvert an Envvar into an integer in the bounded range.\nNew Env Var that is optional.\nThe output path to the generated docs file, if omitted …\nThe Password to use for the Cassandra DB..\nWhether the env var is displayed redacted or not.\nGet the server name to be used in the <code>Server</code> object of the …\nServer name\nThe Service UUID\nThe Service ID used to anonymize client connections.\nTransform a string list of host names into a vec of host …\nThe maximum number of sync tasks.\nUse TLS for the connection?\nUse TLS for the connection?\nThe Address/s of the DB.\nThe <code>UserName</code> to use for the Cassandra DB.\nValidate env vars in ways we couldn’t when they were …\nValue of the env var.")