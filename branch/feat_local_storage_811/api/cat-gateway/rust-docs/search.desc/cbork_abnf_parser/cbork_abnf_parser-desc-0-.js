searchState.loadedDescShard("cbork_abnf_parser", 0, "A parser for ABNF, utilized for parsing in accordance with …\nRepresents an error that may occur during ABNF parsing.\nAbstract Syntax Tree (AST) representing parsed ABNF syntax.\nA trait with a single method that parses strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>&amp;str</code> starting from <code>rule</code>.\nParses the input string containing ABNF (Augmented …\nEnd-of-input\nA trait with a single method that parses strings.\nABNF Grammar adapted from RFC5234 Section 4 and Appendix B …\nvisible (printing) characters\nseries of concatenated bit values or single ONEOF range\ncomment or newline\nquoted string of SP and VCHAR without DQUOTE\nbasic rules definition and incremental alternatives\ncorrection: https://www.rfc-editor.org/errata/eid2968\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>&amp;str</code> starting from <code>rule</code>.\nbracketed string of SP and VCHAR without “&gt;” prose …\ncontinues if next line starts with white space\nTest Expression for the <code>COMMENT</code> Rule.\nEnd-of-input\nA trait with a single method that parses strings.\nABNF Grammar adapted from RFC5234 Section 4 and Appendix B …\nvisible (printing) characters\nTest expression to the <code>VCHAR</code> Rule.\nTest Expression for the <code>WHITESPACE</code> Rule.\nTest Expression for the <code>alternation</code> Rule.\nseries of concatenated bit values or single ONEOF range\nTest Expression for the <code>bin_val</code> Rule.\ncomment or newline\nTest Expression for the <code>c_nl</code> Rule.\nTest Expression for the <code>c_wsp</code> Rule.\nquoted string of SP and VCHAR without DQUOTE\nTest Expression for the <code>char_val</code> Rule.\nTest Expression for the <code>concatenation</code> Rule.\nTest Expression for the <code>dec_val</code> Rule.\nbasic rules definition and incremental alternatives\nTest Expression for the <code>defined_as</code> Rule.\nTest Expression for the <code>element</code> Rule.\ncorrection: https://www.rfc-editor.org/errata/eid2968\nTest Expression for the <code>elements</code> Rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTest Expression for the <code>group</code> Rule.\nTest Expression for the <code>hex_val</code> Rule.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest Expression for the <code>num_val</code> Rule.\nTest Expression for the <code>option</code> Rule.\nParses a <code>&amp;str</code> starting from <code>rule</code>.\nbracketed string of SP and VCHAR without “&gt;” prose …\nTest Expression for the <code>prose_val</code> Rule.\nTest Expression for the <code>repeat</code> Rule.\nTest Expression for the <code>repetition</code> Rule.\ncontinues if next line starts with white space\nTest Expression for the <code>rule</code> Rule.\nTest Expression for the <code>rulename</code> Rule.")