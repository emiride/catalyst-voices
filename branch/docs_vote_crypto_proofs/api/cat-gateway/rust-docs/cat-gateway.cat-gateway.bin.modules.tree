
crate cat_gateway
├── mod build_info: pub(crate)
├── mod cardano: pub(crate)
│   ├── struct SyncParams: pub(self)
│   └── mod util: pub(crate)
│       ├── struct Asset: pub
│       ├── struct PolicyAsset: pub
│       ├── type StakeCredentialHash: pub
│       ├── type StakeCredentialKey: pub
│       ├── type WitnessHash: pub
│       └── type WitnessPubKey: pub
├── mod cli: pub(crate)
│   └── enum Cli: pub(crate)
├── mod db: pub(crate)
│   ├── mod event: pub(crate)
│   │   ├── enum Error: pub(crate)
│   │   ├── struct EventDB: pub(crate)
│   │   ├── type SqlDbPool: pub(self)
│   │   ├── mod error: pub(crate)
│   │   │   └── struct NotFoundError: pub(crate)
│   │   ├── mod legacy: pub(crate)
│   │   │   ├── mod queries: pub(crate)
│   │   │   │   ├── mod event: pub(crate)
│   │   │   │   │   ├── mod ballot: pub(crate)
│   │   │   │   │   ├── mod objective: pub(crate)
│   │   │   │   │   ├── mod proposal: pub(crate)
│   │   │   │   │   └── mod review: pub(crate)
│   │   │   │   ├── mod registration: pub(crate)
│   │   │   │   ├── mod search: pub(crate)
│   │   │   │   └── mod vit_ss: pub(crate)
│   │   │   │       └── mod fund: pub(crate)
│   │   │   └── mod types: pub(crate)
│   │   │       ├── mod ballot: pub(crate)
│   │   │       │   ├── struct Ballot: pub(crate)
│   │   │       │   ├── struct BallotType: pub(crate)
│   │   │       │   ├── struct GroupVotePlans: pub(crate)
│   │   │       │   ├── struct ObjectiveBallots: pub(crate)
│   │   │       │   ├── struct ObjectiveChoices: pub(crate)
│   │   │       │   ├── struct ProposalBallot: pub(crate)
│   │   │       │   └── struct VotePlan: pub(crate)
│   │   │       ├── mod event: pub(crate)
│   │   │       │   ├── struct Event: pub(crate)
│   │   │       │   ├── struct EventDetails: pub(crate)
│   │   │       │   ├── struct EventGoal: pub(crate)
│   │   │       │   ├── struct EventId: pub(crate)
│   │   │       │   ├── struct EventRegistration: pub(crate)
│   │   │       │   ├── struct EventSchedule: pub(crate)
│   │   │       │   ├── struct EventSummary: pub(crate)
│   │   │       │   ├── enum VotingPowerAlgorithm: pub(crate)
│   │   │       │   └── struct VotingPowerSettings: pub(crate)
│   │   │       ├── mod objective: pub(crate)
│   │   │       │   ├── struct Objective: pub(crate)
│   │   │       │   ├── struct ObjectiveDetails: pub(crate)
│   │   │       │   ├── struct ObjectiveId: pub(crate)
│   │   │       │   ├── struct ObjectiveSummary: pub(crate)
│   │   │       │   ├── struct ObjectiveType: pub(crate)
│   │   │       │   ├── struct RewardDefinition: pub(crate)
│   │   │       │   └── struct VoterGroup: pub(crate)
│   │   │       ├── mod proposal: pub(crate)
│   │   │       │   ├── struct Proposal: pub(crate)
│   │   │       │   ├── struct ProposalDetails: pub(crate)
│   │   │       │   ├── struct ProposalId: pub(crate)
│   │   │       │   ├── struct ProposalSummary: pub(crate)
│   │   │       │   └── struct ProposerDetails: pub(crate)
│   │   │       ├── mod registration: pub(crate)
│   │   │       │   ├── struct Delegation: pub(crate)
│   │   │       │   ├── struct Delegator: pub(crate)
│   │   │       │   ├── struct RewardAddress: pub(crate)
│   │   │       │   ├── struct Voter: pub(crate)
│   │   │       │   ├── struct VoterGroupId: pub(crate)
│   │   │       │   └── struct VoterInfo: pub(crate)
│   │   │       ├── mod review: pub(crate)
│   │   │       │   ├── struct AdvisorReview: pub(crate)
│   │   │       │   ├── struct Rating: pub(crate)
│   │   │       │   └── struct ReviewType: pub(crate)
│   │   │       ├── mod search: pub(crate)
│   │   │       │   ├── enum SearchColumn: pub(crate)
│   │   │       │   ├── struct SearchConstraint: pub(crate)
│   │   │       │   ├── struct SearchOrderBy: pub(crate)
│   │   │       │   ├── struct SearchQuery: pub(crate)
│   │   │       │   ├── struct SearchResult: pub(crate)
│   │   │       │   ├── enum SearchTable: pub(crate)
│   │   │       │   └── enum ValueResults: pub(crate)
│   │   │       ├── mod vit_ss: pub(crate)
│   │   │       │   ├── mod challenge: pub(crate)
│   │   │       │   │   ├── struct Challenge: pub(crate)
│   │   │       │   │   └── struct ChallengeHighlights: pub(crate)
│   │   │       │   ├── mod fund: pub(crate)
│   │   │       │   │   ├── struct Fund: pub(crate)
│   │   │       │   │   ├── struct FundNextInfo: pub(crate)
│   │   │       │   │   ├── struct FundStageDates: pub(crate)
│   │   │       │   │   └── struct FundWithNext: pub(crate)
│   │   │       │   ├── mod goal: pub(crate)
│   │   │       │   │   └── struct Goal: pub(crate)
│   │   │       │   ├── mod group: pub(crate)
│   │   │       │   │   └── struct Group: pub(crate)
│   │   │       │   └── mod vote_plan: pub(crate)
│   │   │       │       └── struct Voteplan: pub(crate)
│   │   │       └── mod voting_status: pub(crate)
│   │   └── mod schema_check: pub(crate)
│   │       └── struct MismatchedSchemaError: pub(crate)
│   └── mod index: pub(crate)
│       ├── mod block: pub(crate)
│       │   ├── mod certs: pub(crate)
│       │   │   ├── struct CertInsertQuery: pub(crate)
│       │   │   └── struct StakeRegistrationInsertQuery: pub(crate)
│       │   ├── mod cip36: pub(crate)
│       │   │   ├── struct Cip36InsertQuery: pub(crate)
│       │   │   ├── mod insert_cip36: pub(self)
│       │   │   │   └── struct Params: pub(super)
│       │   │   ├── mod insert_cip36_for_vote_key: pub(self)
│       │   │   │   └── struct Params: pub(super)
│       │   │   └── mod insert_cip36_invalid: pub(self)
│       │   │       └── struct Params: pub(super)
│       │   ├── mod txi: pub(crate)
│       │   │   ├── struct TxiInsertParams: pub(crate)
│       │   │   └── struct TxiInsertQuery: pub(crate)
│       │   └── mod txo: pub(crate)
│       │       ├── struct TxoInsertQuery: pub(crate)
│       │       ├── mod insert_txo: pub(self)
│       │       │   └── struct Params: pub(super)
│       │       ├── mod insert_txo_asset: pub(self)
│       │       │   └── struct Params: pub(super)
│       │       ├── mod insert_unstaked_txo: pub(self)
│       │       │   └── struct Params: pub(super)
│       │       └── mod insert_unstaked_txo_asset: pub(self)
│       │           └── struct Params: pub(super)
│       ├── mod queries: pub(crate)
│       │   ├── type FallibleQueryResult: pub(crate)
│       │   ├── type FallibleQueryResults: pub(crate)
│       │   ├── type FallibleQueryTasks: pub(crate)
│       │   ├── struct PreparedQueries: pub(crate)
│       │   ├── enum PreparedQuery: pub(crate)
│       │   ├── enum PreparedSelectQuery: pub(crate)
│       │   ├── type SizedBatch: pub(crate)
│       │   └── mod staked_ada: pub(crate)
│       │       ├── mod get_txi_by_txn_hash: pub(crate)
│       │       │   ├── struct GetTxiByTxnHashesQuery: pub(crate)
│       │       │   ├── struct GetTxiByTxnHashesQueryParams: pub(crate)
│       │       │   └── mod result: pub(self)
│       │       │       └── struct GetTxiByTxnHashesQuery: pub(crate)
│       │       ├── mod get_txo_by_stake_address: pub(crate)
│       │       │   ├── struct GetTxoByStakeAddressQuery: pub(crate)
│       │       │   ├── struct GetTxoByStakeAddressQueryParams: pub(crate)
│       │       │   └── mod result: pub(self)
│       │       │       └── struct GetTxoByStakeAddressQuery: pub(crate)
│       │       └── mod update_txo_spent: pub(crate)
│       │           ├── struct UpdateTxoSpentQuery: pub(crate)
│       │           └── struct UpdateTxoSpentQueryParams: pub(crate)
│       ├── mod schema: pub(crate)
│       └── mod session: pub(crate)
│           ├── struct CassandraSession: pub(crate)
│           ├── enum CompressionChoice: pub(crate)
│           └── enum TlsChoice: pub(crate)
├── mod logger: pub(crate)
│   ├── enum LogLevel: pub(crate)
│   └── type LoggerHandle: pub(crate)
├── mod service: pub(crate)
│   ├── mod api: pub(self)
│   │   ├── mod auth: pub(self)
│   │   │   ├── mod endpoint: pub
│   │   │   │   ├── struct AuthTokenError: pub
│   │   │   │   ├── struct CatalystSecurityScheme: pub
│   │   │   │   ├── type DecodedAuthToken: pub
│   │   │   │   └── type EncodedAuthToken: pub
│   │   │   └── mod token: pub(self)
│   │   │       ├── struct Kid: pub
│   │   │       ├── struct SignatureEd25519: pub
│   │   │       └── struct UlidBytes: pub
│   │   ├── mod cardano: pub(crate)
│   │   │   ├── struct CardanoApi: pub(crate)
│   │   │   ├── mod date_time_to_slot_number_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   ├── mod registration_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   ├── mod staked_ada_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   ├── enum Responses: pub(crate)
│   │   │   │   └── struct TxoInfo: pub(self)
│   │   │   ├── mod sync_state_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   └── mod types: pub(crate)
│   │   │       ├── type DateTime: pub(crate)
│   │   │       ├── type MetadataCip36: pub(crate)
│   │   │       ├── type Nonce: pub(crate)
│   │   │       ├── type PaymentAddress: pub(crate)
│   │   │       ├── struct PubKey: pub(crate)
│   │   │       ├── type PublicVotingInfo: pub(crate)
│   │   │       ├── type SlotNumber: pub(crate)
│   │   │       ├── type StakeAmount: pub(crate)
│   │   │       ├── type StakeCredential: pub(crate)
│   │   │       ├── type TxId: pub(crate)
│   │   │       └── enum VotingInfo: pub(crate)
│   │   ├── mod health: pub(self)
│   │   │   ├── struct HealthApi: pub(crate)
│   │   │   ├── mod inspection_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   ├── enum DeepQueryInspectionFlag: pub(crate)
│   │   │   │   ├── enum LogLevel: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   ├── mod live_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   ├── mod ready_get: pub(self)
│   │   │   │   ├── type AllResponses: pub(crate)
│   │   │   │   └── enum Responses: pub(crate)
│   │   │   └── mod started_get: pub(self)
│   │   │       ├── type AllResponses: pub(crate)
│   │   │       └── enum Responses: pub(crate)
│   │   └── mod legacy: pub(self)
│   │       ├── type LegacyApi: pub(crate)
│   │       ├── mod registration: pub(self)
│   │       │   ├── type AllResponses: pub(self)
│   │       │   ├── struct RegistrationApi: pub(crate)
│   │       │   └── enum Responses: pub(self)
│   │       ├── mod v0: pub(self)
│   │       │   ├── struct V0Api: pub(crate)
│   │       │   ├── mod message_post: pub(self)
│   │       │   │   ├── type AllResponses: pub(crate)
│   │       │   │   └── enum Responses: pub(crate)
│   │       │   └── mod plans_get: pub(self)
│   │       │       ├── type AllResponses: pub(crate)
│   │       │       └── enum Responses: pub(crate)
│   │       └── mod v1: pub(self)
│   │           ├── struct V1Api: pub(crate)
│   │           ├── mod account_votes_get: pub(self)
│   │           │   ├── type AllResponses: pub(crate)
│   │           │   └── enum Responses: pub(crate)
│   │           ├── mod fragments_post: pub(self)
│   │           │   ├── type AllResponses: pub(crate)
│   │           │   └── enum Responses: pub(crate)
│   │           └── mod fragments_statuses: pub(self)
│   │               ├── type AllResponses: pub(crate)
│   │               └── enum Responses: pub(crate)
│   ├── mod common: pub(self)
│   │   ├── mod objects: pub(crate)
│   │   │   ├── mod cardano: pub(crate)
│   │   │   │   ├── mod hash: pub(crate)
│   │   │   │   │   └── struct Hash: pub(crate)
│   │   │   │   │       ├── type RawElementValueType: pub(self)
│   │   │   │   │       └── type RawValueType: pub(self)
│   │   │   │   ├── mod network: pub(crate)
│   │   │   │   │   └── enum Network: pub(crate)
│   │   │   │   ├── mod registration_info: pub(crate)
│   │   │   │   │   ├── struct Delegation: pub(self)
│   │   │   │   │   ├── struct Delegations: pub(self)
│   │   │   │   │   ├── struct DirectVoter: pub(self)
│   │   │   │   │   ├── struct RegistrationInfo: pub(crate)
│   │   │   │   │   └── enum VotingInfo: pub(self)
│   │   │   │   ├── mod slot_info: pub(crate)
│   │   │   │   │   ├── struct Slot: pub(crate)
│   │   │   │   │   └── struct SlotInfo: pub(crate)
│   │   │   │   ├── mod stake_address: pub(crate)
│   │   │   │   │   └── struct StakeAddress: pub(crate)
│   │   │   │   │       ├── type RawElementValueType: pub(self)
│   │   │   │   │       └── type RawValueType: pub(self)
│   │   │   │   ├── mod stake_info: pub(crate)
│   │   │   │   │   ├── struct FullStakeInfo: pub(crate)
│   │   │   │   │   └── struct StakeInfo: pub(crate)
│   │   │   │   └── mod sync_state: pub(crate)
│   │   │   │       └── struct SyncState: pub(crate)
│   │   │   ├── mod legacy: pub(crate)
│   │   │   │   ├── mod account_votes: pub(crate)
│   │   │   │   │   ├── struct AccountId: pub(crate)
│   │   │   │   │   ├── struct AccountVote: pub(crate)
│   │   │   │   │   └── struct VotePlanId: pub(crate)
│   │   │   │   ├── mod block: pub(crate)
│   │   │   │   │   ├── struct BlockDate: pub(crate)
│   │   │   │   │   ├── struct Epoch: pub(crate)
│   │   │   │   │   └── struct Slot: pub(crate)
│   │   │   │   ├── mod delegate_public_key: pub(crate)
│   │   │   │   │   └── struct DelegatePublicKey: pub(crate)
│   │   │   │   ├── mod event_id: pub(crate)
│   │   │   │   │   └── struct EventId: pub(crate)
│   │   │   │   ├── mod fragment_status: pub(crate)
│   │   │   │   │   ├── enum FragmentStatus: pub(crate)
│   │   │   │   │   ├── struct StatusInABlock: pub(crate)
│   │   │   │   │   ├── struct StatusPending: pub(crate)
│   │   │   │   │   └── struct StatusRejected: pub(crate)
│   │   │   │   ├── mod fragments_batch: pub(crate)
│   │   │   │   │   ├── struct FragmentDef: pub(crate)
│   │   │   │   │   └── struct FragmentsBatch: pub(crate)
│   │   │   │   ├── mod fragments_processing_summary: pub(crate)
│   │   │   │   │   ├── struct FragmentId: pub(crate)
│   │   │   │   │   ├── struct FragmentsProcessingSummary: pub(crate)
│   │   │   │   │   ├── enum ReasonRejected: pub(crate)
│   │   │   │   │   └── struct RejectedFragment: pub(crate)
│   │   │   │   ├── mod hash: pub(crate)
│   │   │   │   │   └── struct Hash: pub(crate)
│   │   │   │   ├── mod stake_public_key: pub(crate)
│   │   │   │   │   └── struct StakePublicKey: pub(crate)
│   │   │   │   ├── mod vote_plan: pub(crate)
│   │   │   │   │   └── struct VotePlan: pub(crate)
│   │   │   │   ├── mod voter_group_id: pub(crate)
│   │   │   │   │   └── enum VoterGroupId: pub(crate)
│   │   │   │   ├── mod voter_info: pub(crate)
│   │   │   │   │   └── struct VoterInfo: pub(crate)
│   │   │   │   ├── mod voter_registration: pub(crate)
│   │   │   │   │   └── struct VoterRegistration: pub(crate)
│   │   │   │   └── mod voting_public_key: pub(crate)
│   │   │   │       └── struct VotingPublicKey: pub(crate)
│   │   │   ├── mod server_error: pub(crate)
│   │   │   │   └── struct ServerError: pub(crate)
│   │   │   └── mod validation_error: pub(crate)
│   │   │       └── struct ValidationError: pub(crate)
│   │   ├── mod responses: pub(crate)
│   │   │   ├── enum ErrorResponses: pub(crate)
│   │   │   ├── struct FilteredByStatusCodeResponse: pub(self)
│   │   │   └── enum WithErrorResponses: pub(crate)
│   │   └── mod tags: pub(crate)
│   │       └── enum ApiTags: pub(crate)
│   ├── mod docs: pub(self)
│   │   ├── struct Files: pub(crate)
│   │   └── mod stoplight_elements: pub(self)
│   ├── mod poem_service: pub(self)
│   └── mod utilities: pub(crate)
│       ├── enum NetworkValidationError: pub(crate)
│       ├── mod catch_panic: pub(crate)
│       │   └── struct ServicePanicHandler: pub(crate)
│       │       └── type Response: pub(self)
│       ├── mod convert: pub(crate)
│       ├── mod middleware: pub(crate)
│       │   ├── mod schema_validation: pub(crate)
│       │   │   ├── struct SchemaVersionValidation: pub(crate)
│       │   │   │   └── type Output: pub(self)
│       │   │   └── struct SchemaVersionValidationImpl: pub(crate)
│       │   │       └── type Output: pub(self)
│       │   └── mod tracing_mw: pub(crate)
│       │       ├── struct ResponseData: pub(self)
│       │       ├── struct Tracing: pub(crate)
│       │       │   └── type Output: pub(self)
│       │       └── struct TracingEndpoint: pub(crate)
│       │           └── type Output: pub(self)
│       └── mod net: pub(crate)
└── mod settings: pub(crate)
    ├── struct CassandraEnvVars: pub(crate)
    ├── struct ChainFollowerEnvVars: pub(crate)
    ├── struct DocsSettings: pub(crate)
    ├── struct EnvVars: pub(self)
    ├── struct ServiceSettings: pub(crate)
    ├── struct Settings: pub(crate)
    ├── struct StringEnvVar: pub(crate)
    └── enum StringEnvVarParams: pub(self)
