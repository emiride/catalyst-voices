searchState.loadedDescShard("hermes_ipfs", 0, "Hermes IPFS\nFile that will be added to IPFS\nRepresents a boolean value.\nlibp2p re-exports. An owned dynamically typed <code>Stream</code> for …\nRepresents a sequence of bytes.\nIPFS Content Identifier. A Cid that contains a multihash …\nServer, Client, or Auto mode\nRepresents a floating point value.\nlibp2p re-exports. An extension trait for <code>Future</code>s that …\nPath to get the file from IPFS\nHermes IPFS Node.\nRepresents an integer.\nServer, Client, or Auto mode The facade for the Ipfs node.\nBuilder type for IPFS Node configuration.\nEnum for specifying paths in IPFS. Abstraction over Ipfs …\nIPLD Ipld\nRepresents a map of integers.\nRepresents a list.\nRepresents a map of strings.\n<code>PubSub</code> Message ID.\nMultiaddr type. Representation of a Multiaddr.\nRepresents the absence of a value or the value undefined.\nPath in local disk storage to the file.\nPeer ID type. Identifier of a peer of the network.\nPeer Info type. Abstraction of IdentifyInfo but includes …\nStorage type for IPFS node.\nStream of file bytes, with an optional name. <strong>NOTE</strong> current …\nlibp2p re-exports. An extension trait for <code>Stream</code>s that …\nRepresents an UTF-8 string.\nStream for <code>PubSub</code> Topic Subscriptions. Stream of a pubsub …\nAdd address to bootstrap nodes.\nExtend the list of used bootstrapper nodes with an …\nAdd a given multiaddr as a external address to indenticate …\nAdd a file to IPFS.\nAdd a given multiaddr as a listening address. Will fail if …\nAdd peer to address book.\nAdd address of a peer to the address book\nAdd relay address\nAdd a file through a stream of data to the blockstore\nReturns known peer addresses\nName and version of the peer, similar to the <code>User-Agent</code> …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nBan peer from node.\nBans a peer.\nReturns the known wantlist for the local node when the <code>peer</code>…\nBootstrap the IPFS node.\nBootstraps the local node to join the DHT: it looks up the …\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCreates a stream which will yield the bytes of an UnixFS …\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nClear the currently used list of bootstrapper nodes, …\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nConnects to the peer\nReturns the connected peers\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nReturn an <code>IpldDag</code> for DAG operations\nGet DAG data from IPFS.\nAdd DAG data to IPFS.\nRestore the originally configured bootstrapper node list …\nGet content from DHT.\nAttempts to look a key up in the DHT and returns the …\nSets DHT mode in the IPFS node.\nChange the DHT mode\nAdd content to DHT.\nStores the given key + value record locally and replicates …\nDisable the use of a selected relay.\nDisable TLS for the IPFS node.\nDisconnects a given peer.\nCreate a new, empty multiaddress.\nEnable use of a relay. If <code>peer_id</code> is <code>None</code>, it will select …\nChecks whether the given <code>Multiaddr</code> is a suffix of this …\nCreates a stream which gives the current iteration count …\nExit daemon.\nReturns external addresses\nFetches the block, and, if set, recursively walk the graph …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nObtain the addresses associated with the given <code>PeerId</code>; …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nConvert a Multiaddr to a string\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nBuilds a <code>PeerId</code> from a public key.\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nCleans up of all unpinned blocks Note: This will prevent …\nIndexes into an ipld list or map.\nReturns the Bitswap peers for the a <code>Node</code>.\nRetrieves a block from the local blockstore, or starts …\nObtain the list of addresses of bootstrapper nodes that …\nReturns a list of peers closest to the given <code>PeerId</code>, as …\nGets an ipld node from the ipfs, fetching the block if …\nGet a file from IPFS\nPerforms a DHT lookup for providers of a value to the …\nRetreive a file and saving it to a path.\nReturns the peer identity information. If no peer id is …\nReturns the peer identity information. If no peer id is …\nPin content to IPFS.\nPins a given Cid recursively or directly (non-recursively).\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this stream into a future of …\nConvert this future into a single element stream.\nReturns a <code>Ipns</code> for ipns operations\nChecks whether there is an established connection to a …\nReturns true if the length of this multiaddress is 0.\nChecks whether a given block is pinned.\nChecks whether a given block is pinned.\nReturns the components of this multiaddress.\nReturns an iterator.\nReturns an iterator over the path segments following the …\nReturns the keypair to the node\nReturns the keystore\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturn the length in bytes of this multiaddress.\nList all pins in the IPFS node.\nLists all pins, or the specific kind thereof.\nList all relays. if <code>active</code> is true, it will list all …\nThe addresses that the peer is listening on.\nList of local listening addresses\nReturns local listening addresses\nList directory contents\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMap this future’s output to a different type, returning …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreate a new<code> IpfsBuilder</code>.\nCreates a new <code>IpfsPath</code> from a <code>PathRoot</code>.\nCreates a future that resolves to the next item in the …\nIPFS node\nEvaluates and consumes the future, returning the resulting …\nAddress observed by or for the remote.\nCreates a new stream which exposes a <code>peek</code> method.\nThe peer id of the user\nlibp2p re-exports. Pins a value on the stack.\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nReturns &amp;str identifiers for the protocol names themselves.\nApplication-specific version of the protocol family used …\nThe list of protocols supported by the peer, e.g. …\nEstablishes the node as a provider of a block with the …\nThe public key of the local peer.\nPublish ipns record to DHT\nReturns a stream of pubsub swarm events for a topic.\nStream that returns <code>PubsubEvent</code> for a given topic\nReturns all known pubsub peers with the optional topic …\nPublishes a message to a pubsub topic.\nPublishes to the topic which may have been subscribed to …\nSubscribes to a pubsub topic.\nSubscribes to a given topic. Can be done at most once …\nReturns all currently subscribed topics\nUnsubscribes from a pubsub topic.\nForcibly unsubscribes a previously made <code>SubscriptionStream</code>…\nAdds an already-parsed address component to the end of …\nPuts a block into the ipfs repo.\nPuts an ipld node into the ipfs repo using <code>dag-cbor</code> codec …\nRead specific pins. When <code>requirement</code> is <code>Some</code>, all pins are …\nGenerates a random peer ID from a cryptographically secure …\nAn adaptor for chunking up ready items of the stream …\nReturns the references to other blocks.\nWalk the given Iplds’ links up to <code>max_depth</code> (or …\nReturns a list of local blocks\nTurn this future into a future that yields <code>()</code> on …\nRemove block from the ipfs repo. A pinned block cannot be …\nRemove an address from the currently used list of …\nRemoves a previously added external address.\nStop listening on a previously added listening address. …\nRemove peer from the address book\nRemove peer address from the address book\nRemove pinned content from IPFS.\nUnpins a given Cid recursively or only directly.\nRemove relay address\nReplace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.\nReturn an <code>Repo</code> to access the internal repo of the node\nResolves a ipns path to an ipld path; currently only …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the <code>PathRoot</code> “protocol” configured for the …\n<code>rust_ipfs</code> re-export.\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nReturns a <code>Future</code> that resolves when the next item in this …\nSet the default listener for the IPFS node.\nSet the storage type for the IPFS node to local disk.\nSet the transport configuration for the IPFS node.\nCreate a cloneable handle to this future where all handles …\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nStart the IPFS node.\nStart a new node.\nStop and exit the IPFS node daemon.\nReturns a new <code>IpfsPath</code> with the given path segments …\nHandle stream of messages from the IPFS pubsub topic\nDestructs an ipld list or map\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nUnbans a peer.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nReturns an <code>IpfsUnixfs</code> for files operations\nConverts a stream of pairs into a future, which resolves …\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nCreate a new, empty multiaddress with the given capacity.\nSet the default configuration for the IPFS node.\nAppends the given <code>PeerId</code> if not yet present at the end of …\nAn adapter for zipping two streams together.")